{"version":3,"sources":["components/navbar.jsx","components/arrow.js","utils/common-utils.js","components/display-card.jsx","components/table.jsx","utils/sort.js","components/text.js","components/Map.js","constants/population.js","utils/format-test.js","components/Chart.js","charts/daily.js","components/trend-chart.js","components/meta-card.js","components/news-card.js","components/race-bar/useKeyframes.js","components/race-bar/AxisTop.js","components/race-bar/RacingAxisTop.js","components/race-bar/Bar.js","components/race-bar/RacingBarGroup.js","constants/colors.js","components/race-bar/RacingBarChart.js","constants/state-code.js","components/social.js","components/footer.js","components/home.jsx","components/helplines.jsx","components/state.jsx","utils/scroll-top.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","pages","useState","className","exact","to","src","alt","map","page","i","showInNavbar","pageLink","key","activeClassName","path","animationDelay","window","location","pathname","style","navLinkProps","animationDelayForNavbar","displayName","Arrow","up","rotate","arrow","transform","marginTop","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","points","toCapitalize","string","charAt","toUpperCase","slice","toFixedNumber","number","decimal","tenToD","Math","pow","round","Number","EPSILON","toFixed","timeDifference","current","previous","elapsed","max","fixRelative","num","str","t0","msPerMinute","msPerHour","msPerDay","clone","json","JSON","parse","stringify","IS_MOBILE_DEVICE","innerWidth","IS_SINGLE_COLUMN","shareTheApp","message","document","title","url","href","undefined","navigator","share","text","then","catch","error","shareUri","encodeURI","left","screen","w","top","h","open","shareURL","value","precision","multiplier","getStyle","el","prop","convertToInt","min","offsetWidth","scrollWidth","offsetHeight","scrollHeight","getComputedStyle","getPropertyValue","parseFloat","numberFormatLocal","toLocaleString","DisplayCard","forwardRef","ref","count","cc","cards","styles","callback","setCards","name","activeCard","setActiveCard","useImperativeHandle","updateDisplayCardCounts","card","bg100","bg200","shadow","flexAuto","bg","colorClass","autoWidth","onClick","updateActiveCard","delta","Table","props","columns","rows","filter","row","confirmed","setValues","useEffect","sortRows","event","thisElement","currentTarget","dataset","asc","ascending","sorted","sort","a","b","NaN","descending","column","data-prop","accessor","index","j","columnName","todayCount","extraClass","today","district","link","isUnknown","stateCode","colorMap","active","recovered","dead","tested","getCards","total","list","item","MapText","state","initCardData","child","React","createRef","data","this","setState","Component","d3","Map","handleMapHover","update","selected","mapType","rawPoints","seriesPoints","joinBy","zones","codeLower","toLowerCase","scopeCode","totalSummery","mapExtents","d","colors","object_map","forEach","Promise","all","axios","get","toposjon","mapData","$ZC","mapCollections","availableNames","objects","source","geometries","name_ascii","properties","push","includes","console","log","myDiv","classList","add","scope","seriesdata","chartdata","legend","colorBand","stops","last","tapCallback","clickCallback","mapAction","point","data_callback","percent","container","attr","allowDefault","defaultEvent","chart","plot","plotoptions","geoheatmap","events","mousemove","mouseout","tap","click","maps","userdata","selectAll","classed","select","ranges","enabled","metadata","axes","clr","strokeColor","eventHandler","mapEvents","clearHighlightedPoints","redraw","target","indexOf","bind","c","changeMapType","onTouchStart","colorFinder","chartInstance","POPULATION","DL","HR","KL","HP","PB","GA","TG","UT","CH","LD","DN","GJ","CT","DD","AN","TN","MH","KA","OR","WB","PY","AP","JH","TR","MP","MZ","UP","RJ","SK","BR","MN","AR","JK","LA","NL","ML","AS","PUPULATION_SOURCE","parseTime","timeParse","formatTime","timeFormat","getFormattedTestingData","testing_data","totalPopulation","label","dateString","date","rel","populationNumeric","testedNumeric","population","test_per_million","Chart","seriesData","charts","updateCallback","dailyTrend","history","xKey","keys","cumulative","series","s","obj","prev","makeCumulative","TrendGraph","chartJson","useRef","chartStore","updateChartStore","timeFrame","setTimeFrame","setCumulative","trendTime","month","seriesNames","getTrendSeries","dailySeries","minRange","updateTimeFrame","frame","length","daily","seriesname","xaxis","canvas","show","checked","scaleState","setScaleState","cumulativeMode","setCumulativeMode","Fragment","FormControlLabel","control","Switch","size","onChange","color","disabled","scaleMode","yaxis","scaleType","type","NaNCheck","isNaN","MetaCard","report","tests","confirmedPerMillion","activePercent","recoveredPercent","deathPercent","testPerMillion","confirmedCumulative","growRatePerWeek","growthDateRange","lastWeek","yesterday","split","info","description","cardColor","reportLabel","Tooltip","placement","enterTouchDelay","regex","RegExp","join","overflow","wordBreak","NewsCard","articles","article","relativeTime","Date","publishedAt","match","iconDiv","icon","backgroundImage","urlToImage","lazy","makeKeyframes","numOfSlice","findData","dataByDateAndName","dataPoint","nextGroup","set","e","buildFindData","nameSet","Set","nameList","dateSet","frames","reduce","result","idx","next","prevTimestamp","getTime","diff","sliceDate","sliceData","others","prevValue","nextDataPoint","sliceValue","AxisTop","domainMax","xMax","numTicks","floor","xScaleForAxis","scaleLinear","domain","range","scale","tickLabelProps","textAnchor","dy","fontSize","AnimatedAxisTop","animated","RacingAxisTop","prevDomainMax","springProps","useSpring","from","Bar","x","y","opacity","dominantBaseline","AnimatedBar","RacingBarGroup","frameData","xScale","yScale","colorScale","useTransition","initial","leave","enter","unique","bandwidth","interpolate","v","COLOR_ARRAY1","COLOR_ARRAY3","RacingBarChart","parentRef","keyframes","categories","onStart","onStop","frameIdx","animationKey","playing","setAnimation","updateFrameRef","setTimeout","prevFrameIdx","isLastFrame","nextFrameIdx","chartDimension","setChartDimension","margin","scaleOrdinal","barGroupRef","axisRef","replay","clearTimeout","start","animation","stop","prevPlayingRef","useLayoutEffect","currentDate","values","yMax","useMemo","scaleBand","Array","_","padding","dateObj","dateInYear","getMonth","String","getDate","padStart","getFullYear","Group","defaultProps","right","bottom","STATE_CODES","SocialCard","github","twitter","facebook","Button","startIcon","backgroundColor","fontWeight","textTransform","Footer","Home","fetched","setFetched","setData","tableData","setTableData","mapInitData","setMapInitData","testingData","setTestingData","metaCardPopulation","setMetaCardPopulation","stateDataMapped","setStateDataMapped","dailyChart","setDailyChart","stateStackedChart","setStateStackedChart","deathTrendChart","setDeathTrendChart","deathTrendTotalChart","setDeathTrendTotalChart","recoveryTrendChart","setRecoveryTrendChart","growthRateChart","setGrowthRateChart","stateCases","setStateCases","wordcloudChart","setWordcloudChart","percentChart","setPercentChart","useHistory","childRef","lastUpdated","setLastUpdated","caseHistory","setCaseHistory","spinner","setSpinner","setArticles","setKeyFrames","displayCards","setDisplayCards","stateData","setStateData","fetchData","URL","response","success","getData","urls","reports","indiaHistory","india","stateHistory","stateBar","percentChartJson","news","headlines","updatedTime","states","hasOwnProperty","stateTestHistory","sum","Object","testing_data_imcr","t","deathRateByRecovery","deathRateByTotal","recoveryRateByTotal","stateBarSeries","barSeriesNames","stateBarStacked","lineSeriesNames","stateBarSeriesLine","subtitle","bar","stacked","yaxiscolumnorder","lineSeriesNames1","recoverySeriesLine","march1","stateCasesChart","stateCasesChartLog","threshold","tickCount","ticklabel","alignMode","datatype","columnname","dataindex","numeric","axisformat","prefix","wordcloudSeries","wordCloudChart","wordcloud","minSize","maxSize","legendHighlightEffect","selectedSeries","entries","entry","flat","callbackMap","goToStatePage","find","mapInstance","mouse","node","latLong","geo","utils","projection","invert","rendererArrangedReveresd","getPoint","chartCallback","getMapAndTable","ontouchstart","stateCodes","chartRef","forceUpdate","Helmet","content","endIcon","id","marginLeft","IconButton","aria-label","Helpline","helplines","setHelplines","getHelplines","helpline","State","useParams","stateName","statesKeys","districtData","setDistrictData","setUpdatedTime","district_data","state_data","districtInfo","stateInfo","state_population","districts","totalKnownConfirmed","totalKnownRecovered","totalKnownDeaths","unknowns","dd","defaultValue","ScrollToTop","useLocation","scrollTo","App","view","alternateName","image","basename","process","render","params","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","getElementById","origin","addEventListener","fetch","headers","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oRAgEeA,MAtDf,YAA0B,IAATC,EAAQ,EAARA,MAAQ,EACOC,oBAAS,GADhB,mBAErB,OAFqB,UAGjB,yBAAKC,UAAU,0DACX,yBAAKA,UAAU,sDACX,yBAAKA,UAAU,kDACX,kBAAC,UAAD,CAASC,OAAO,EAAMC,GAAG,IAAIF,UAAU,4CACnC,yBACIG,IAAI,oBACJC,IAAI,OACJJ,UAAU,qBAEd,yBAAKA,UAAU,6CAAf,iBAEI,0BAAMA,UAAU,yCAAhB,UAKR,yBAAKA,UAAU,qBACVF,EAAMO,KAAI,SAACC,EAAMC,GACd,OAA0B,IAAtBD,EAAKE,aAED,kBAAC,UAAD,CACIP,OAAO,EACPC,GAAII,EAAKG,SACTC,IAAKH,EACLP,UACI,0CAEJW,gBACI,4BAGJ,yBAzCnB,SAACC,EAAMC,GAAP,MAA2B,CAC5Cb,UAAU,GAAD,OAAKc,OAAOC,SAASC,WAAaJ,EAAO,UAAY,IAC9DK,MAAO,CACHJ,eAAe,GAAD,OAAKA,EAAL,OAuC0BK,CACAZ,EAAKG,SACLH,EAAKa,yBAGRb,EAAKc,cAKf,a,gDCtBpBC,MA1Bf,YAAkC,IAAlBC,EAAiB,EAAjBA,GAAiB,IAAbC,cAAa,MAAJ,EAAI,EACzBC,EAAQF,EAAK,kBAAoB,mBACjCG,EAAY,GAIhB,OAHIF,IACAE,EAAUA,UAAV,iBAAgCF,EAAhC,SAGA,yBACIN,MAAK,aAAGS,UAAW,YAAeD,GAClCzB,UAAU,eACV2B,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,KAAK,OACLC,OAAO,eACPC,YAAY,IACZC,cAAc,QACdC,eAAe,SAEf,0BAAMC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,MACjC,8BAAUC,OAAQhB,MCXvB,SAASiB,EAAaC,GACzB,OAAOA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,GASlD,SAASC,EAAcC,EAAQC,GAClC,IAAIC,EAASC,KAAKC,IAAI,GAAIH,GAC1B,QAASE,KAAKE,OAAOL,EAASM,OAAOC,SAAWL,GAAUA,GAAQM,QAAQP,GASvE,SAASQ,EAAeC,EAASC,GACpC,IAKIC,EAAUT,KAAKU,IAAI,EAAGH,EAAUC,GAEhCG,EAAc,SAACC,EAAKC,GAChB,IAAIC,EAAKF,EAAM,EAAI,IAAM,GACzB,MAAY,QAARC,GAAyB,IAARD,EACV,YAEL,GAAN,OAAUA,EAAV,YAAiBC,GAAjB,OAAuBC,EAAvB,SAGR,OAAIL,EAfc,IAgBR,GAAN,OAAUT,KAAKE,MAAMO,EAAU,KAA/B,gBACOA,EAhBKM,KAkBLJ,EADHX,KAAKE,MAAMO,EAlBD,KAmBQ,UACfA,EAlBIO,MAmBJL,EAAYX,KAAKE,MAAMO,EApBlBM,MAoBwC,QAC7CN,EAnBMQ,OAoBNN,EAAYX,KAAKE,MAAMO,EArBnBO,OAqBwC,OAC5CP,EApBKQ,QAqBLN,EAAYX,KAAKE,MAAMO,EAtBjBQ,QAsBwC,SAE9CN,EAAYX,KAAKE,MAAMO,EAvBlBQ,SAuBwC,QASrD,SAASC,EAAMC,GAClB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,IAG9B,IAAMI,EAAmB3D,OAAO4D,WAAa,IACvCC,EAAmB7D,OAAO4D,WAAa,KA4B7C,SAASE,IACZ,IAAMC,EAAUC,SAASC,MACrBC,EAAMlE,OAAOC,SAASkE,UAEFC,IAApBC,UAAUC,MACVD,UACKC,MAAM,CACHL,MAAOF,EACPQ,KAAMR,EACNG,IAAKA,IAERM,OACAC,OAAM,SAACC,OAhCpB,SAAkBR,EAAKH,GACnB,IAAMY,EAAQ,6CAAyCC,UAAUV,GAAnD,kBAAiEU,UAAUb,IAGnFc,EAAO7E,OAAO8E,OAAOhE,MAAQ,EAAIiE,IACjCC,EAAMhF,OAAO8E,OAAO/D,OAAS,EAAIkE,IAChCjF,OAAOkF,KACVP,EACAX,SAASC,MACT,2IAKIe,EACA,UACAH,GAkBJM,CAASjB,EAAKH,GAIf,SAASzB,EAAM8C,EAAOC,GACzB,IAAIC,EAAalD,KAAKC,IAAI,GAAIgD,GAAa,GAC3C,OAAOjD,KAAKE,MAAM8C,EAAQE,GAAcA,EAcrC,SAASC,EAASC,EAAIC,GAA4B,IACjDtF,EAD2BuF,IAAqB,yDAIpD,MAAa,UAATD,EACOrD,KAAKuD,IAAIH,EAAGI,YAAaJ,EAAGK,aAAeN,EAASC,EAAI,gBAAkBD,EAASC,EAAI,iBAC9E,WAATC,EAEHrD,KAAKuD,IAAIH,EAAGM,aAAcN,EAAGO,cAAgBR,EAASC,EAAI,eAAiBD,EAASC,EAAI,oBAKhGrF,EAAQH,OAAOgG,iBAAiBR,MAG5BrF,EAAQA,EAAM8F,iBAAiBR,GAC3BC,IACAvF,EAAQ+F,WAAW/F,KAGpBA,GAGJ,SAASJ,EAAeN,GAC3B,MAAO,CAACM,eAAoB,IAAJN,EAAU,MAG/B,SAAS0G,EAAkBlE,GAC9B,MAAsB,kBAAXA,EACAA,EAAOmE,eAAe,SAE1BnE,EC1KX,IAmEeoE,EAnEKC,sBAAW,WAA4CC,GAAQ,EAAlDC,MAAmD,IAArCC,EAAoC,EAA3CC,MAA2C,IAAhCC,cAAgC,MAAvB,GAAuB,EAAnBC,EAAmB,EAAnBA,SAAmB,EACvD3H,mBAASwH,GAD8C,mBAC1EC,EAD0E,KACnEG,EADmE,OAE7C5H,mBAASyH,EAAM,GAAGI,MAF2B,mBAE1EC,EAF0E,KAE9DC,EAF8D,KAe/E,OAXAC,8BAAoBV,GAAK,iBAAO,CAC5BW,wBAD4B,SACJR,GACpBG,EAASH,QAUb,yBAAKxH,UAAU,qDACVwH,EAAMnH,KAAI,SAAC4H,EAAM1H,GACd,IAAI2H,EAAOC,EAAOC,EAAQC,EAiB1B,OAfkB,IAAdZ,EAAOa,IAAgBL,EAAKL,OAASC,IACrCK,EAAK,aAASD,EAAKM,WAAd,QACLJ,EAAK,aAASF,EAAKM,WAAd,UAGa,IAAlBd,EAAOW,SACPA,EAAS,WAGY,IAArBX,EAAOe,YACPH,EAAW,aAGfX,EAAWA,GAAa,aAGpB,yBACIe,QAAS,YA3B7B,SAA0BR,GACtBH,EAAcG,EAAKL,MACnBD,EAAS,YAAIH,IA0BOkB,CAAiBT,GACjBP,EAASO,EAAM1H,IAEnBG,IAAKH,EACLP,UAAS,UACLO,EAAI,OAAS,GADR,sBAEK8H,EAFL,4DAEiED,EAFjE,6BAGLH,EAAKM,WAHA,SAMT,yBAAKvI,UAAS,mEAA8DkI,EAA9D,eAEN,0BAAMlI,UAAU,WACXiI,EAAKU,MAAQ,kBAAC,EAAD,CAAOrH,GAAI2G,EAAKU,OAAS,IAAQ,GAC9C1B,EAAkBgB,EAAKU,QAGhC,0BAAM3I,UAAU,gBAAgBiH,EAAkBgB,EAAK/B,SAE3D,yBAAKlG,UAAS,sBAAiBmI,EAAjB,2BACV,0BAAMnI,UAAU,cAAciI,EAAKL,e,iBC0DhDgB,MA5Gf,SAAeC,GAAQ,IAAD,EACiB9I,mBAAS,CACxC+I,QAASD,EAAMC,QACfC,KAAMF,EAAME,KAAKC,QAAO,SAACC,GAAD,OAASA,EAAIC,UAAY,OAHnC,0BACZH,EADY,EACZA,KAAMD,EADM,EACNA,QAAUK,EADJ,KAMlBJ,EAAOA,EAAKC,QAAO,SAACC,GAAD,OAASA,EAAIC,UAAY,KAE5CE,qBAAU,WACND,EAAU,CACNL,QAASD,EAAMC,QAAQjG,MAAM,GAC7BkG,KAAMF,EAAME,KAAKlG,MAAM,OAE5B,CAACgG,IAEJ,IAAMQ,EAAW,SAAUC,GACnB,IAAAC,EAAcD,EAAME,cACnBjD,EAAQgD,EAAYE,QAApBlD,KAEDmD,EAAOH,EAAYI,WAAaJ,EAAYI,UAC5CC,EAASb,EAAKlG,MAAM,GAAGgH,MAAK,SAAUC,EAAGC,GACzC,OAAOL,ECjBnB,SAAoBI,EAAGC,GACnB,OAAOA,EAAID,GAAK,EAAIC,EAAID,EAAI,EAAIC,GAAKD,EAAI,EAAIE,IDgBxBC,CAAWH,EAAEvD,GAAOwD,EAAExD,IC3B/C,SAAmBuD,EAAGC,GAClB,OAAOD,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAID,GAAKC,EAAI,EAAIC,ID0BOL,CAAUG,EAAEvD,GAAOwD,EAAExD,OAErE4C,EAAU,CACNJ,KAAMa,EACNd,aAIR,OACI,2BAAO9I,UAAU,UACb,2BAAOA,UAAU,mDACb,4BACK8I,EAAQzI,KAAI,SAAC6J,GAAD,OACT,wBACIlK,UAAU,sDACVU,IAAKwJ,EAAOtC,KACZa,QAASY,EACTc,YAAWD,EAAOE,SAClBrF,MAAM,iBAELmF,EAAOtC,WAKxB,2BAAO5H,UAAU,IACZ+I,EAAK1I,KAAI,SAAC4I,EAAKoB,GACZ,OACI,wBAAI3J,IAAK2J,GACJvB,EAAQzI,KAAI,SAAC6J,EAAQI,GAClB,IAAIC,EAAaL,EAAOE,SACpB7B,EAAa2B,EAAO3B,WACpBiC,EAAa,EACblD,EAAQ2B,EAAIsB,GACZE,EAAa,GAwBjB,OAtBIxB,EAAIyB,QACJF,EAAavB,EAAIyB,MAAMH,IAGN,YAAjBtB,EAAI0B,WACJF,EAAU,aAASlC,EAAT,qBAAgCA,EAAhC,SAKVjB,EADAuB,EAAM+B,MAAc,IAANN,IAAYrB,EAAI4B,UAE1B,kBAAC,OAAD,CAAM3K,GAAE,iBAAY+I,EAAI6B,YACnBxD,EACD,0BAAMtH,UAAU,sBACZ,kBAAC,EAAD,CAAOuB,QAAS,OAKpB0F,EAAkBK,GAI1B,wBACI5G,IAAK4J,EACLtK,UAAS,UACC,IAANsK,EAAU,wBAA0B,aAD/B,uCAEsBG,IAE/B,8BACKH,EAAI,GAAKE,EACN,0BAAMxK,UAAS,eAAUuI,EAAV,gCACX,kBAAC,EAAD,CAAOjH,GAAIkJ,EAAa,IACvBvD,EAAkBuD,IAGvB,IAGR,0BAAMxK,UAAU,gBAAgBsH,c,gCEzGpEyD,EAAW,CACX7B,UAAW,MACX8B,OAAQ,SACRC,UAAW,QACXC,KAAM,OACNC,OAAQ,QAGNC,EAAW,WAAmC,IAAlCC,EAAiC,uDAAzB,GAAIX,EAAqB,uDAAb,GAAIY,EAAS,uCAC/C,OAAOA,EAAKjL,KAAI,SAACkL,GACb,MAAO,CACH3D,KAAM2D,EACNrF,MAAOmF,EAAME,GACb5C,MAAO+B,EAAMa,GACbhD,WAAYwC,EAASQ,QAsClBC,E,kDAhCX,WAAY3C,GAAQ,IAAD,8BACf,gBAEK4C,MAAL,eAAiB5C,EAAM6C,aAAvB,CAAqClE,MAAOqB,EAAMrB,QAClD,EAAKmE,MAAQC,IAAMC,YAJJ,E,mDAOZC,EAAMpB,GACTqB,KAAKC,SAASF,GACd,IAAItE,EAAQ4D,EAASU,EAAMpB,EAAOqB,KAAKlD,MAAMrB,OAC7CuE,KAAKJ,MAAMlI,QAAQuE,wBAAwBR,K,+BAI3C,IAAIA,EAAQ4D,EAASW,KAAKN,MAAOM,KAAKN,MAAMf,MAAOqB,KAAKlD,MAAMrB,OACzDI,EAAQmE,KAAKN,MAAb7D,KAEL,OACI,6BACI,wBAAI5H,UAAU,6CACT4H,GAEL,kBAAC,EAAD,CACIH,OAAQ,CAACa,IAAI,EAAOE,WAAW,GAC/BhB,MAAOA,EACPH,IAAK0E,KAAKJ,MACVjE,SAAUqE,KAAKlD,MAAMnB,gB,GA3BnBkE,IAAMK,WClBtBC,EAAKpL,OAAOoL,GAEZC,E,kDACF,WAAYtD,GAAQ,IAAD,8BACf,cAAMA,IAMVuD,eAAiB,SAACN,EAAMpB,GACpB,EAAKiB,MAAMlI,QAAQ4I,OAAOP,EAAMpB,IANhC,EAAKiB,MAAQC,IAAMC,YACnB,EAAKS,SAAWzD,EAAMrB,MAAM,GAC5B,EAAK+E,QAAU,WAJA,E,wOAY2CR,KAAKlD,MAA1DiC,E,EAAAA,UAAyB0B,E,EAAdC,aAAyBC,E,EAAAA,O,EAAQC,MAC7CC,EAAY9B,EAAU+B,cACtBC,E,wBAA6BF,E,MAC7BH,EAAe,GACfM,EAAehB,KAAKlD,MAAM6C,aAE9BK,KAAKiB,WAAa,CACd9D,UAAW,CACP5B,MAAO4E,EAAGtI,IAAI4I,GAAW,SAACS,GAAD,OAAOA,EAAE/D,aAClCgE,OAAQ,CAAC,UAAW,YAExBlC,OAAQ,CACJ1D,MAAO4E,EAAGtI,IAAI4I,GAAW,SAACS,GAAD,OAAOA,EAAEjC,UAClCkC,OAAQ,CAAC,UAAW,YAExBjC,UAAW,CACP3D,MAAO4E,EAAGtI,IAAI4I,GAAW,SAACS,GAAD,OAAOA,EAAEhC,aAClCiC,OAAQ,CAAC,UAAW,YAExBhC,KAAM,CACF5D,MAAO4E,EAAGtI,IAAI4I,GAAW,SAACS,GAAD,OAAOA,EAAE/B,QAClCgC,OAAQ,CAAC,UAAW,aAKxBC,EAAa,GACjBX,EAAUY,SAAQ,SAACnE,GACfkE,EAAWlE,EAAIyD,IAAWzD,K,SAUoBoE,QAAQC,IAAI,CAC1DC,IAAMC,IAAN,gBAAmB1C,EAAnB,cACAyC,IAAMC,IAAI,sB,mCAFAC,E,KAAN3B,KAAwB4B,E,KAAN5B,KAK1BhL,OAAO6M,IAAIC,eAAed,GAAaW,EAGnCI,EAAiB,GACrBpB,EAAegB,EAASK,QAAQC,OAAOC,WAAW3N,KAAI,YAAiC,IAAlB4N,EAAiB,EAA9BC,WAAaD,WAC7D/E,EAAY,EACZ8B,EAAS,EACTC,EAAY,EACZC,EAAO,EAEX,GAAIiC,EAAWc,GAAa,CAAC,IAAD,EACgBd,EAAWc,GAAjD/E,EADsB,EACtBA,UAAW8B,EADW,EACXA,OAAQC,EADG,EACHA,UAAWC,EADR,EACQA,KAEpC2C,EAAeM,KAAKF,GAKpB,MAAO,CAACA,EAAY/E,EAAW8B,EAAQC,EAAWC,EAJvC,SAQfsB,EAAUY,SAAQ,SAACnE,GACV4E,EAAeO,SAASnF,EAAIyD,KAC7B2B,QAAQC,IAAI,iBAAkBrF,EAAIyD,OAI1C2B,QAAQC,IAAI,iCAURvC,KAAKwC,QACLxC,KAAKwC,MAAMC,UAAUC,IAAI,WACzBf,EAAQrN,IAAIqO,MAAQ5B,EACpBY,EAAQiB,WAAWC,UAAU,GAAG9C,KAAO,CAACW,GAExCiB,EAAQmB,OAAO3B,OAAf,YAA4BnB,KAAKiB,WAAW9D,UAAUgE,QACtDQ,EAAQmB,OAAOC,UAAUC,MAAQ,CAAC,EAAGhD,KAAKiB,WAAW9D,UAAU5B,OAE3D0H,EAAO,KARC,EASiCjD,KAAKlD,MAA7CnB,EATO,EASPA,SAAUuH,EATH,EASGA,YAAaC,EAThB,EASgBA,cAEtBC,EAAY,SAAC3J,EAAOsG,GAAU,IAAD,cACkBA,EAAKsD,MADvB,GAC1BxH,EAD0B,KACpBsB,EADoB,KACT8B,EADS,KACDC,EADC,KACUC,EADV,KAE3BR,EAAQ,CAACO,UAAW,EAAG/B,UAAW,EAAG8B,OAAQ,EAAGE,KAAM,GAEtDiC,EAAWvF,KACX8C,EAAQyC,EAAWvF,GAAM8C,OAG7B,IAAI2E,EAAgB,CAChBzH,OACAsB,YACA8B,SACAC,YACAC,QAGJ,GAAItD,IAASoH,EAAM,CACf,IAAI3D,EAAQ0B,EAAa,EAAKT,WAAa,KACvC7I,EAAU4L,EAAc,EAAK/C,WAAa,EAC1CgD,EAAUtI,WAAkBvD,EAAU4H,EAAjB,KAAyB9H,QAAQ,GAG1D,EAAKlD,IAAIkP,UAAUC,KAAK,QAAxB,UAAoCF,EAApC,aAAgD,EAAKhD,SAArD,iBAAsE+C,EAAczH,OAEpF,EAAKwE,eAAeiD,EAAe3E,GACnCsE,EAAOpH,EAGPF,GACAA,EAAS2H,EAAe3E,GAE5B5J,OAAOoL,GAAG5C,MAAMmG,cAAe,GAG/BC,EAAe,kBAAO5O,OAAOoL,GAAG5C,MAAMmG,cAAe,GAEzD/B,EAAQiC,MAAMC,KAAKC,YAAYC,WAAWC,OAAS,CAC/CC,UAAWb,EACXc,SAAU,WACN,EAAK5P,IAAIkP,UAAUC,KAAK,QAAS,MACjC1O,OAAOoL,GAAG5C,MAAMmG,cAAe,GAEnCS,IAAK,SAAC1K,EAAOsG,GACTqD,EAAU3J,EAAOsG,GACbmD,GACAA,EAAYzJ,EAAOsG,EAAM,EAAKzL,KAElCS,OAAOoL,GAAG5C,MAAMmG,cAAe,GAEnCU,MAAOjB,GAAiBQ,GAG5B3D,KAAK1L,IAAMS,OAAO6M,IAAIyC,KAAKrE,KAAKwC,MAAOb,I,sIAItCzF,EAAM1H,GAGXwL,KAAK1L,IAAIgQ,SAASxB,OAAO3B,OAAzB,YAAsCnB,KAAKiB,WAAW/E,EAAKL,MAAMsF,QACjEnB,KAAK1L,IAAIgQ,SAASxB,OAAOC,UAAUC,MAAQ,CAAC,EAAGhD,KAAKiB,WAAW/E,EAAKL,MAAMN,OAC1EyE,KAAKO,SAAWrE,EAAKL,KAGrBsE,EAAGoE,UAAU,UAAUC,QAAQ,gBAAgB,GAC/CrE,EAAGsE,OAAO,wBAAwBD,QAAQ,gBAAgB,GAE1DxE,KAAK1L,IAAIgQ,SAASxB,OAAOC,UAAU2B,OAAS,KAC5C1E,KAAK1L,IAAIgQ,SAASxB,OAAO7F,OAAO0H,SAAU,EAC1C3E,KAAK1L,IAAIgQ,SAASM,SAASC,KAAKC,IAAM,CAACtQ,EAAI,GAC3CwL,KAAK1L,IAAIgQ,SAASV,MAAMC,KAAKC,YAAYC,WAAWgB,YAbrC,CAAC,UAAW,UAAW,UAAW,WAa0BvQ,GAC3EwL,KAAK1L,IAAI0Q,aAAaC,UAAUC,yBAChClF,KAAK1L,IAAI6Q,W,oCAGC5H,GACV4C,EAAGoE,UAAU,UAAUC,QAAQ,gBAAgB,GAC/CjH,EAAM6H,OAAO3C,UAAUC,IAAI,gBAED,SAAtBnF,EAAM6H,OAAOvJ,MACbmE,KAAKQ,QAAU,OACfR,KAAK1L,IAAIgQ,SAASxB,OAAO3B,OAAS,CAAC,UAAW,UAAW,WACzDnB,KAAK1L,IAAIgQ,SAASxB,OAAOC,UAAU2B,OAAS,CAAC,CAAC,YAAa,CAAC,eAAgB,CAAC,eAC7E1E,KAAK1L,IAAIgQ,SAASV,MAAMC,KAAKC,YAAYC,WAAWgB,YAAc,OAClE/E,KAAK1L,IAAIgQ,SAASxB,OAAO7F,OAAO0H,SAAU,EAC1C3E,KAAK1L,IAAIgQ,SAASM,SAASC,KAAKC,IAAM,CAAC,GACvC9E,KAAK1L,IAAI0Q,aAAaC,UAAUC,yBAChClF,KAAK1L,IAAI6Q,UAETnF,KAAKrE,SAAS,CAACE,KAAMmE,KAAKO,UAAWP,KAAKlD,MAAMrB,MAAM4J,QAAQrF,KAAKO,a,+BAIjE,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,CACIjF,IAAK0E,KAAKJ,MACVD,aAAcK,KAAKlD,MAAM6C,aACzBlE,MAAOuE,KAAKlD,MAAMrB,MAClBE,SAAUqE,KAAKrE,SAAS2J,KAAKtF,QAEjC,yBAAK/L,UAAU,gBAAgBqH,IAAK,SAACiK,GAAD,OAAQ,EAAK/C,MAAQ+C,KACxDvF,KAAKlD,MAAM8D,OACR,yBAAK3M,UAAU,uBACX,4BACIA,UAAU,+CACV4H,KAAK,UACLa,QAASsD,KAAKwF,cAAcF,KAAKtF,MACjCyF,aAAczF,KAAKwF,cAAcF,KAAKtF,OAJ1C,kBAQA,4BACI/L,UAAU,uCACV4H,KAAK,OACLa,QAASsD,KAAKwF,cAAcF,KAAKtF,MACjCyF,aAAczF,KAAKwF,cAAcF,KAAKtF,OAJ1C,e,GA1NNH,IAAMK,WAyOxBnL,OAAO2Q,YAAc,SAAUC,EAAerH,EAAOyB,GAGjD,GAAyB,IAArBA,EAFa4F,EAAcrB,SAASM,SAASC,KAAKC,IAAI,IAGtD,MAAO,SAIA1E,QCvPFwF,EAAa,CACtBC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,QACJC,GAAI,SACJC,GAAI,QACJC,GAAI,SACJC,GAAI,SACJC,GAAI,QACJC,GAAI,MACJC,GAAI,OACJC,GAAI,SACJC,GAAI,SACJC,GAAI,OACJC,GAAI,OACJC,GAAI,SACJC,GAAI,UACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,QACJC,GAAI,SACJC,GAAI,SACJC,GAAI,QACJC,GAAI,SACJC,GAAI,QACJC,GAAI,UACJC,GAAI,SACJC,GAAI,OACJC,GAAI,UACJC,GAAI,QACJC,GAAI,QACJC,GAAI,SACJC,GAAI,OACJC,GAAI,QACJC,GAAI,QACJC,GAAI,UAGKC,EACT,gECtCE/H,EAAKpL,OAAOoL,GACdgI,EAAYhI,EAAGiI,UAAU,YACzBC,EAAalI,EAAGmI,WAAW,SAUxB,SAASC,EAAwBC,EAAcC,EAAiBC,GACnE,IAAIC,EAWJ,OATAA,EACI,yBAAK1U,UAAU,WACA,UAAVyU,EAAoB,sBAApB,eAAoDL,EAAWF,EAAUK,EAAaI,OAAtF,YACD,uBAAG1P,KAAMsP,EAAaxG,OAAQ6G,IAAI,WAAW5U,UAAU,cAAcmR,OAAO,UAC7D,UAAVsD,EAAoB,SAAW,WAKrC,CACHI,kBAAmBL,EACnBM,cAAeP,EAAapJ,OAC5BA,OAAQlE,EAAkBsN,EAAapJ,QACvCwJ,KAAMD,EACNK,WAAY9N,EAAkBuN,GAC9BQ,iBAAkB/N,EAAkB/D,KAAKE,MAAOmR,EAAapJ,OAASqJ,EAAmB,MACzFC,MAAM,MAAD,OAAQA,I,ICJNQ,E,kDA3BX,WAAYpM,GAAQ,IAAD,8BACf,cAAMA,IACD8C,MAAQC,IAAMC,YAFJ,E,gEAKE,IAAD,EACmBE,KAAKlD,MAAnCqM,EADW,EACXA,WAAYtN,EADD,EACCA,KAAMF,EADP,EACOA,SAEvB,GAAIqE,KAAKwC,MAAO,CACZ,IAAIoB,EAAQ5D,KAAK4D,MAAQ7O,OAAO6M,IAAIwH,OAAOpJ,KAAKwC,MAAO2G,GACnDxN,GACAA,EAASiI,EAAO/H,M,2CAMpBmE,KAAKlD,MAAMuM,gBACXrJ,KAAKlD,MAAMuM,eAAerJ,KAAK4D,MAAO5D,KAAKlD,MAAMjB,Q,+BAI/C,IAAD,OACL,OAAO,yBAAK5H,UAAU,SAASqH,IAAK,SAACiK,GAAD,OAAQ,EAAK/C,MAAQ+C,S,GAxB7C1F,IAAMK,WCM1B,SAASoJ,EAAWC,EAASC,EAAMC,EAAMC,EAAYnO,GACjD,IAAIoO,EAASF,EAAKnV,KAAI,SAACK,GACnB,OAAO4U,EAAQjV,KAAI,SAAC4I,EAAK1I,GACrB,MAAa,WAATgV,EACO,CAAChV,EAAG0I,EAAIvI,IAEZ,CAACuI,EAAIsM,GAAOtM,EAAIvI,UAc/B,OAVI+U,GACAC,EAAOtI,SAAQ,SAACuI,IAnBxB,SAAwBC,EAAKlV,GACzB,IAAImV,EAAO,EACXD,EAAIxI,SAAQ,SAACnE,GACTA,EAAIvI,IAAQmV,EACZA,EAAO5M,EAAIvI,MAgBPoV,CAAeH,EAAG,MAItBrO,IACAoO,EAASA,EAAOrV,KAAI,SAACsV,GAAD,OAAOA,EAAE9S,OAAOyE,OAGjCoO,E,8BC0JIK,OAzKf,SAAoBlN,GAAQ,IACnBmN,EAAsBnN,EAAtBmN,UAAWV,EAAWzM,EAAXyM,QADO,GAGXW,mBAC2BlW,mBAAS,KAJzB,mBAIhBmW,EAJgB,KAIJC,EAJI,OAKqBpW,mBAAS,cAL9B,gCAOWA,mBAAS,QAPpB,mBAOhBqW,EAPgB,KAOLC,EAPK,OAQatW,oBAAS,GARtB,mBAQJuW,GARI,WAUnBC,EAAY,CAAC,QAAS,EAAG,QAAS,GAAIC,MAAO,IAC7CC,EAAc,CAAC,YAAa,SAAU,YAAa,QA2BvD,SAASC,EAAejB,EAAYnO,GAEhC,IACIqP,EAActB,EAAWC,EAAS,OADpB,CAAC,YAAa,SAAU,YAAa,QACIG,EAAYnO,GACvE,MAAO,CACHoO,OAAQiB,EACRC,SAAUD,EAAY,GAAG,GAAG,IA0BpC,SAASE,EAAgBC,GACrBT,EAAaS,GAGjB,GAAIxB,EAAQyB,SAAWb,EAAWc,MAAO,CAAC,IAAD,EACZN,GAAe,EAAMH,EAAUH,IAAnDV,EADgC,EAChCA,OAAQkB,EADwB,EACxBA,SACblB,EAAOtI,SAAQ,SAACsI,EAAQnV,GACpByV,EAAUrH,WAAWC,UAAUrO,GAAK,CAACuL,KAAM4J,EAAQuB,WAAYxU,EAAagU,EAAYlW,QAE5FyV,EAAUrG,MAAMiB,KAAKsG,MAAMN,SAAWA,EACtCZ,EAAUmB,OAAOpS,MAAMqS,MAAO,EAhFX,MAmFaxL,IAAM7L,SAAS,CAACsX,SAAS,IAnFtC,mBAmFhBC,EAnFgB,KAmFJC,EAnFI,OAoFqB3L,IAAM7L,SAAS,CAACsX,SAAS,IApF9C,mBAoFhBG,EApFgB,KAoFAC,EApFA,KAsFvB,OACI,kBAAC,IAAMC,SAAP,KACI,wBAAI1X,UAAU,aAAd,eACA,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,sBACX,0BAAMA,UAAU,QAAhB,SACA,kBAAC2X,EAAA,EAAD,CACIC,QACI,kBAACC,EAAA,EAAD,CACIC,KAAK,QACLT,QAASC,EAAWD,QACpBU,SA7C5B,SAAmCzO,GAC/B,IAAI+N,EAAU/N,EAAM6H,OAAOkG,QAC3BE,EAAc,eAAID,EAAL,eAAkBhO,EAAM6H,OAAOvJ,KAAOyP,KACnDI,EAAkB,eAAID,EAAL,CAAqBH,SAAS,MA2CvBzP,KAAK,UACLoQ,MAAM,YAGdvD,MAAM,iBAGd,yBAAKzU,UAAU,sBACX,0BAAMA,UAAU,QAAhB,QACA,kBAAC2X,EAAA,EAAD,CACIC,QACI,kBAACC,EAAA,EAAD,CACII,SAAUX,EAAWD,QACrBS,KAAK,QACLT,QAASG,EAAeH,QACxBU,SAnD5B,SAAoCzO,GAChC,IAAImM,GAAsC,IAAzBnM,EAAM6H,OAAOkG,QAC9Bf,EAAcb,GAEdgC,EAAkB,eAAID,EAAL,CAAqBH,SAAU5B,KAChD8B,EAAc,eAAID,EAAL,CAAiBD,SAAS,MA+CfzP,KAAK,UACLoQ,MAAM,YAGdvD,MAAM,YAIlB,yBAAKzU,UAAU,eACX,kBAAC,EAAD,CAAOkV,WAAYc,EAAWpO,KAAK,QAAQF,SAzGvD,SAAuBiI,EAAO/H,GAC1BsO,EAAWtO,GAAQ+H,EACnBwG,EAAiBD,IAuG2Dd,eApGhF,WACI,IAAIzF,EAAQuG,EAAWc,MACnBkB,EAAYZ,EAAWD,QAAU,MAAQ,SACzC5B,GAAwC,IAA3B+B,EAAeH,QAEhC1H,EAAMU,SAASV,MAAMiB,KAAKuH,MAAM,GAAGC,UAAYF,EALzB,MAMGxB,EAAejB,EAAYc,EAAUH,IAAzDV,EANiB,EAMjBA,OAAQkB,EANS,EAMTA,SAEblB,EAAOtI,SAAQ,SAACuI,EAAGpV,GACfoP,EAAMU,SAAS1B,WAAWC,UAAUrO,GAAGuL,KAAO6J,KAElDhG,EAAMU,SAASV,MAAMiB,KAAKsG,MAAMN,SAAWA,EAC3CjH,EAAMuB,aA0FF,yBAAKlR,UAAU,qDACX,yBAAKA,UAAU,6BACX,4BACIqY,KAAK,SACL5P,QAAS,kBAAMoO,EAAgB,QAC/B7W,UAAS,UACS,QAAdoW,EAAsB,WAAa,GAD9B,mDAHb,aASA,4BACIiC,KAAK,SACL5P,QAAS,kBAAMoO,EAAgB,UAC/B7W,UAAS,UACS,UAAdoW,EAAwB,WAAa,GADhC,mDAHb,SASA,4BACIiC,KAAK,SACL5P,QAAS,kBAAMoO,EAAgB,UAC/B7W,UAAS,UACS,UAAdoW,EAAwB,WAAa,GADhC,mDAHb,WASA,4BACIiC,KAAK,SACL5P,QAAS,kBAAMoO,EAAgB,UAC/B7W,UAAS,UACS,UAAdoW,EAAwB,WAAa,GADhC,mDAHb,c,qEC3JdkC,GAAW,SAACrL,GACd,OAAIsL,MAAMtL,GACC,EAEJhG,EAAkBgG,IAyIduL,OAtIf,YAA6C,IAAD,EAAzBC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,MAAOpD,EAAU,EAAVA,QACNP,EAAc2D,EAAjC7D,kBAED8D,EAAsBL,GAASlV,EAAOqV,EAAOvP,UAAY6L,EAAc,MACvE6D,EAAgBN,GAASlV,EAAOqV,EAAOzN,OAASyN,EAAOvP,UAAa,IAAK,IACzE2P,EAAmBP,GAASlV,EAAOqV,EAAOxN,UAAYwN,EAAOvP,UAAa,IAAK,IAC/E4P,EAAeR,GAASlV,EAAOqV,EAAOvN,KAAOuN,EAAOvP,UAAa,IAAK,IACtE6P,EAAiBT,GAASlV,EAAOsV,EAAM5D,cAAgBC,EAAc,MAGrE/F,EAAO,EACXsG,EAAQlI,SAAQ,SAACnE,GACbA,EAAI+P,oBAAsB/P,EAAIC,UAAY8F,EAC1CA,EAAO/F,EAAI+P,uBAGf,IAAIC,EAAkB,EAClBC,EAAkB,EAEtB,GAAI5D,EAAQyB,OAAS,EAAG,CACpB,IAAIoC,EAAW7D,EAAQA,EAAQyB,OAAS,GACpCqC,EAAY9D,EAAQA,EAAQyB,OAAS,GAErCzB,EAAQyB,OAAS,IACjBoC,EAAW7D,EAAQ,IAKvB2D,EAAkB7V,GADZgW,EAAUJ,oBAAsBG,EAASH,qBAAuBG,EAASH,oBAAuB,IACjE,GACrCE,EAAe,UAAMC,EAASxE,KAAK0E,MAAM,KAAK,GAA/B,cAAuCD,EAAUzE,KAAK0E,MAAM,KAAK,IAIpF,IAAI7R,EAAQ,CACR,CACIzC,MAAO,wBACPuU,KAAM,6CACNb,OAAQE,EACRY,YAAY,IAAD,OAAMZ,EAAN,6CAA8DF,EAAO7Q,KAArE,wCACX4R,UAAW,OAEf,CACIzU,MAAO,SACPuU,KAAM,6BACNb,OAAQG,EACRW,YAAY,mCAAD,OAAqCnW,EAAMwV,GAA3C,4BACXY,UAAW,UAEf,CACIzU,MAAO,gBACPuU,KAAM,gCACNb,OAAQI,EACRU,YAAY,mCAAD,OAAqCnW,EAAMyV,GAA3C,mCACXW,UAAW,SAEf,CACIzU,MAAO,iBACPuU,KAAM,6BACNb,OAAQK,EACRS,YAAY,mCAAD,OAAqCnW,EAC5C0V,GADO,mDAGXU,UAAW,QAEf,CACIzU,MAAO,sBACPuU,KAAM,0EACNb,OAAO,GAAD,OAAKQ,EAAL,KACNQ,YAAaP,EACbK,YAAY,iFAAD,OAAmFN,EAAnF,gBACXO,UAAW,SAEf,CACIzU,MAAO,oBACPuU,KAAM,+CACNb,OAAO,IAAD,OAAMM,GACZQ,YAAY,iCAAD,OAAmCd,EAAO7Q,KAA1C,cAAoDmR,EAApD,wBACXS,UAAW,SAInB,OACI,kBAAC,IAAM9B,SAAP,KACI,yBAAK1X,UAAU,6BACX,yBAAKA,UAAU,2BACX,wBAAIA,UAAU,WAAd,aACe,IACX,0BACI4U,IAAI,WACJzD,OAAO,UAFX,oBAGQ,uBAHR,0BAIc,iBAJd,qBAKU8C,GALV,YAUJ,wBAAIjU,UAAU,sCAAsC0Y,EAAM3D,cAGlE,yBAAK/U,UAAU,kBACVwH,EAAMnH,KAAI,SAAC4H,EAAM1H,GACd,OACI,yBACIP,UAAS,iCAA4BiI,EAAKuR,UAAjC,qBAAuDvR,EAAKuR,UAA5D,iCACT9Y,IAAKH,GAEL,yBAAKP,UAAU,mDACX,wBAAIA,UAAU,kBAAkBiI,EAAKlD,OACrC,8BACI,kBAAC2U,GAAA,EAAD,CACI3U,MAAO,yBAAK/E,UAAU,6BAA6BiI,EAAKqR,MACxD9X,OAAK,EACLmY,UAAU,MACVC,gBAAiB,IAEjB,kBAAC,KAAD,CAAU9B,KAAK,aAI3B,yBAAK9X,UAAU,QACX,wBAAIA,UAAS,eAAUiI,EAAKuR,UAAf,kCAA0DvR,EAAKwQ,QAC5E,0BAAMzY,UAAU,WAAWiI,EAAKwR,cAEpC,uBAAGzZ,UAAU,WAAWiI,EAAKsR,oBCjHrDM,GAAQ,IAAIC,OA5BF,CACN,kBACA,YACA,aACA,WACA,OACA,SACA,WACA,UACA,eACA,iBACA,cACA,eACA,YACA,iBACA,OACA,gBACA,eACA,UACA,kBACA,gBACA,aACA,eACA,gBACA,gBACA,MACA,gBAEqBC,KAAK,MAC9BtS,GAAS,CAACuS,SAAU,SAAUC,UAAW,cAiE9BC,OA/Df,YAA+B,IAAZC,EAAW,EAAXA,SACf,OACI,kBAAC,IAAMzC,SAAP,KACKyC,EAAS9Z,KAAI,SAAC+Z,EAAS7Z,GACpB,IAAI8Z,EAAe7W,EAAe,IAAI8W,KAAQ,IAAIA,KAAKF,EAAQG,cAC3DC,EAAQJ,EAAQpV,IAAIwV,MAAMX,IAC1BY,EAAU,GACV1M,EAAS,GAEb,GAAIyM,GAASA,EAAMzD,OAAQ,CACvB,IAAI2D,EAAI,8BAA0BF,EAAM,GAAhC,QACRC,EACI,yBAAKza,UAAU,iCAAiCiB,MAAO,CAAC0Z,gBAAgB,OAAD,OAASD,EAAT,aAG3E3M,EACI,yBAAK/N,UAAU,2BAA2BiB,MAAOwG,IAC7C,sCADJ,IACoB2S,EAAQrM,OAAOnG,MAK3C,OAAKwS,EAAQQ,YAAcR,EAAQQ,WAAWJ,MAAM,YACzC,GAIP,yBAAKxa,UAAU,8BAA8BU,IAAKH,GAC9C,uBACI0E,KAAMmV,EAAQpV,IACdmM,OAAO,SACPyD,IAAI,WACJ5U,UAAU,yDAEV,qCACIA,UAAU,gDACV6a,KAAK,SACL5Z,OAAK,GAHT,QAIW,CAAC0Z,gBAAgB,OAAD,OAASP,EAAQQ,WAAjB,QAG3B,yBAAK5a,UAAU,6BACVya,EACD,yBACIza,UAAU,uEACViB,MAAOwG,IAEN2S,EAAQrV,OAEb,yBAAK/E,UAAU,iDAAiDiB,MAAOwG,IAClE2S,EAAQb,aAEZxL,EACD,yBAAK/N,UAAU,eAAeqa,W,SC7DxDS,GAAgB,SAAChP,EAAMiP,GACzB,IAAMC,EAzBY,SAAClP,GACnB,IAAMmP,EAAoB,IAAI9O,IAC9BL,EAAKsB,SAAQ,SAAC8N,GAAe,IAClBvG,EAAcuG,EAAdvG,KAAM/M,EAAQsT,EAARtT,KACb,GAAKqT,EAAkBzN,IAAImH,GAEpB,CACH,IAAMwG,EAAS,eACRF,EAAkBzN,IAAImH,GADd,eAEV/M,EAAOsT,IAEZD,EAAkBG,IAAIzG,EAAMwG,QAN5BF,EAAkBG,IAAIzG,EAAtB,eAA8B/M,EAAOsT,OAgB7C,OAPe,SAAC,GAAkB,IAAjBvG,EAAgB,EAAhBA,KAAM/M,EAAU,EAAVA,KACnB,IACI,OAAOqT,EAAkBzN,IAAImH,GAAM/M,GACrC,MAAOyT,GACL,OAAO,OAOEC,CAAcxP,GACzByP,EAAU,IAAIC,IAAI1P,EAAKzL,KAAI,qBAAEuH,SAE7B6T,EAAQ,YAAOF,GACfG,EAAU,IAAIF,IAAI1P,EAAKzL,KAAI,qBAAEsU,SAG7BgH,EAFQ,YAAOD,GAEGrb,KAAI,SAACsU,GAAD,MAAW,CACnCA,OACA7I,KAAM2P,EAASpb,KAAI,SAACuH,GAChB,IAAMsT,EAAYF,EAAS,CAACrG,OAAM/M,SAClC,OAAO,eACAsT,EADP,CAEIhV,MAAOgV,EAAYA,EAAUhV,MAAQ,WA0CjD,OArCkByV,EACbC,QAAO,SAACC,EAAQ/E,EAAOgF,GACpB,IAAMjG,EAAOiB,EACPiF,EAAOD,IAAQH,EAAO5E,OAAS,EAAI4E,EAAOG,EAAM,GAAK,KAC3D,GAAKC,EAMD,IAHA,IAAMC,EAAgB,IAAI1B,KAAKzE,EAAKlB,MAAMsH,UAEpCC,EADgB,IAAI5B,KAAKyB,EAAKpH,MAAMsH,UACbD,EAH1B,WAIMzb,GACL,IAAM4b,EAAY,IAAI7B,KAAK0B,EAAiBE,EAAO3b,EAAKwa,GAClDqB,EAAYtF,EAAMhL,KAAKzL,KAAI,YAA+B,IAA7BuH,EAA4B,EAA5BA,KAAM1B,EAAsB,EAAtBA,MAAUmW,EAAY,iCACrDC,EAAYpW,EACZqW,EAAgBvB,EAAS,CAACrG,KAAMoH,EAAKpH,KAAM/M,SAE3C4U,EAAaF,IADDC,EAAgBA,EAAcrW,MAAQ,GACXoW,GAAa/b,EAAKwa,EAC/D,OAAO,aACHnT,OACA1B,MAAOsW,GACJH,MAGXR,EAAO1N,KAAK,CACRwG,KAAMwH,EACNrQ,KAAMsQ,KAfL7b,EAAI,EAAGA,EAAIwa,EAAYxa,IAAM,EAA7BA,QALTsb,EAAO1N,KAAP,eAAgB2I,EAAhB,CAAuBnC,KAAM,IAAI2F,KAAKxD,EAAMnC,SAwBhD,OAAOkH,IACR,IACFxb,KAAI,YACD,MAAO,CACHsU,KAFe,EAAhBA,KAGC7I,KAHe,EAAVA,KAGMjC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE7D,MAAQ4D,EAAE5D,c,2DCnDvCuW,GAvBC,SAAC5T,GAAW,IACjB6T,EAAmB7T,EAAnB6T,UAAWC,EAAQ9T,EAAR8T,KACZC,EAAWD,EAAO,IAAM,EAAIzZ,KAAK2Z,MAAMF,EAAO,KAC9CG,EAAgBC,aAAY,CAC9BC,OAAQ,CAAC,EAAGN,GACZO,MAAO,CAAC,EAAGN,KAEf,OACI,kBAAC,KAAD,CACI7W,IAAK,EACLH,KAAM,EACNuX,MAAOJ,EACPK,eAAgB,iBAAO,CAACC,WAAY,SAAUC,GAAI,UAAWC,SAAU,KACvEV,SAAUA,KCbhBW,GAAkBC,aAASf,IAkBlBgB,GAhBOrW,sBAAW,WAAoBC,GAAS,IAA3BqV,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,KAEpCe,EADmBzH,iBAAOyG,GACOjZ,QACjCka,EAAcC,aAAU,CAC1BC,KAAM,CAACnB,UAAWgB,GAClBxd,GAAI,CAACwc,aACLrV,QAEJ,OAAO,kBAACkW,GAAD,eAAiBZ,KAAMA,GAAUgB,OCC7BG,GAdH,SAAC,GAA+C,IAA9C9F,EAA6C,EAA7CA,MAAO+F,EAAsC,EAAtCA,EAAGC,EAAmC,EAAnCA,EAAGpc,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,OAAQ+F,EAAiB,EAAjBA,KAAM1B,EAAW,EAAXA,MAC5C,OACI,uBAAGzE,UAAS,oBAAesc,EAAf,YAAoBC,EAApB,MACR,0BAAMD,EAAG,EAAGC,EAAG,EAAGpc,MAAOA,EAAOC,OAAQA,EAAQE,KAAMiW,EAAO/W,MAAO,CAACgd,QAAS,MAC9E,0BAAMC,iBAAiB,SAASH,EAAGnc,EAAQ,EAAGoc,EAAGnc,EAAS,EAAGub,WAAW,QAAQpd,UAAU,WACrFkG,GAEL,0BAAMgY,iBAAiB,SAASH,GAAM,EAAGC,EAAGnc,EAAS,EAAGub,WAAW,MAAME,SAAU,GAAItd,UAAU,sBAC5F4H,KCNXuW,GAAcX,aAASM,IAwCdM,GAtCQhX,sBAAW,WAA0CC,GAAS,IAAjDgX,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,WAoB3D,OAnBoBC,aAChBJ,EAAUhe,KAAI,WAAgByb,GAAhB,IAAElU,EAAF,EAAEA,KAAM1B,EAAR,EAAQA,MAAR,MAAyB,CACnC8X,EAAGO,EAAOzC,GACVla,MAAO0c,EAAOpY,GACdA,QACA0B,YAEJ,SAACqF,GAAD,OAAOA,EAAErF,OACT,CACI8W,QAAS,SAACzR,GAAD,OAAOA,GAChB4Q,KAAM,CAACG,EAAGO,EAAOtB,QAAQ,GAAK,GAAIrb,MAAO,EAAGsE,MAAO,GACnDyY,MAAO,CAACX,EAAGO,EAAOtB,QAAQ,GAAK,GAAIrb,MAAO,EAAGsE,MAAO,GACpD0Y,MAAO,SAAC3R,GAAD,OAAOA,GACdZ,OAAQ,SAACY,GAAD,OAAOA,GACf4R,QAAQ,EACRxX,QAIWhH,KAAI,YAAoB,IAAlBkL,EAAiB,EAAjBA,KAAM1C,EAAW,EAAXA,MACpBmV,EAAmBnV,EAAnBmV,EAAG9X,EAAgB2C,EAAhB3C,MAAOtE,EAASiH,EAATjH,MACVgG,EAAQ2D,EAAR3D,KACP,OACI,kBAACuW,GAAD,CACIJ,EAAGO,EAAO,GACVN,EAAGA,EACHpc,MAAOA,EACPC,OAAQ0c,EAAOO,YACf9G,MAAOwG,EAAW5W,GAClB1B,MAAOA,EAAM6Y,aAAY,SAACC,GAAD,OAAOA,EAAEzb,aAClCqE,KAAMA,EACNlH,IAAKkH,UCtCRqX,GAAe,CACxB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAgBSC,GAAY,CACrB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAnBqB,OAbG,CACxB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YCxBEC,GAAiBvT,IAAMxE,YAAW,WAAsDC,GAAS,IAA7D+X,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAiB,EACxCzf,mBAAS,CAC/D0f,SAAU,EACVC,aAAc,EACdC,SAAS,IAJqF,0BAC1FF,EAD0F,EAC1FA,SAAUC,EADgF,EAChFA,aAAcC,EADkE,EAClEA,QAAUC,EADwD,KAM5FC,EAAiB5J,mBAEvB7M,qBAAU,YACDyW,EAAepc,SAAWkc,IAC3BE,EAAepc,QAAUqc,YAAW,WAChCF,GAAa,YAAmD,IAAvCG,EAAsC,EAAhDN,SAAwBE,EAAwB,EAAxBA,QAAYtD,EAAY,uCACrD2D,EAAcD,IAAiBV,EAAUtI,OAAS,EAClDkJ,EAAeD,EAAcD,EAAeA,EAAe,EACjE,OAAO,eACA1D,EADP,CAEIoD,SAAUE,EAAUM,EAAeF,EACnCJ,WAAYA,GAAYK,QAGhCH,EAAepc,QAAU,OAC1B,SArBuF,MAyBtD1D,mBAAS,CAAC6B,MAAO,EAAGC,OAAQ,IAzB0B,mBAyB3Fqe,EAzB2F,KAyB3EC,EAzB2E,KA2BlG/W,qBAAU,WACFgW,EAAU3b,SACV0c,EAAkB,CACdve,MAAOyE,EAAS+Y,EAAU3b,QAAS,SACnC5B,OAAQwE,EAAS+Y,EAAU3b,QAAS,cAG7C,CAAC2b,IAEJ,IACIxd,EAAQse,EAAete,MACvBC,EAASqe,EAAere,OACxBue,EACS,GADTA,EAEW,GAFXA,EAGY,GAHZA,EAIU,IAEV5B,EAAa6B,aAAanB,IAAclC,OAAOsC,GAAYrC,MAAMiC,IAE/DoB,EAAcrK,mBACdsK,EAAUtK,mBAChBlO,8BAAoBV,GAAK,iBAAO,CAC5BmZ,OAAQ,WACJC,aAAaZ,EAAepc,SAC5Boc,EAAepc,QAAU,KACzBmc,GAAa,gBAAEF,EAAF,EAAEA,aAAiBrD,EAAnB,uDACNA,EADM,CAEToD,SAAU,EACVC,aAAcA,EAAe,EAC7BC,SAAS,QAGjBe,MAAO,WACHd,GAAa,SAACe,GAAD,sBACNA,EADM,CAEThB,SAAS,QAGjBiB,KAAM,WACFhB,GAAa,SAACe,GAAD,sBACNA,EADM,CAEThB,SAAS,OAEbW,EAAY7c,QAAQmd,OACpBL,EAAQ9c,QAAQmd,QAEpBjB,cAEJ,IAAMkB,EAAiB5K,iBAAO0J,GAE9BvW,qBAAU,WACFyX,EAAepd,UAAYkc,IACvBA,EACAJ,IAEAC,KAGRqB,EAAepd,QAAUkc,IAC1B,CAACJ,EAASC,EAAQG,IAErBmB,2BAAgB,WACRR,EAAY7c,SACRkc,IACAW,EAAY7c,QAAQid,QACpBH,EAAQ9c,QAAQid,YAI5B,IAAM5J,EAAQuI,EAAUI,GACXsB,EAAgCjK,EAAtCnC,KAAyB0J,EAAavH,EAAnBhL,KACpBkV,EAAS3C,EAAUhe,KAAI,qBAAE6F,SACzByW,EAAO/a,EAAQwe,EAAcA,EAC7Ba,EAAOpf,EAASue,EAAaA,EAC7B1D,EAAYxZ,KAAKU,IAAL,MAAAV,KAAI,YAAQ8d,IACxB1C,EAASvB,aAAY,CACvBC,OAAQ,CAAC,EAAGN,GACZO,MAAO,CAAC,EAAGN,KAET4B,EAAS2C,mBACX,kBACIC,aAAU,CACNnE,OAAQoE,MA1EJ,IA2ECrf,KAAK,GACL1B,KAAI,SAACghB,EAAGvF,GAAJ,OAAYA,KACrBmB,MAAO,CAAC,EAAGgE,GACXK,QAAS,OAEjB,CAhFY,GAgFAL,IAiBZM,EAAUR,EAKVS,EAnBe,CACf,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGmBD,EAAQE,YAIN,KAHfC,OAAOH,EAAQI,WAAWC,SAAS,EAAG,KAGV,IAF3BL,EAAQM,cAInB,OACIzC,EAAU3b,SACN,yBAAK7B,MAAOA,EAAOC,OAAQA,EAAQ7B,UAAU,gBACzC,kBAAC8hB,GAAA,EAAD,CAAOhc,IAAKsa,EAAYza,KAAMya,EAAa1f,IAAKgf,GAC5C,kBAAC,GAAD,CACIrB,UAAWA,EAAUxb,MAAM,EA7G/B,IA8GIyb,OAAQA,EACRC,OAAQA,EACRC,WAAYA,EACZnX,IAAKiZ,IAET,0BAAMlD,WAAW,MAAMW,EAAGpB,EAAOyD,EAAe,GAAIpC,EAAGiD,EAAMjhB,UAAU,uBAClEwhB,GAEL,0BAAMpf,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI0e,EAAMjf,OAAO,UAC5C,kBAAC,GAAD,CAAe0a,UAAWA,EAAWC,KAAMA,EAAMtV,IAAKkZ,SAO1EpB,GAAe4C,aAAe,CAC1BngB,MAAO,IACPC,OAAQ,IACRue,OAAQ,CACJta,IAAK,EACLkc,MAAO,EACPC,OAAQ,EACRtc,KAAM,MAICwZ,UCrLF+C,GAAc,CACvBjP,GAAI,iBACJU,GAAI,oBACJK,GAAI,QACJP,GAAI,QACJjB,GAAI,eACJP,GAAI,MACJM,GAAI,UACJV,GAAI,UACJE,GAAI,mBACJmB,GAAI,YACJL,GAAI,YACJf,GAAI,SACJsB,GAAI,iBACJR,GAAI,cACJc,GAAI,UACJK,GAAI,YACJV,GAAI,UACJS,GAAI,WACJhB,GAAI,SACJd,GAAI,SACJuB,GAAI,YACJC,GAAI,SACJb,GAAI,aACJT,GAAI,YACJiB,GAAI,UACJhB,GAAI,cACJmB,GAAI,gBACJP,GAAI,cACJL,GAAI,sBACJN,GAAI,aACJE,GAAI,yBACJG,GAAI,gBACJb,GAAI,QACJgC,GAAI,oBACJC,GAAI,SACJxB,GAAI,cACJW,GAAI,c,kIC0COmP,OApEf,YAAkD,IAA7BC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,SAClC,OACI,kBAAC,IAAM5K,SAAP,KACI,uBACIzS,KAAK,8CACL2P,IAAI,WACJzD,OAAO,SACPnR,UAAS,qBAAgBoiB,EAAS,GAAK,WAEvC,kBAACG,GAAA,EAAD,CACIviB,UAAU,aACVwiB,UAAW,kBAAC,KAAD,CAAY1K,KAAK,UAC5B7W,MAAO,CACHqc,SAAU,OACVtF,MAAO,QACPyK,gBAAiB,OACjBC,WAAY,OACZpB,QAAS,gBACTqB,cAAe,eATvB,mBAeJ,uBACI1d,KAAK,qCACL2P,IAAI,WACJ5U,UAAS,qBAAgBqiB,EAAU,GAAK,UACxClR,OAAO,UAEP,kBAACoR,GAAA,EAAD,CACIC,UAAW,kBAAC,KAAD,CAAa1K,KAAK,UAC7B7W,MAAO,CACHqc,SAAU,OACVtF,MAAO,mBACPyK,gBAAiB,qBACjBC,WAAY,OACZpB,QAAS,gBACTqB,cAAe,eARvB,4BAcJ,uBACI1d,KAAK,4CACL2P,IAAI,WACJ5U,UAAS,qBAAgBsiB,EAAW,GAAK,UACzCnR,OAAO,UAEP,kBAACoR,GAAA,EAAD,CACIC,UAAW,kBAAC,KAAD,CAAc1K,KAAK,UAC9B7W,MAAO,CACHqc,SAAU,OACVtF,MAAO,QACPyK,gBAAiB,UACjBC,WAAY,OACZpB,QAAS,gBACTqB,cAAe,eARvB,+BClDDC,OARf,WACI,OACI,4BAAQ5iB,UAAU,mDACd,kBAAC,GAAD,CAAYoiB,QAAQ,EAAME,UAAU,EAAMD,SAAS,MCgCzDnW,GAAKpL,OAAOoL,GA2tBH2W,OAxtBf,YAAmB,qBACe9iB,oBAAS,GADzB,mBACP+iB,EADO,KACEC,EADF,OAEUhjB,mBAAS,IAFnB,mBAEDijB,GAFC,aAGoBjjB,mBAAS,CAACgJ,KAAM,GAAID,QAAS,KAHjD,mBAGPma,EAHO,KAGIC,EAHJ,OAIwBnjB,mBAAS,IAJjC,mBAIPojB,EAJO,KAIMC,EAJN,OAKwBrjB,mBAAS,IALjC,mBAKPsjB,EALO,KAKMC,EALN,OAMsCvjB,mBAAS,IAN/C,mBAMPwjB,EANO,KAMaC,EANb,OAOgCzjB,mBAAS,IAPzC,mBAOP0jB,EAPO,KAOUC,EAPV,OAQsB3jB,mBAAS,MAR/B,oBAQP4jB,GARO,MAQKC,GARL,SASoC7jB,mBAAS,IAT7C,qBASP8jB,GATO,MASYC,GATZ,SAUgC/jB,mBAAS,IAVzC,qBAUPgkB,GAVO,MAUUC,GAVV,SAW0CjkB,mBAAS,IAXnD,qBAWPkkB,GAXO,MAWeC,GAXf,SAYsCnkB,mBAAS,IAZ/C,qBAYPokB,GAZO,MAYaC,GAZb,SAagCrkB,mBAAS,IAbzC,qBAaPskB,GAbO,MAaUC,GAbV,SAcsBvkB,mBAAS,IAd/B,qBAcPwkB,GAdO,MAcKC,GAdL,SAe8BzkB,mBAAS,IAfvC,qBAeP0kB,GAfO,MAeSC,GAfT,SAgB0B3kB,mBAAS,IAhBnC,qBAgBP4kB,GAhBO,MAgBOC,GAhBP,MAiBRtP,GAAUuP,cACVC,GAAW7O,mBAlBH,GAmByBlW,mBAAS,IAnBlC,qBAmBPmW,GAnBO,MAmBKC,GAnBL,SAoBwBpW,mBAAS,KApBjC,qBAoBPglB,GApBO,MAoBMC,GApBN,SAqBwBjlB,mBAAS,IArBjC,qBAqBPklB,GArBO,MAqBMC,GArBN,SAsBgBnlB,oBAAS,GAtBzB,qBAsBPolB,GAtBO,MAsBEC,GAtBF,SAuBkBrlB,oBAAS,GAvB3B,qBAuBPoa,GAvBO,MAuBGkL,GAvBH,SAwBoBtlB,mBAAS,IAxB7B,qBAwBPsf,GAxBO,MAwBIiG,GAxBJ,MA0BRla,GAAW,WAA6B,IAA5BC,EAA2B,uDAAnB,GAAIX,EAAe,uDAAP,GAClC,MAAO,CACH,CACI9C,KAAM,YACN1B,MAAOmF,EAAMnC,UACbP,MAAO+B,EAAMxB,UACbX,WAAY,OAEhB,CACIX,KAAM,SACN1B,MAAOmF,EAAML,OACbrC,MAAO+B,EAAMM,OACbzC,WAAY,UAEhB,CACIX,KAAM,YACN1B,MAAOmF,EAAMJ,UACbtC,MAAO+B,EAAMO,UACb1C,WAAY,SAEhB,CACIX,KAAM,OACN1B,MAAOmF,EAAMH,KACbvC,MAAO+B,EAAMQ,KACb3C,WAAY,UAlDV,GAuD0BxI,mBAASqL,MAvDnC,qBAuDPma,GAvDO,MAuDOC,GAvDP,SAwDoBzlB,mBAAS,IAxD7B,qBAwDP0lB,GAxDO,MAwDIC,GAxDJ,eAgECC,GAhED,iFAgEd,WAAyBC,GAAzB,SAAA9b,EAAA,+EACWyD,IACJC,IAAIoY,GACJtgB,KAFI,+BAAAwE,EAAA,MAEC,WAAe+b,GAAf,SAAA/b,EAAA,+EACK+b,GADL,2CAFD,uDAKJtgB,OAAM,SAASC,GACZ,MAAO,CAAEsgB,SAAS,EAAOha,KAAM,UAPzC,4CAhEc,sBA0Dd1C,qBAAU,YACU,IAAZ0Z,GACAiD,OAEL,CAACjD,IAaJ,IAAMiD,GAAO,uCAAG,2HAAAjc,EAAA,sEAGJkc,EAAO,CACP,+CACA,4CACA,qBACA,sBACA,6BACA,yEACA,2CAVI,SAuBE3Y,QAAQC,IAAI0Y,EAAK3lB,IAAIslB,KAvBvB,OAuDR,IAAS7a,KAvDD,4BAcGmb,EAdH,KAcHna,KAdG,OAgBAA,KAAcoa,EAhBd,EAgBOC,MAA4BC,EAhBnC,EAgB4B3a,MAEzBkY,EAlBH,KAkBH7X,KACMua,EAnBH,KAmBHva,KACMwa,EApBH,KAoBHxa,KACMya,EArBH,KAqBHza,KACM4M,EAtBH,KAsBH5M,KAGAya,IACDA,EAAO,CACHC,UAAW,CACPrM,SAAS,IAEboM,KAAM,CACFpM,SAAU,MAKtBiL,IAAW,GACXpC,EAAQiD,GACRf,GAAe,CAACiB,MAAOD,EAAcza,MAAO2a,IAC5Cf,GAAYkB,GAKJrS,EAAYhI,GAAGiI,UAAU,qBACzBsS,EAAcvS,EAAU+R,EAAQQ,aAEpCzB,GAAe,GAAD,OACPxhB,EAAe,IAAI8W,KAAQmM,GADpB,cACsCva,GAAGmI,WAAW,kBAAdnI,CAC5C,IAAIoO,KAAKmM,MAMCR,EAAQS,OACtBT,EAAQS,OAAOC,eAAe7b,IAC1B4N,EAAMgO,OAAO5b,KACT8b,EAAmBlO,EAAMgO,OAAO5b,GACpCmb,EAAQS,OAAO5b,GAAWyJ,aAAeqS,EAAiBA,EAAiB7P,OAAS,IAK5FvC,EAAkBtI,GAAG2a,IAAIC,OAAO9F,OAAOrP,IAEvC0R,EAAc/O,EAAwB2R,EAAQc,kBAAmBvS,EAAiB,SACtF8O,EAAeD,GACfG,EAAsB,eAAIH,IAE1BmC,GAAgBpa,GAAS6a,EAASA,EAAQvb,QAEtCyY,EAAc,CACdja,UAAW+c,EAAQ/c,UACnB8B,OAAQib,EAAQjb,OAChBC,UAAWgb,EAAQhb,UACnBC,KAAM+a,EAAQ/a,KACdtD,KAAM,QACN8C,MAAOub,EAAQvb,OAEnB0Y,EAAeD,GAEXF,EAAY6D,OAAO9F,OAAOiF,EAAQS,QACtChB,GAAazC,GAGT+D,EAAI,GACR/D,EAAU7V,SAAQ,SAAC3B,GACfub,EAAEvb,EAAM7D,MAAQ6D,KAEpBiY,EAAmBsD,GAEnB9D,EAAa,CACTna,KAAMka,EACNna,QAAS,CACL,CAAClB,KAAM,WAAYwC,SAAU,QAC7B,CACIxC,KAAMnD,EAAmB,QAAU,YACnC2F,SAAU,YACV7B,WAAY,OAEhB,CACIX,KAAMnD,EAAmB,OAAS,SAClC2F,SAAU,SACV7B,WAAY,UAEhB,CACIX,KAAMnD,EAAmB,QAAU,YACnC2F,SAAU,YACV7B,WAAY,SAEhB,CACIX,KAAM,OACNwC,SAAU,OACV7B,WAAY,WAMxBqb,GAAcD,IAIV+C,EAASI,OAAO9F,OAAOiF,EAAQS,QAAQ1d,QACvC,SAACyC,GAAD,OAAWA,EAAMvC,UAAY,IAA0B,OAApBuC,EAAMX,cAItCsC,SAAQ,SAAC3B,GACZA,EAAMwb,oBAAsBnkB,EAAe2I,EAAMP,MAAQO,EAAMR,UAAYQ,EAAMP,MAAS,IAAK,GAC/FO,EAAMyb,iBAAmBpkB,EAAe2I,EAAMP,KAAOO,EAAMvC,UAAa,IAAK,GAC7EuC,EAAM0b,oBAAsBrkB,EAAe2I,EAAMR,UAAYQ,EAAMvC,UAAa,IAAK,MAMzFwd,EAAO7c,MAAK,SAAUC,EAAGC,GACrB,OAAOmC,GAAGjC,WAAWH,EAAEZ,UAAWa,EAAEb,cAIpCke,EAAiB/R,EAAWqR,EAAQ,OADpCW,EAAiB,CAAC,YAAa,YAAa,SAE5CC,EAAkBljB,EAAMiiB,GAE5Be,EAAeha,SAAQ,SAACsI,EAAQnV,GAC5B+mB,EAAgB3Y,WAAWC,UAAUrO,GAAK,CAACuL,KAAM4J,EAAQuB,WAAYxU,EAAa4kB,EAAe9mB,QAErGujB,GAAqBwD,GAKjBZ,EAAO7c,MAAK,SAAUC,EAAGC,GACrB,OAAOmC,GAAGjC,WAAWH,EAAEmd,oBAAqBld,EAAEkd,wBAI9CM,EAAkB,CAAC,YAAa,YAAa,OAAQ,eACrDC,EAAqBnS,EAAWqR,EAAQ,OAFpB,CAAC,YAAa,YAAa,OAAQ,yBAGvD3C,EAAkB3f,EAAMiiB,IAEZlP,OAAOpS,MAAMM,KAAO,kCACpC0e,EAAgB5M,OAAOsQ,SAAW,CAACpiB,KAAM,+CAAgD+R,MAAM,GAC/F2M,EAAgBpU,MAAMC,KAAKC,YAAY6X,IAAIC,SAAU,EACrD5D,EAAgBpU,MAAMiB,KAAKuH,MAAM,GAAG1D,MAAMpP,KAAO,QAEjDmiB,EAAmBpa,SAAQ,SAACsI,EAAQnV,GAChC,IAAIoV,EAAI,CACJ7J,KAAM4J,EACNuB,WAAYxU,EAAa8kB,EAAgBhnB,KAEzCA,IAAMinB,EAAmBzQ,OAAS,IAClCpB,EAAE0C,KAAO,OACT1C,EAAEiS,iBAAmB,CAAC,EAAG,GACzBjS,EAAEqC,MAAQ,oBAEd+L,EAAgBpV,WAAWC,UAAUrO,GAAKoV,KAE9CqO,GAAmBD,GAMnB2C,EAAO7c,MAAK,SAAUC,EAAGC,GACrB,OAAOmC,GAAGjC,WAAWH,EAAEod,iBAAkBnd,EAAEmd,qBAI3CK,EAAkB,CAAC,YAAa,YAAa,OAAQ,cACrDC,EAAqBnS,EAAWqR,EAAQ,OAFpB,CAAC,YAAa,YAAa,OAAQ,sBAGvD3C,EAAkB3f,EAAMiiB,IAEZlP,OAAOpS,MAAMM,KAAO,iCACpC0e,EAAgB5M,OAAOsQ,SAAW,CAACpiB,KAAM,+CAAgD+R,MAAM,GAC/F2M,EAAgBpU,MAAMC,KAAKC,YAAY6X,IAAIC,SAAU,EACrD5D,EAAgBpU,MAAMiB,KAAKuH,MAAM,GAAG1D,MAAMpP,KAAO,QAEjDmiB,EAAmBpa,SAAQ,SAACsI,EAAQnV,GAChC,IAAIoV,EAAI,CACJ7J,KAAM4J,EACNuB,WAAYxU,EAAa8kB,EAAgBhnB,KAEzCA,IAAMinB,EAAmBzQ,OAAS,IAClCpB,EAAE0C,KAAO,OACT1C,EAAEiS,iBAAmB,CAAC,EAAG,GACzBjS,EAAEqC,MAAQ,oBAEd+L,EAAgBpV,WAAWC,UAAUrO,GAAKoV,KAE9CuO,GAAwBH,GAMxB2C,EAAO7c,MAAK,SAAUC,EAAGC,GACrB,OAAOmC,GAAGjC,WAAWH,EAAEqd,oBAAqBpd,EAAEod,wBAI9CU,EAAmB,CAAC,YAAa,YAAa,OAAQ,iBACtDC,EAAqBzS,EAAWqR,EAAQ,OAFnB,CAAC,YAAa,YAAa,OAAQ,yBAGxDvC,EAAqB/f,EAAMiiB,IAEZlP,OAAOpS,MAAMM,KAAO,mCACvC8e,EAAmBhN,OAAOsQ,SAAW,CAACpiB,KAAM,oCAAqC+R,MAAM,GACvF+M,EAAmBxU,MAAMC,KAAKC,YAAY6X,IAAIC,SAAU,EACxDxD,EAAmBxU,MAAMiB,KAAKuH,MAAM,GAAG1D,MAAMpP,KAAO,QAEpDyiB,EAAmB1a,SAAQ,SAACsI,EAAQnV,GAChC,IAAIoV,EAAI,CACJ7J,KAAM4J,EACNuB,WAAYxU,EAAaolB,EAAiBtnB,KAE1CA,IAAMunB,EAAmB/Q,OAAS,IAClCpB,EAAE0C,KAAO,OACT1C,EAAEiS,iBAAmB,CAAC,EAAG,GACzBjS,EAAEqC,MAAQ,WAEdmM,EAAmBxV,WAAWC,UAAUrO,GAAKoV,KAEjDyO,GAAsBD,GAItBuC,EAAO7c,MAAK,SAAUC,EAAGC,GACrB,OAAOmC,GAAGjC,WAAWH,EAAEZ,UAAWa,EAAEb,cAGpCgL,EAAYhI,GAAGiI,UAAU,aACzB4T,GAAS,IAAIzN,KAAK,KAAM,EAAG,IAE3BxO,GAAO4a,EAAO7jB,MAAM,EAAG,IAAIxC,KAAI,SAACoL,GAChC,IAIIK,EAAOuJ,EAJG+Q,EAAa3a,EAAMX,WAAW9B,QAAO,SAACC,GAChD,OAAOiL,EAAUjL,EAAI0L,MAAQoT,MAGF,OAAQ,CAAC,cAAc,GAAM,GAE5D,MAAO,CACH9Q,WAAYxL,EAAM7D,KAClByQ,KAAM,OACNvM,KAAMA,OAGVkc,GAAkB5jB,EAAMuf,IACZ9U,OAAO3B,OAAS+R,GAChC+I,GAAgB7Q,OAAOpS,MAAMM,KAAO,kCACpCyG,GAAKsB,SAAQ,SAACuI,EAAGpV,GACbynB,GAAgBrZ,WAAWC,UAAUrO,GAAKoV,KAE9C6O,GAAcwD,IAIdtB,EAAO7c,MAAK,SAAUC,EAAGC,GACrB,OAAOmC,GAAGjC,WAAWH,EAAEZ,UAAWa,EAAEb,cAGpC4C,GAAO4a,EAAO7jB,MAAM,EAAG,IAAIxC,KAAI,SAACoL,GAChC,IAAIK,EAAOuJ,EAAW+Q,EAAa3a,EAAMX,WAAY,SAAU,CAAC,cAAc,GAAM,GACpF,MAAO,CACHmM,WAAYxL,EAAM7D,KAClByQ,KAAM,OACNvM,KAAMA,OAIVmc,GAAqB7jB,EAAMuf,IACZ9U,OAAO3B,OAAS+R,GACnCnT,GAAKsB,SAAQ,SAACuI,EAAGpV,GACb0nB,GAAmBtZ,WAAWC,UAAUrO,GAAKoV,KAEjDsS,GAAmBtY,MAAMiB,KAAKsG,MAAMgR,UAAY,GAChDD,GAAmBtY,MAAMiB,KAAKsG,MAAMiR,UAAY,EAChDF,GAAmBtY,MAAMiB,KAAKsG,MAAMzC,MAAQ,CACxCpP,KAAM,wCAEV4iB,GAAmBtY,MAAMiB,KAAKsG,MAAMkR,UAAUC,UAAY,aAC1DJ,GAAmBtX,SAAS7H,QAAQ,GAAK,CACrCwf,SAAU,UACVC,WAAY,MACZC,UAAW,EACXC,QAAS,CACLC,WAAY,CACRC,OAAQ,UAIpBV,GAAmBtY,MAAMiB,KAAKuH,MAAM,GAAGC,UAAY,MACnD6P,GAAmBpZ,OAAO3B,OAAS+R,GACnCgJ,GAAmB9Q,OAAOpS,MAAMM,KAAO,yBACvC4iB,GAAmB9Q,OAAOsQ,SAAW,CAACpiB,KAAM,gBAAiB+R,MAAM,GAEnEkN,GAAmB2D,IAIfW,GAAkBvT,EAAWyR,OAAO9F,OAAOiF,EAAQS,QAAS,OAAQ,CAAC,eACrEmC,GAAiBzkB,EAAMiiB,IAEZlP,OAAOpS,MAAMM,KAAO,wCACnCwjB,GAAelZ,MAAMiB,KAAKuH,MAAM,GAAG1D,MAAMpP,KAAO,QAChDwjB,GAAela,WAAWC,UAAU,GAAK,CACrCyJ,KAAM,YACNvM,KAAM8c,GACN3R,WAAY,aAEhB4R,GAAeha,OAAO3B,OAAS,CAAC,WAChC2b,GAAeha,OAAO6B,SAAU,EAChCmY,GAAelZ,MAAMC,KAAKC,YAAYiZ,UAAY,CAC9CC,QAAS,OACTC,QAAS,MACTC,sBAAuB,CACnBC,eAAgB,WAGxBxE,GAAkBmE,IAIlBvC,EAAiB3X,WAAWC,UAAU,GAAK,CACvCyJ,KAAM,MACNvM,KAAM,CACF,CAAC,SAAUma,EAAQjb,QACnB,CAAC,YAAaib,EAAQhb,WACtB,CAAC,OAAQgb,EAAQ/a,QAGzB0Z,GAAgB0B,GAKhBQ,OAAOqC,QAAQ/C,GAAchZ,SAAQ,YAAmB,IAAD,mBAAhB1M,EAAgB,KAAXwF,EAAW,KAC/C8I,EAAO,EACX9I,EAAMkH,SAAQ,SAACgc,GACXA,EAAMxhB,KAAOsa,GAAYxhB,GACzB0oB,EAAMljB,MAAQkjB,EAAMlgB,UAAY8F,EAChCA,EAAOoa,EAAMljB,aAIjBoH,GAAMwZ,OAAO9F,OAAOoF,GACnBiD,OACArgB,QAAO,SAACiE,GAAD,YAAkB/H,IAAX+H,EAAErF,SAEjBiC,MAAK,SAAUC,EAAGC,GAClB,OAAOmC,GAAGvC,UAAU,IAAI2Q,KAAKxQ,EAAE6K,MAAO,IAAI2F,KAAKvQ,EAAE4K,UAErDrH,GAAMA,GAAIzK,MAAM,GAAIyK,GAAIyJ,QAClBsI,GAAYvE,GAAcxN,GAAK,GACrCgY,GAAajG,IAIjB0D,GAAW,GA3XH,qDA6XR1U,QAAQC,IAAR,MA7XQ,4DAAH,qDAiYb,SAASgb,GAAYla,GAEjB,IAAI3D,EAAQgY,EAAgBrU,EAAMxH,MAC9B4M,EAAkB7C,EAAWlG,EAAMX,WACnCuY,EAAc/O,EAAwB7I,EAAM8I,aAAcC,EAAiB/I,EAAM7D,MACrF0b,EAAeD,GAGnB,SAASkG,GAAcjgB,EAAvB,GAAwC,IAAT8F,EAAQ,EAARA,MACvBtE,EAAYmY,EAAUla,KAAKygB,MAAK,SAACvgB,GAAD,OAASA,EAAIrB,OAASwH,EAAM,MAAItE,UACpEwK,GAAQnH,KAAK,UAAYrD,GAG7B,IAAIkE,GAAO,KACX,SAASC,GAAY3F,EAAOwC,EAAM2d,GAG9B,IAAIC,EAAQxd,GAAGwd,MAAMD,EAAYla,UAAUoa,QACvCC,EAAUH,EAAYI,IAAIC,MAAMC,WAAWC,OAAON,GAClDta,EAAQqa,EAAYQ,yBAAyB,GAAGC,SAASN,EAASF,EAAO,GAE7E,GAAI5d,EAAKsD,MAAM,KAAOJ,IAAQI,EAC1B,OAAOma,GAAcjgB,EAAOwC,GAGhCkD,GAAOlD,EAAKsD,MAAM,GAClBtO,OAAOoL,GAAG5C,MAAMmG,cAAe,EAQnC,SAAS0a,GAAcxa,EAAO/H,GAC1BsO,GAAWtO,GAAQ+H,EACnBwG,GAAiBD,IAGrB,SAASkU,KACL,OACI,kBAAC,IAAM1S,SAAP,KACI,yBAAK1X,UAAU,6DAA6DiB,MAAOJ,EAAe,IAC9F,wBAAIb,UAAU,4BAAd,kCACA,wBAAIA,UAAU,gBvB7ZCkF,IAAxBpE,OAAOupB,auB8ZyB,iBAAmB,cAD1C,qCAIJ,yBAAKrqB,UAAU,oCAAoCiB,MAAOJ,EAAe,IACrE,yBAAKb,UAAU,6CACX,yBAAKA,UAAU,gBAAf,UACW,0BAAMA,UAAU,aAAaqjB,EAAY5O,QAEpD,yBAAKzU,UAAU,qBAAqBqjB,EAAYlY,QAC/CkY,EAAY1O,MAEjB,yBAAK3U,UAAU,wDACX,yBAAKA,UAAU,gBAAf,aACe,IACX,uBAAG4U,IAAI,WAAWzD,OAAO,SAASnR,UAAU,cAAciF,KAAMgP,GAAhE,SAIJ,yBAAKjU,UAAU,qBAAqBqjB,EAAYtO,YAChD,yBAAK/U,UAAU,qBAAqBqjB,EAAYrO,iBAAhD,6BAIR,yBAAKhV,UAAU,UAAUiB,MAAOJ,EAAe,IAC3C,kBAAC,EAAD,CACI6K,aAAcyX,EACd1W,aAAcgZ,GACd3a,UAAW,MACX4B,OAAQ,OACRZ,KAAMmX,EACNzb,MAAO,CAAC,YAAa,SAAU,YAAa,QAC5CE,SAAU4hB,GACVpa,cAAeqa,GACfta,YAAaA,MAIrB,yBAAKjP,UAAU,sBAAsBiB,MAAOJ,EAAe,IACtDiiB,GAAW,kBAAC,EAAD,CAAO/Z,KAAMka,EAAUla,KAAMD,QAASma,EAAUna,QAAS8B,MAAM,MAS3F,IAAI0f,GAAaxD,OAAO9F,OAAOkB,IACzBqI,GAAW3e,IAAMqK,SAUjB0J,KAAU4K,GAAS9mB,SAAU8mB,GAAS9mB,QAAQkc,QAnjBtC,GAojBW5f,qBApjBX,qBAojBJyqB,IApjBI,aAqjBVpL,GAAYnJ,iBAAO,MAEvB,OACI,kBAAC,IAAMyB,SAAP,KACI,kBAAC+S,GAAA,EAAD,KACI,mFACA,0BAAM7iB,KAAK,QAAQ8iB,QAAQ,8DAC3B,0BACI9iB,KAAK,cACL8iB,QAAO,iKAGf,yBAAK1qB,UAAU,aACVmlB,IACG,yBACInlB,UAAU,8DACViB,MAAO,CAAC0E,KAAM,EAAGG,IAAK,IAEtB,yBAAK9F,UAAU,mBAGtB8iB,GACG,yBAAK9iB,UAAU,0BACX,yBAAKA,UAAU,iCACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,oDACX,kBAAC,GAAD,CAAYoiB,QAAQ,KAExB,yBAAKpiB,UAAU,iEACX,yBAAKA,UAAU,QACX,kBAACuiB,GAAA,EAAD,CACI9Z,QAAS7D,EACToT,MAAM,UACNhY,UAAU,aACV2qB,QAAS,kBAAC,KAAD,OAJb,UASJ,yBAAK3qB,UAAU,2BACX,wBAAIA,UAAU,IAAd,gBACA,wBAAI4qB,GAAG,cAAc5qB,UAAU,cAC1B+kB,MAKb,yBAAK/kB,UAAU,sBAAsBiB,MAAOJ,EAAe,IACvD,kBAAC,EAAD,CAAawG,IAAKyd,GAAUtd,MAAO+d,GAAcje,MAAO,OAG5D,yBAAKtH,UAAU,6BAA6BiB,MAAOJ,EAAe,IAC9D,kBAAC,GAAD,CAAYmV,UAAW2N,GAAYrO,QAAS2P,GAAYkB,SAG3DxhB,GAAoBylB,KAErB,yBAAKpqB,UAAU,+CAA+CiB,MAAOJ,EAAe,IAChF,kBAAC,EAAD,CAAOqU,WAAYqP,GAAY3c,KAAK,cAAcF,SAAUyiB,MAGhE,yBAAKnqB,UAAU,+CAA+CiB,MAAOJ,EAAe,IAChF,kBAAC,EAAD,CAAOqU,WAAYmP,GAAiBzc,KAAK,SAASF,SAAUyiB,MAGhE,yBACInqB,UAAU,mDACViB,MAAOJ,EAAe,IAEtB,kBAAC,EAAD,CAAOqU,WAAYyP,GAAc/c,KAAK,UAAUF,SAAUyiB,MAG9D,yBAAKnqB,UAAU,+CAA+CiB,MAAOJ,EAAe,IAChF,kBAAC,EAAD,CAAOqU,WAAYuP,GAAgB7c,KAAK,YAAYF,SAAUyiB,MAGlE,yBAAKnqB,UAAU,6BAA6BiB,MAAOJ,EAAe,IAC9D,wBAAIb,UAAU,aAAd,uDACA,wBAAIA,UAAU,uDAAd,8CAGA,yBAAKA,UAAU,WAAWqH,IAAK+X,IAC3B,kBAAC,GAAD,CACIC,UAAWA,GACXE,QAAS,kBAAMiL,IAAY,IAC3BhL,OAAQ,kBAAMgL,IAAY,IAC1BnjB,IAAKkjB,GACLnL,UAAWA,GACXE,WAAYgL,MAGpB,yBAAKrpB,MAAO,CAAC4pB,WAAY,KAAM7qB,UAAU,QACrC,kBAAC8qB,GAAA,EAAD,CAAYC,aAAW,SAASjT,KAAK,QAAQrP,QAvG5D,WACjB8hB,GAAS9mB,QAAQ+c,WAuGmB,kBAAC,KAAD,OAEJ,kBAACsK,GAAA,EAAD,CAAYriB,QAASkX,GApGtC,WACf4K,GAAS9mB,QAAQmd,QAJD,WAChB2J,GAAS9mB,QAAQid,SAsGwE5I,KAAK,SACzD6H,GAAU,kBAAC,KAAD,MAAgB,kBAAC,KAAD,SAKvC,yBAAK3f,UAAU,iBAAiBiB,MAAOJ,EAAe,IAClD,kBAAC,GAAD,CACIyU,QAAS2P,GAAYkB,MACrBzN,MAAO6K,EACP9K,OAAM,eAAM0K,OAIxB,yBAAKnjB,UAAU,4BACT2E,GAAoBylB,KAEtB,yBAAKpqB,UAAU,+CAA+CiB,MAAOJ,EAAe,IAChF,kBAAC,EAAD,CAAOqU,WAAY2O,GAAmBjc,KAAK,UAAUF,SAAUyiB,MAGnE,yBACInqB,UAAU,+CACViB,MAAOJ,EAAe,KAEtB,kBAAC,EAAD,CACIqU,WAAYiP,GACZvc,KAAK,iBACLF,SAAUyiB,MAIlB,yBAAKnqB,UAAU,+CAA+CiB,MAAOJ,EAAe,IAChF,kBAAC,EAAD,CACIqU,WAAY+O,GACZrc,KAAK,iBACLF,SAAUyiB,MAIlB,yBACInqB,UAAU,+CACViB,MAAOJ,EAAe,KAEtB,kBAAC,EAAD,CAAOqU,WAAY6O,GAAiBnc,KAAK,cAAcF,SAAUyiB,OAGzE,yBAAKnqB,UAAU,gCACX,wBAAIA,UAAU,0EAAd,iBAGA,kBAAC,GAAD,CAAUma,SAAUA,GAASqM,UAAUrM,YAE3C,yBAAKna,UAAU,gCACX,wBAAIA,UAAU,0EAAd,YAGA,kBAAC,GAAD,CAAUma,SAAUA,GAASoM,KAAKpM,aAG1C,kBAAC,GAAD,UCjqBT6Q,OA/Ef,YAAuB,qBACWjrB,oBAAS,GADrB,mBACX+iB,EADW,KACFC,EADE,OAEgBhjB,oBAAS,GAFzB,mBAEXkrB,EAFW,KAEAC,EAFA,KAIlB9hB,qBAAU,YACU,IAAZ0Z,GACAqI,MAEL,CAACrI,IAEJ,IAAMqI,EAAY,uCAAG,gCAAArhB,EAAA,+EAEqBuD,QAAQC,IAAI,CAACC,IAAMC,IAAI,yBAF5C,mCAECyd,EAFD,KAELnf,KACRof,EAAaD,GACblI,GAAW,GAJE,kDAMb1U,QAAQC,IAAR,MANa,0DAAH,qDA2BlB,OACI,kBAAC,IAAMoJ,SAAP,KACI,kBAAC+S,GAAA,EAAD,KACI,uFACA,0BAAM7iB,KAAK,QAAQ8iB,QAAQ,0DAE/B,yBAAK1qB,UAAW,iBAAkB4qB,GAAG,cAChC9D,OAAOtR,KAAKyV,GAAW5qB,KAAI,SAACK,EAAKH,GAC9B,OACI,yBAAKG,IAAKH,GACN,yBAAKP,UAAU,+EACX,0BAAMA,UAAU,QAAQU,IAE5B,yBAAKV,UAAW,wBACXirB,EAAUvqB,GAAKL,KAAI,SAAC+qB,EAAU9gB,GAC3B,OACI,yBACI5J,IAAG,UAAK4D,KAAKE,UAAU4mB,IACvBprB,UACI,kFAEJiB,MAAO,CAACJ,eAAgB,GAAKyJ,EAAI,OAEjC,yBAAKtK,UAAU,aAAaorB,EAASxjB,MACrC,uBACI5H,UAAU,+BACViF,MArCpBiB,EAqCyCklB,EAASroB,OArC3CsV,EAqCmD+S,EAAS/S,KApC1E,UAATA,EACM,OAAN,OAAcnS,GACE,aAATmS,EACD,yBAAN,OAAgCnS,GAChB,UAATmS,EACD,UAAN,OAAiBA,GAEdnS,IA+BkCklB,EAASroB,SAvC/B,IAACmD,EAAOmS,aChB7BnM,GAAKpL,OAAOoL,GAmZHmf,OAjZf,YAAoB,qBACctrB,oBAAS,GADxB,mBACR+iB,EADQ,KACCC,EADD,OAEmBhjB,mBAAS,CAACgJ,KAAM,GAAID,QAAS,KAFhD,mBAERma,EAFQ,KAEGC,EAFH,OAGuBnjB,mBAAS,IAHhC,mBAGRojB,EAHQ,KAGKC,EAHL,OAIuBrjB,mBAAS,IAJhC,mBAIRsjB,EAJQ,KAIKC,EAJL,OAKevjB,oBAAS,GALxB,mBAKRolB,EALQ,KAKCC,EALD,KAMTN,EAAW7O,mBAEVnL,EAAawgB,cAAbxgB,UACDwK,EAAUuP,cAEV0G,EAAYrJ,GAAYpX,GACxB0gB,EAAa1E,OAAOtR,KAAK0M,IAQzB9W,EAAW,WAA6B,IAA5BC,EAA2B,uDAAnB,GAAIX,EAAe,uDAAP,GAClC,MAAO,CACH,CACI9C,KAAM,YACN1B,MAAOmF,EAAMnC,UACbP,MAAO+B,EAAMxB,UACbX,WAAY,OAEhB,CACIX,KAAM,SACN1B,MAAOmF,EAAML,OACbrC,MAAO+B,EAAMM,OACbzC,WAAY,UAEhB,CACIX,KAAM,YACN1B,MAAOmF,EAAMJ,UACbtC,MAAO+B,EAAMO,UACb1C,WAAY,SAEhB,CACIX,KAAM,OACN1B,MAAOmF,EAAMH,KACbvC,MAAO+B,EAAMQ,KACb3C,WAAY,UA5CT,EAiDyBxI,mBAASqL,KAjDlC,mBAiDRma,EAjDQ,KAiDMC,EAjDN,OAkDyBzlB,mBAAS,IAlDlC,oBAkDR0rB,GAlDQ,MAkDMC,GAlDN,SAmDqB3rB,mBAAS,MAnD9B,qBAmDR4jB,GAnDQ,MAmDIC,GAnDJ,SAoD6B7jB,mBAAS,MApDtC,qBAoDR0kB,GApDQ,MAoDQC,GApDR,SAqDuB3kB,mBAAS,MArDhC,qBAqDRklB,GArDQ,MAqDKC,GArDL,SAsDwBnlB,mBAAS,IAtDjC,qBAsDRmW,GAtDQ,MAsDIC,GAtDJ,SAuDyBpW,mBAAS,IAvDlC,qBAuDR4kB,GAvDQ,MAuDMC,GAvDN,SAwDuB7kB,qBAxDvB,qBAwDR0mB,GAxDQ,MAwDKkF,GAxDL,SAyDW5rB,qBAzDX,qBAyDR4M,GAzDQ,YA2DfvD,qBAAU,WACN2Z,GAAW,GACXgD,OACD,CAACjb,IAEJ,IAAMib,GAAO,uCAAG,oFAAAjc,EAAA,+EAaEuD,QAAQC,IAAI,CAClBC,IAAMC,IAAI,iDACVD,IAAMC,IAAI,gDACVD,IAAMC,IAAI,6CAEVD,IAAMC,IAAI,sBACVD,IAAMC,IAAI,8BACVD,IAAMC,IAAI,2CACVD,IAAMC,IAAI,yBArBN,mCAGGoe,EAHH,KAGH9f,KACM+f,EAJH,KAIH/f,KAEiBwJ,EANd,KAMAxJ,KAAOL,MAGJkY,EATH,KASH7X,KACMwa,EAVH,KAUHxa,KACM4M,EAXH,KAWH5M,KACMua,EAZH,KAYHva,KAaLsZ,GAAW,GAEP0G,EAAeF,EAAc9gB,GAC7BihB,EAAYF,EAAWnF,OAAO5b,GAC9B8b,EAAmBlO,EAAMgO,OAAO5b,GAChCyJ,EAAewX,EAAUxX,aAEzBqS,IACArS,EAAeqS,EAAiBA,EAAiB7P,OAAS,IAG1DiV,EAAmBra,EAAW7G,GAE9BsJ,EAAalI,GAAGmI,WAAW,sBAC3BH,EAAYhI,GAAGiI,UAAU,qBACzBsS,EAAcvS,EAAU6X,EAAUtF,aACtCkF,GAAe,GAAD,OAAInoB,EAAe,IAAI8W,KAAQmM,GAA/B,cAAiDrS,EAAW,IAAIkG,KAAKmM,MAE/EpD,EAAc/O,EAAwBC,EAAcyX,EAAkBF,EAAargB,OACvF6X,EAAeD,GAGfyI,EAAaG,UAAU7e,SAAQ,SAACzC,GAAc,IACrCD,EAASC,EAATD,MACDA,IACAA,EAAMxB,UAAYhG,KAAKU,IAAI,EAAG8G,EAAMxB,WACpCwB,EAAMO,UAAY/H,KAAKU,IAAI,EAAG8G,EAAMO,WACpCP,EAAMQ,KAAOhI,KAAKU,IAAI,EAAG8G,EAAMQ,MAC/BR,EAAMM,OAASN,EAAMxB,UAAYwB,EAAMO,UAAYP,EAAMQ,SAMzD+gB,EAAYH,EAAaG,UAAUjjB,QAAO,SAACiE,GAAD,MAAsB,YAAfA,EAAEtC,YACnDuhB,EAAsBhgB,GAAG2a,IAAIoF,GAAW,SAACthB,GAAD,OAAcA,EAASzB,aAC/DijB,EAAsBjgB,GAAG2a,IAAIoF,GAAW,SAACthB,GAAD,OAAcA,EAASM,aAC/DmhB,EAAmBlgB,GAAG2a,IAAIoF,GAAW,SAACthB,GAAD,OAAcA,EAASO,SAE5DmhB,EAAW,CACX1hB,SAAU,UACVzB,UAAW6iB,EAAU7iB,UAAYgjB,EACjCjhB,UAAW8gB,EAAU9gB,UAAYkhB,EACjCjhB,KAAM6gB,EAAU7gB,KAAOkhB,IAElBphB,OAASqhB,EAASnjB,UAAYmjB,EAASphB,UAAYohB,EAASnhB,MACjEmhB,EAASnjB,WAAamjB,EAASphB,WAAaohB,EAASnhB,OACrD+gB,EAAU9d,KAAKke,GAEnBP,EAAaG,UAAYA,GAIpBvhB,EAASqhB,EAATrhB,SAEDA,EAAMxB,UAAYhG,KAAKU,IAAI,EAAG8G,EAAMxB,WACpCwB,EAAMO,UAAY/H,KAAKU,IAAI,EAAG8G,EAAMO,WACpCP,EAAMQ,KAAOhI,KAAKU,IAAI,EAAG8G,EAAMQ,MAC/BR,EAAMM,OAASN,EAAMxB,UAAYwB,EAAMO,UAAYP,EAAMQ,MAIjEsa,EAAgBpa,EAAS2gB,EAAWA,EAAUrhB,QAC9CghB,GAAgBI,EAAaG,WAEzB9I,EAAc,CACdja,UAAW6iB,EAAU7iB,UACrB8B,OAAQ+gB,EAAU/gB,OAClBC,UAAW8gB,EAAU9gB,UACrBC,KAAM6gB,EAAU7gB,KAChBtD,KAAMmkB,EAAUnkB,KAChB8C,MAAOqhB,EAAUrhB,OAErB0Y,EAAeD,GAEfD,EAAa,CACTna,KAAM+iB,EAAaG,UACnBnjB,QAAS,CACL,CAAClB,KAAM,WAAYwC,SAAU,YAC7B,CACIxC,KAAMnD,EAAmB,QAAU,YACnC2F,SAAU,YACV7B,WAAY,OAEhB,CACIX,KAAMnD,EAAmB,OAAS,SAClC2F,SAAU,SACV7B,WAAY,UAEhB,CACIX,KAAMnD,EAAmB,QAAU,YACnC2F,SAAU,YACV7B,WAAY,SAEhB,CACIX,KAAM,OACNwC,SAAU,OACV7B,WAAY,WAKxBqb,GAAcD,GACVrO,EAAQxK,IACRoa,GAAe5P,EAAQxK,IAIvBwb,EAAiB3X,WAAWC,UAAU,GAAK,CACvCyJ,KAAM,MACNvM,KACIigB,EAAU7iB,UAAY,EAChB,CACI,CAAC,SAAU6iB,EAAU/gB,QACrB,CAAC,YAAa+gB,EAAU9gB,WACxB,CAAC,OAAQ8gB,EAAU7gB,OAEvB,IAEd0Z,GAAgB0B,IAIZ2F,EAAYH,EAAaG,UAAUjjB,QAAO,SAAC2B,GAAD,OAAcA,EAASzB,UAAY,MAEnE6N,OAAS,IACfuV,EAAKL,EAAUjjB,QAAO,SAACiE,GAAD,MAAsB,YAAfA,EAAEtC,YAC/Bie,EAAkBvT,EAAWyR,OAAO9F,OAAOsL,GAAK,WAAY,CAAC,eAC7DzD,EAAiBzkB,EAAMiiB,IAEZlP,OAAOpS,MAAMM,KAAO,mCACnCwjB,EAAelZ,MAAMiB,KAAKuH,MAAM,GAAG1D,MAAMpP,KAAO,QAChDwjB,EAAela,WAAWC,UAAU,GAAK,CACrCyJ,KAAM,YACNvM,KAAM8c,EACN3R,WAAY,aAEhB4R,EAAeha,OAAO3B,OAAS,CAAC,WAChC2b,EAAeha,OAAO6B,SAAU,EAChCmY,EAAelZ,MAAMC,KAAKC,YAAYiZ,UAAY,CAC9CC,QAAS,OACTC,QAAS,MACTC,sBAAuB,CACnBC,eAAgB,WAGxBxE,GAAkBmE,IAO1B9F,GAAW,GAlLH,kDAoLR1U,QAAQC,IAAR,MApLQ,0DAAH,qDA4Lb,SAAS6b,GAAcxa,EAAO/H,GAC1BsO,GAAWtO,GAAQ+H,EACnBwG,GAAiBD,IAGrB,OACI,kBAAC,IAAMwB,SAAP,KACI,kBAAC+S,GAAA,EAAD,KACI,0DAAgCvI,GAAYpX,GAA5C,uBACA,0BACIlD,KAAK,QACL8iB,QAAO,kCAA6BxI,GAAYpX,GAAzC,iCAEX,0BACIlD,KAAK,cACL8iB,QAAO,uDAAkDxI,GAAYpX,GAA9D,wHAGf,yBAAK9K,UAAU,aACVmlB,GACG,yBACInlB,UAAU,8DACViB,MAAO,CAAC0E,KAAM,EAAGG,IAAK,IAEtB,yBAAK9F,UAAU,mBAGtB8iB,GACG,yBAAK9iB,UAAU,2BACX,yBAAKA,UAAU,iCACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,wFACX,kBAAC,OAAD,CAAME,GAAI,KAAV,QADJ,IAC+B,0BAAMF,UAAU,QAAhB,KAC3B,4BACI+X,SAtCZ,SAACzO,GACrBgM,EAAQnH,KAAK,UAAY7E,EAAM6H,OAAOjL,QAsCNqmB,aAAczhB,EACdlD,KAAK,SACL5H,UAAU,gEAETwrB,EAAWnrB,KAAI,SAACK,GACb,OACI,4BAAQwF,MAAOxF,EAAKA,IAAKA,GACpBwhB,GAAYxhB,SAOjC,yBAAKV,UAAU,iEACX,6BACI,wBAAIA,UAAU,yCAAyCurB,GACvD,yBAAKvrB,UAAU,mCACX,wBAAIA,UAAU,IAAd,gBACA,wBAAI4qB,GAAG,cAAc5qB,UAAU,cAC1BymB,MAIb,6BACI,kBAAClE,GAAA,EAAD,CACI9Z,QAAS7D,EACToT,MAAM,UACNhY,UAAU,aACV2qB,QAAS,kBAAC,KAAD,OAJb,WAUR,yBAAK3qB,UAAU,kBACX,kBAAC,EAAD,CAAaqH,IAAKyd,EAAUtd,MAAO+d,EAAcje,MAAO,OAE5D,yBAAKtH,UAAS,uBAAkB8iB,EAAU,uBAAyB,KAC/D,kBAAC,EAAD,CAAO/Z,KAAMka,EAAUla,KAAMD,QAASma,EAAUna,WAGpD,yBAAK9I,UAAU,sBAAsBiB,MAAOJ,EAAe,IACvD,kBAAC,GAAD,CAAUyU,QAAS2P,GAAavM,MAAO2K,EAAa5K,OAAQ0K,MAGpE,yBAAKnjB,UAAU,gCACX,yBAAKA,UAAU,IACX,yBAAKA,UAAU,6CACX,yBAAKA,UAAU,iDACX,yBAAKA,UAAU,gBAAf,UACA,yBAAKA,UAAU,qBAAqBqjB,EAAYlY,QAC/CkY,EAAY1O,MAEjB,yBAAK3U,UAAU,4DACX,yBAAKA,UAAU,gBAAf,aACe,IACX,uBACI4U,IAAI,WACJzD,OAAO,SACPnR,UAAU,cACViF,KAAMgP,GAJV,SASJ,yBAAKjU,UAAU,qBAAqBqjB,EAAYtO,YAChD,yBAAK/U,UAAU,qBACVqjB,EAAYrO,iBADjB,6BAKR,yBAAKhV,UAAU,wCACX,kBAAC,EAAD,CACI0L,aAAcyX,EACdrY,UAAWA,EACX2B,aAAcgf,GACd/e,OAAQ,WACRlF,MAAO,CAAC,YAAa,SAAU,YAAa,QAC5CmF,MAAOA,MAIf,yBAAK3M,UAAU,8BACV2jB,IAAc,kBAAC,GAAD,CAAY3N,UAAW2N,GAAYrO,QAAS2P,MAG9DR,IACG,yBACIzkB,UAAU,+CACViB,MAAOJ,EAAe,IAEtB,kBAAC,EAAD,CACIqU,WAAYuP,GACZ7c,KAAK,YACLF,SAAUyiB,MAKtB,yBAAKnqB,UAAU,6BAA6BiB,MAAO,CAACY,OAAQ,UACxD,kBAAC,EAAD,CAAOqT,WAAYyP,GAAc/c,KAAK,UAAUF,SAAUyiB,SAK1E,kBAAC,GAAD,U,OC3ZT,SAASqC,KAAe,IAC5BxrB,EAAYyrB,cAAZzrB,SAMP,OAJAoI,qBAAU,WACNtI,OAAO4rB,SAAS,EAAG,KACpB,CAAC1rB,IAEG,K,wBCqEI2rB,OAnEf,WACI,IAAM7sB,EAAQ,CACV,CACIW,SAAU,IACVmsB,KAAM/J,GACNzhB,YAAa,OACbZ,cAAc,GAElB,CACIC,SAAU,aACVmsB,KAAM5B,GACN5pB,YAAa,YACbZ,cAAc,GAElB,CACIC,SAAU,oBACVmsB,KAAMvB,GACNjqB,YAAa,QACbZ,cAAc,IAatB,OACI,yBAAKR,UAAU,OACX,kBAACyqB,GAAA,EAAD,KACI,4BAAQpS,KAAK,uBAAuB/T,KAAKE,UAZhC,CACjB,WAAY,qBACZ,QAAS,MACToD,KAAM,2DACNilB,cAAe,mBACf7nB,IAAK,4BACL8nB,MAAO,iDAQH,kBAAC,gBAAD,CAAeC,SAAUC,IACrB,kBAACR,GAAD,MACA,kBAAC,KAAD,CAAW5B,GAAG,kBACV,kBAAC,IAAD,CACIqC,OAAQ,gBAAElsB,EAAF,EAAEA,SAAF,OACJ,yBAAKf,UAAU,WACX,kBAAC,EAAD,CAAQF,MAAOA,IACf,kBAAC,IAAD,CAAQiB,SAAUA,GACbjB,EAAMO,KAAI,SAACC,EAAM+J,GACd,OACI,kBAAC,IAAD,CACIpK,OAAK,EACLW,KAAMN,EAAKG,SACXwsB,OAAQ,gBAAEzS,EAAF,EAAEA,MAAF,OACJ,kBAACla,EAAKssB,KAAN,CAAWlsB,IAAK8Z,EAAM0S,OAAOpiB,WAAaT,KAE9C3J,IAAK2J,OAIjB,kBAAC,IAAD,CAAUnK,GAAG,eCxD3CitB,GAAcC,QACa,cAA7BtsB,OAAOC,SAASssB,UAEiB,UAA7BvsB,OAAOC,SAASssB,UAEhBvsB,OAAOC,SAASssB,SAAS7S,MAAM,2DAqCvC,SAAS8S,GAAgBC,EAAOC,GAC5BroB,UAAUsoB,cACLC,SAASH,GACTjoB,MAAK,SAACqoB,GACHA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBpiB,QACbtG,UAAUsoB,cAAcO,YAIxB3f,QAAQC,IACJ,iHAKAkf,GAAUA,EAAOS,UACjBT,EAAOS,SAASN,KAMpBtf,QAAQC,IAAI,sCAGRkf,GAAUA,EAAOU,WACjBV,EAAOU,UAAUP,WAOxCpoB,OAAM,SAACC,GACJ6I,QAAQ7I,MAAM,4CAA6CA,MCxFvE2oB,IAASlB,OAAO,kBAAC,GAAD,MAASnoB,SAASspB,eAAe,SDc1C,SAAkBZ,GACrB,GAA6C,kBAAmBroB,UAAW,CAGvE,GADkB,IAAIygB,IAAIoH,GAAwBlsB,OAAOC,SAASkE,MACpDopB,SAAWvtB,OAAOC,SAASstB,OAIrC,OAGJvtB,OAAOwtB,iBAAiB,QAAQ,WAC5B,IAAMf,EAAK,UAAMP,GAAN,sBAEPG,KAgEhB,SAAiCI,EAAOC,GAEpCe,MAAMhB,EAAO,CACTiB,QAAS,CAAC,iBAAkB,YAE3BlpB,MAAK,SAACugB,GAEH,IAAM4I,EAAc5I,EAAS2I,QAAQhhB,IAAI,gBACjB,MAApBqY,EAAS6I,QAAkC,MAAfD,IAA8D,IAAvCA,EAAYrd,QAAQ,cAEvEjM,UAAUsoB,cAAckB,MAAMrpB,MAAK,SAACqoB,GAChCA,EAAaiB,aAAatpB,MAAK,WAC3BxE,OAAOC,SAAS8tB,eAKxBvB,GAAgBC,EAAOC,MAG9BjoB,OAAM,WACH8I,QAAQC,IAAI,oEAnFRwgB,CAAwBvB,EAAOC,GAI/BroB,UAAUsoB,cAAckB,MAAMrpB,MAAK,WAC/B+I,QAAQC,IACJ,iHAMRgf,GAAgBC,EAAOC,OCrCvCC,K","file":"static/js/main.b118c4f7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst navLinkProps = (path, animationDelay) => ({\n    className: `${window.location.pathname === path ? 'focused' : ''}`,\n    style: {\n        animationDelay: `${animationDelay}s`,\n    },\n});\n\nfunction Navbar({pages}) {\n    const [expand, setExpand] = useState(false);\n    return (\n        <nav className=\"flex items-center flex-wrap bg-white text-primary py-2\">\n            <div className=\"container py-2 px-2 items-center font-bold text-lg\">\n                <div className=\"w-full flex items-center justify-between -my-2\">\n                    <NavLink exact={true} to='/' className=\"flex items-center cursor-pointer lg:flex\">\n                        <img\n                            src=\"/images/covid.svg\"\n                            alt=\"logo\"\n                            className=\"h-10 w-auto mr-3\"\n                        />\n                        <div className=\"text-xl font-bold text-black text-primary\">\n                            COVID-19 India\n                            <span className=\"text-red-600 uppercase live-txt blink\">\n                                Live\n                            </span>\n                        </div>\n                    </NavLink>\n                    <div className=\"flex ml-auto mr-1\">\n                        {pages.map((page, i) => {\n                            if (page.showInNavbar === true) {\n                                return (\n                                    <NavLink\n                                        exact={true}\n                                        to={page.pageLink}\n                                        key={i}\n                                        className={\n                                            'mx-1 px-3 py-4 hidden lg:block nav-link'\n                                        }\n                                        activeClassName={\n                                            'relative nav-link-active'\n                                        }\n                                    >\n                                        <span\n                                            {...navLinkProps(\n                                                page.pageLink,\n                                                page.animationDelayForNavbar\n                                            )}\n                                        >\n                                            {page.displayName}\n                                        </span>\n                                    </NavLink>\n                                );\n                            }\n                            return null;\n                        })}\n                    </div>\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from \"react\";\n\n/**\n *\n * @return {string}\n * @constructor\n */\nfunction Arrow({up, rotate = 0}) {\n    let arrow = up ? '5 12 12 5 19 12' : '5 12 12 19 19 12';\n    let transform = {};\n    if (rotate) {\n        transform.transform = `rotate(${rotate}deg)`;\n    }\n    return (\n        <svg\n            style={{marginTop: '-0.14rem', ...transform}}\n            className=\"inline-block\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"10\"\n            height=\"10\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"3\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\" />\n            <polyline points={arrow} />\n        </svg>\n    );\n}\n\nexport default Arrow;\n","/**\n *\n * @param xs\n * @param key\n * @return {*}\n */\nexport function groupBy(xs, key) {\n    return xs.reduce(function (rv, x) {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n}\n\nexport function defined(obj) {\n    return obj !== undefined;\n}\n\nexport function toCapitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n *\n * @param number\n * @param decimal\n * @return {number}\n */\nexport function toFixedNumber(number, decimal) {\n    var tenToD = Math.pow(10, decimal);\n    return +(Math.round((number + Number.EPSILON) * tenToD) / tenToD).toFixed(decimal);\n}\n\n/**\n *\n * @param current\n * @param previous\n * @return {string}\n */\nexport function timeDifference(current, previous) {\n    var msPerMinute = 60 * 1000;\n    var msPerHour = msPerMinute * 60;\n    var msPerDay = msPerHour * 24;\n    var msPerMonth = msPerDay * 30;\n    var msPerYear = msPerDay * 365;\n    var elapsed = Math.max(0, current - previous),\n        r,\n        fixRelative = (num, str) => {\n            let t0 = num > 1 ? 's' : '';\n            if (str === 'day' && num === 1) {\n                return 'Yesterday';\n            }\n            return `${num} ${str}${t0} ago`;\n        };\n\n    if (elapsed < msPerMinute) {\n        return `${Math.round(elapsed / 1000)} seconds ago`;\n    } else if (elapsed < msPerHour) {\n        r = Math.round(elapsed / msPerMinute);\n        return fixRelative(r, 'minute');\n    } else if (elapsed < msPerDay) {\n        return fixRelative(Math.round(elapsed / msPerHour), 'hour');\n    } else if (elapsed < msPerMonth) {\n        return fixRelative(Math.round(elapsed / msPerDay), 'day');\n    } else if (elapsed < msPerYear) {\n        return fixRelative(Math.round(elapsed / msPerMonth), 'month');\n    } else {\n        return fixRelative(Math.round(elapsed / msPerYear), 'year');\n    }\n}\n\n/**\n *\n * @param json\n * @return {any}\n */\nexport function clone(json) {\n    return JSON.parse(JSON.stringify(json));\n}\n\nexport const IS_MOBILE_DEVICE = window.innerWidth < 769;\nexport const IS_SINGLE_COLUMN = window.innerWidth < 1620;\n\n/**\n *\n * @param url\n * @param message\n * @return {Window}\n */\nfunction shareURL(url, message) {\n    const shareUri = `https://www.addtoany.com/share#url=${encodeURI(url)}&title=${encodeURI(message)}`;\n    const h = 500;\n    const w = 500;\n    const left = window.screen.width / 2 - w / 2;\n    const top = window.screen.height / 2 - h / 2;\n    return window.open(\n        shareUri,\n        document.title,\n        'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' +\n            w +\n            ', height=' +\n            h +\n            ', top=' +\n            top +\n            ', left=' +\n            left\n    );\n}\n\nexport function shareTheApp() {\n    const message = document.title,\n        url = window.location.href;\n\n    if (navigator.share !== undefined) {\n        navigator\n            .share({\n                title: message,\n                text: message,\n                url: url,\n            })\n            .then()\n            .catch((error) => {});\n    } else {\n        shareURL(url, message);\n    }\n}\n\nexport function round(value, precision) {\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(value * multiplier) / multiplier;\n}\n\nexport function isTouchDevice() {\n    return window.ontouchstart !== undefined;\n}\n\n/**\n *\n * @param el\n * @param prop\n * @param convertToInt\n * @return {CSSStyleDeclaration|string|number}\n */\nexport function getStyle(el, prop, convertToInt = true) {\n    var style;\n\n    // For width and height, return the actual inner pixel size\n    if (prop === 'width') {\n        return Math.min(el.offsetWidth, el.scrollWidth) - getStyle(el, 'padding-left') - getStyle(el, 'padding-right');\n    } else if (prop === 'height') {\n        return (\n            Math.min(el.offsetHeight, el.scrollHeight) - getStyle(el, 'padding-top') - getStyle(el, 'padding-bottom')\n        );\n    }\n\n    // Otherwise, get the computed style\n    style = window.getComputedStyle(el);\n\n    if (style) {\n        style = style.getPropertyValue(prop);\n        if (convertToInt) {\n            style = parseFloat(style);\n        }\n    }\n    return style;\n}\n\nexport function animationDelay(i) {\n    return {animationDelay: i * 200 + 'ms'};\n}\n\nexport function numberFormatLocal(number) {\n    if (typeof number === 'number') {\n        return number.toLocaleString('en-IN');\n    }\n    return number;\n}\n","import React, {forwardRef, useImperativeHandle, useState} from 'react';\nimport Arrow from './arrow';\nimport { numberFormatLocal } from \"../utils/common-utils\";\n\nconst DisplayCard = forwardRef(({count, cards: cc, styles = {}, callback}, ref) => {\n    let [cards, setCards] = useState(cc);\n    let [activeCard, setActiveCard] = useState(cards[0].name);\n\n    useImperativeHandle(ref, () => ({\n        updateDisplayCardCounts(cards) {\n            setCards(cards);\n        },\n    }));\n\n    function updateActiveCard(card) {\n        setActiveCard(card.name);\n        setCards([...cards]);\n    }\n\n    return (\n        <div className=\"flex flex-row justify-center my-5 justify-between\">\n            {cards.map((card, i) => {\n                let bg100, bg200, shadow, flexAuto;\n\n                if (styles.bg !== false || card.name === activeCard) {\n                    bg100 = `bg-${card.colorClass}-100`;\n                    bg200 = `bg-${card.colorClass}-200`;\n                }\n\n                if (styles.shadow !== false) {\n                    shadow = 'shadow';\n                }\n\n                if (styles.autoWidth !== false) {\n                    flexAuto = 'flex-auto';\n                }\n\n                callback = callback || (() => {});\n\n                return (\n                    <div\n                        onClick={() => {\n                            updateActiveCard(card, i);\n                            callback(card, i);\n                        }}\n                        key={i}\n                        className={`${\n                            i ? 'ml-2' : ''\n                        } w-24 flex ${flexAuto} flex-col rounded overflow-hidden cursor-pointer ${shadow} text-center text-${\n                            card.colorClass\n                        }-600`}\n                    >\n                        <div className={`pt-2 flex flex-auto flex-col items-center justify-center ${bg100} font-bold`}>\n                            {\n                                <span className=\"text-xs\">\n                                    {card.delta ? <Arrow up={card.delta >= 0} /> : ''}\n                                    {numberFormatLocal(card.delta)}\n                                </span>\n                            }\n                            <span className=\"text-xl py-1\">{numberFormatLocal(card.value)}</span>\n                        </div>\n                        <div className={`py-2 w-full ${bg200} text-sm font-semibold`}>\n                            <span className=\"capitalize\">{card.name}</span>\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n});\n\nexport default DisplayCard;\n","import React, {useEffect, useState} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {ascending, descending} from '../utils/sort';\nimport Arrow from './arrow';\nimport {numberFormatLocal} from '../utils/common-utils';\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction Table(props) {\n    let [{rows, columns}, setValues] = useState({\n        columns: props.columns,\n        rows: props.rows.filter((row) => row.confirmed > 0),\n    });\n\n    rows = rows.filter((row) => row.confirmed > 0);\n\n    useEffect(() => {\n        setValues({\n            columns: props.columns.slice(0),\n            rows: props.rows.slice(0),\n        });\n    }, [props]);\n\n    const sortRows = function (event) {\n        let thisElement = event.currentTarget,\n            {prop} = thisElement.dataset;\n\n        let asc = (thisElement.ascending = !thisElement.ascending);\n        let sorted = rows.slice(0).sort(function (a, b) {\n            return asc ? descending(a[prop], b[prop]) : ascending(a[prop], b[prop]);\n        });\n        setValues({\n            rows: sorted,\n            columns,\n        });\n    };\n\n    return (\n        <table className=\"w-full\">\n            <tbody className=\"text-xs leading-tight border-b-2 cursor-pointer\">\n                <tr>\n                    {columns.map((column) => (\n                        <th\n                            className=\"capitalize border px-2 py-2 sort-by sticky bg-white\"\n                            key={column.name}\n                            onClick={sortRows}\n                            data-prop={column.accessor}\n                            title=\"Click to sort\"\n                        >\n                            {column.name}\n                        </th>\n                    ))}\n                </tr>\n            </tbody>\n            <tbody className=\"\">\n                {rows.map((row, index) => {\n                    return (\n                        <tr key={index}>\n                            {columns.map((column, j) => {\n                                let columnName = column.accessor,\n                                    colorClass = column.colorClass,\n                                    todayCount = 0,\n                                    count = row[columnName],\n                                    extraClass = '';\n\n                                if (row.today) {\n                                    todayCount = row.today[columnName];\n                                }\n\n                                if (row.district === 'Unknown') {\n                                    extraClass = `bg-${colorClass}-200 text-${colorClass}-600`;\n                                }\n\n                                //\n                                if (props.link && j === 0 && !row.isUnknown) {\n                                    count = (\n                                        <Link to={`/state/${row.stateCode}`}>\n                                            {count}\n                                            <span className=\"ml-1 text-gray-600\">\n                                                <Arrow rotate={-90} />\n                                            </span>\n                                        </Link>\n                                    );\n                                } else {\n                                    count = numberFormatLocal(count);\n                                }\n\n                                return (\n                                    <td\n                                        key={j}\n                                        className={`${\n                                            j === 0 ? 'bg-gray-200 font-bold' : 'text-right'\n                                        }  text-2xs border px-2 py-2 ${extraClass}`}\n                                    >\n                                        <span>\n                                            {j > 0 && todayCount ? (\n                                                <span className={`text-${colorClass}-600 inline-block font-bold`}>\n                                                    <Arrow up={todayCount > 0} />\n                                                    {numberFormatLocal(todayCount)}\n                                                </span>\n                                            ) : (\n                                                ''\n                                            )}\n                                        </span>\n                                        <span className=\"text-xs ml-1\">{count}</span>\n                                    </td>\n                                );\n                            })}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </table>\n    );\n}\n\nexport default Table;\n","/**\n *\n * @param a\n * @param b\n * @return {number}\n */\nfunction ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\n/**\n *\n * @param a\n * @param b\n * @return {number}\n */\nfunction descending(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n\nexport {ascending, descending};\n","import React from \"react\";\nimport DisplayCard from \"./display-card\";\n\nlet colorMap = {\n    confirmed: 'red',\n    active: 'orange',\n    recovered: 'green',\n    dead: 'gray',\n    tested: 'blue',\n};\n\nconst getCards = (total = {}, today = {}, list) => {\n    return list.map((item) => {\n        return {\n            name: item,\n            value: total[item],\n            delta: today[item],\n            colorClass: colorMap[item],\n        };\n    });\n};\n\nclass MapText extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = {...props.initCardData, cards: props.cards};\n        this.child = React.createRef();\n    }\n\n    update(data, today) {\n        this.setState(data);\n        let cards = getCards(data, today, this.props.cards);\n        this.child.current.updateDisplayCardCounts(cards);\n    }\n\n    render() {\n        let cards = getCards(this.state, this.state.today, this.props.cards);\n        let {name} = this.state;\n\n        return (\n            <div>\n                <h2 className=\"font-extra-bold text-xl text-primary my-2\">\n                    {name}\n                </h2>\n                <DisplayCard\n                    styles={{bg: false, autoWidth: false}}\n                    cards={cards}\n                    ref={this.child}\n                    callback={this.props.callback}\n                />\n            </div>\n        );\n    }\n}\nexport default MapText;\n","import React from \"react\";\nimport axios from \"axios\";\nimport MapText from \"./text\";\n\nconst d3 = window.d3;\n\nclass Map extends React.Component {\n    constructor(props) {\n        super(props);\n        this.child = React.createRef();\n        this.selected = props.cards[0];\n        this.mapType = 'affected';\n    }\n\n    handleMapHover = (data, today) => {\n        this.child.current.update(data, today);\n    };\n\n    async componentDidMount() {\n        let {stateCode, seriesPoints: rawPoints, joinBy, zones} = this.props,\n            codeLower = stateCode.toLowerCase(),\n            scopeCode = `countries-ind-${codeLower}-2`,\n            seriesPoints = [],\n            totalSummery = this.props.initCardData;\n\n        this.mapExtents = {\n            confirmed: {\n                count: d3.max(rawPoints, (d) => d.confirmed),\n                colors: ['#fff4ec', '#ff1100'],\n            },\n            active: {\n                count: d3.max(rawPoints, (d) => d.active),\n                colors: ['#fff4ec', '#f36f40'],\n            },\n            recovered: {\n                count: d3.max(rawPoints, (d) => d.recovered),\n                colors: ['#f4fcee', '#007e1a'],\n            },\n            dead: {\n                count: d3.max(rawPoints, (d) => d.dead),\n                colors: ['#fcfbfc', '#2f2f2f'],\n            },\n        };\n\n        // create a object map and then asign to the series poitns\n        let object_map = {};\n        rawPoints.forEach((row) => {\n            object_map[row[joinBy]] = row;\n        });\n\n        // let zoneMap = {};\n        // if (zones) {\n        //     zones.forEach((row) => {\n        //         zoneMap[row[0]] = row[1];\n        //     });\n        // }\n\n        const [{data: toposjon}, {data: mapData}] = await Promise.all([\n            axios.get(`/maps/${stateCode}.topojson`),\n            axios.get('/charts/map.json'),\n        ]);\n\n        window.$ZC.mapCollections[scopeCode] = toposjon;\n\n        // create data for all available district\n        let availableNames = [];\n        seriesPoints = toposjon.objects.source.geometries.map(({properties: {name_ascii}}) => {\n            let confirmed = 0,\n                active = 0,\n                recovered = 0,\n                dead = 0;\n\n            if (object_map[name_ascii]) {\n                ({confirmed, active, recovered, dead} = object_map[name_ascii]);\n            }\n            availableNames.push(name_ascii);\n            let zone = null;\n            // if (zones) {\n            //     zone = zoneMap[name_ascii];\n            // }\n            return [name_ascii, confirmed, active, recovered, dead, zone];\n        });\n\n        // list the non matched names\n        rawPoints.forEach((row) => {\n            if (!availableNames.includes(row[joinBy])) {\n                console.log('map mitchmatch', row[joinBy]);\n            }\n        });\n\n        console.log('*****************************');\n\n        // if (zones) {\n        //     zones.forEach((district) => {\n        //         if (!availableNames.includes(district[0])) {\n        //             console.log('zone mitchmatch', district[0]);\n        //         }\n        //     });\n        // }\n\n        if (this.myDiv) {\n            this.myDiv.classList.add('fade-in');\n            mapData.map.scope = scopeCode;\n            mapData.seriesdata.chartdata[0].data = [seriesPoints];\n\n            mapData.legend.colors = [...this.mapExtents.confirmed.colors];\n            mapData.legend.colorBand.stops = [0, this.mapExtents.confirmed.count];\n\n            let last = null,\n                {callback, tapCallback, clickCallback} = this.props;\n\n            const mapAction = (error, data) => {\n                let [name, confirmed, active, recovered, dead] = data.point,\n                    today = {recovered: 0, confirmed: 0, active: 0, dead: 0};\n\n                if (object_map[name]) {\n                    today = object_map[name].today;\n                }\n\n                let data_callback = {\n                    name,\n                    confirmed,\n                    active,\n                    recovered,\n                    dead,\n                };\n\n                if (name !== last) {\n                    let total = totalSummery[this.selected] || 0.001,\n                        current = data_callback[this.selected] || 0,\n                        percent = parseFloat(100 * (current / total)).toFixed(2);\n\n                    // add title\n                    this.map.container.attr('title', `${percent}% ${this.selected} from ${data_callback.name}`);\n\n                    this.handleMapHover(data_callback, today);\n                    last = name;\n                }\n\n                if (callback) {\n                    callback(data_callback, today);\n                }\n                window.d3.event.allowDefault = true;\n            };\n\n            let defaultEvent = () => (window.d3.event.allowDefault = true);\n\n            mapData.chart.plot.plotoptions.geoheatmap.events = {\n                mousemove: mapAction,\n                mouseout: () => {\n                    this.map.container.attr('title', null);\n                    window.d3.event.allowDefault = true;\n                },\n                tap: (error, data) => {\n                    mapAction(error, data);\n                    if (tapCallback) {\n                        tapCallback(error, data, this.map);\n                    }\n                    window.d3.event.allowDefault = true;\n                },\n                click: clickCallback || defaultEvent,\n            };\n\n            this.map = window.$ZC.maps(this.myDiv, mapData);\n        }\n    }\n\n    callback(card, i) {\n        let colorMap = ['#e84b36', '#f88658', '#007e1a', '#2f2f2f'];\n\n        this.map.userdata.legend.colors = [...this.mapExtents[card.name].colors];\n        this.map.userdata.legend.colorBand.stops = [0, this.mapExtents[card.name].count];\n        this.selected = card.name;\n\n        // select the default button\n        d3.selectAll('button').classed('text-primary', false);\n        d3.select('button[name=default]').classed('text-primary', true);\n\n        this.map.userdata.legend.colorBand.ranges = null;\n        this.map.userdata.legend.filter.enabled = false;\n        this.map.userdata.metadata.axes.clr = [i + 1];\n        this.map.userdata.chart.plot.plotoptions.geoheatmap.strokeColor = colorMap[i];\n        this.map.eventHandler.mapEvents.clearHighlightedPoints();\n        this.map.redraw();\n    }\n\n    changeMapType(event) {\n        d3.selectAll('button').classed('text-primary', false);\n        event.target.classList.add('text-primary');\n\n        if (event.target.name === 'zone') {\n            this.mapType = 'zone';\n            this.map.userdata.legend.colors = ['#EF5350', '#FFA726', '#26A69A'];\n            this.map.userdata.legend.colorBand.ranges = [['Red Zone'], ['Orange Zone'], ['Green Zone']];\n            this.map.userdata.chart.plot.plotoptions.geoheatmap.strokeColor = '#333';\n            this.map.userdata.legend.filter.enabled = true;\n            this.map.userdata.metadata.axes.clr = [5];\n            this.map.eventHandler.mapEvents.clearHighlightedPoints();\n            this.map.redraw();\n        } else {\n            this.callback({name: this.selected}, this.props.cards.indexOf(this.selected));\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <MapText\n                    ref={this.child}\n                    initCardData={this.props.initCardData}\n                    cards={this.props.cards}\n                    callback={this.callback.bind(this)}\n                />\n                <div className=\"live-map my-6\" ref={(c) => (this.myDiv = c)}></div>\n                {this.props.zones && (\n                    <div className=\"my-4 text-sm hidden\">\n                        <button\n                            className=\"bg-gray-300 px-4 py-3 font-bold text-primary\"\n                            name=\"default\"\n                            onClick={this.changeMapType.bind(this)}\n                            onTouchStart={this.changeMapType.bind(this)}\n                        >\n                            Affected Areas\n                        </button>\n                        <button\n                            className=\"bg-gray-300 px-4 py-3 font-bold ml-2\"\n                            name=\"zone\"\n                            onClick={this.changeMapType.bind(this)}\n                            onTouchStart={this.changeMapType.bind(this)}\n                        >\n                            Zones\n                        </button>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nwindow.colorFinder = function (chartInstance, index, data) {\n    let colorIndex = chartInstance.userdata.metadata.axes.clr[0];\n\n    if (data[colorIndex] === 0) {\n        return 'white';\n    }\n};\n\nexport default Map;\n","export const POPULATION = {\n    DL: 18498192,\n    HR: 27793351,\n    KL: 35461849,\n    HP: 7384022,\n    PB: 29875481,\n    GA: 1564349,\n    TG: 38919054,\n    UT: 11140566,\n    CH: 1142479,\n    LD: 72172,\n    DN: 384058,\n    GJ: 64801901,\n    CT: 28989789,\n    DD: 223165,\n    AN: 411278,\n    TN: 77177540,\n    MH: 121924973,\n    KA: 66834193,\n    OR: 45861035,\n    WB: 98662146,\n    PY: 1394026,\n    AP: 53390841,\n    JH: 37933898,\n    TR: 4112223,\n    MP: 83849671,\n    MZ: 1222134,\n    UP: 233378519,\n    RJ: 79584255,\n    SK: 680721,\n    BR: 122256981,\n    MN: 3048861,\n    AR: 1548776,\n    JK: 13468313,\n    LA: 279924,\n    NL: 2218634,\n    ML: 3320226,\n    AS: 35080827,\n};\n\nexport const PUPULATION_SOURCE =\n    'https://uidai.gov.in/images/state-wise-aadhaar-saturation.pdf';\n\nexport const POPULATION_SOURCE_ARCHIVED =\n    'https://web.archive.org/web/20200229034831/https://uidai.gov.in/images/state-wise-aadhaar-saturation.pdf';\n","import React from 'react';\nimport {numberFormatLocal} from './common-utils';\n\nconst d3 = window.d3;\nvar parseTime = d3.timeParse('%d/%m/%Y');\nvar formatTime = d3.timeFormat('%B %d');\n\n/**\n *\n * @param testing_data\n * @param totalPopulation\n * @param label\n * @return {{date: *, test_per_million: string, tested: string, label: string, population: string}}\n */\n\nexport function getFormattedTestingData(testing_data, totalPopulation, label) {\n    let dateString = '';\n\n    dateString = (\n        <div className=\"text-xs\">\n            {label === 'Total' ? 'As per latest ICMR ' : `Till ${formatTime(parseTime(testing_data.date))} as per `}\n            <a href={testing_data.source} rel=\"noopener\" className=\"bg-blue-100\" target=\"_blank\">\n                {label === 'Total' ? 'Report' : 'source'}\n            </a>\n        </div>\n    );\n\n    return {\n        populationNumeric: totalPopulation,\n        testedNumeric: testing_data.tested,\n        tested: numberFormatLocal(testing_data.tested),\n        date: dateString,\n        population: numberFormatLocal(totalPopulation),\n        test_per_million: numberFormatLocal(Math.round((testing_data.tested / totalPopulation) * 1000000)),\n        label: ` - ${label}`,\n    };\n}\n","import React from \"react\";\n\nclass Chart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.child = React.createRef();\n    }\n\n    componentDidMount() {\n        let {seriesData, name, callback} = this.props;\n\n        if (this.myDiv) {\n            let chart = this.chart = window.$ZC.charts(this.myDiv, seriesData);\n            if (callback) {\n                callback(chart, name);\n            }\n        }\n    }\n    \n    componentDidUpdate() {\n        if (this.props.updateCallback) {\n            this.props.updateCallback(this.chart, this.props.name)\n        }\n    }\n\n    render() {\n        return <div className=\"h-full\" ref={(c) => (this.myDiv = c)}></div>;\n    }\n}\n\nexport default Chart;\n","function makeCumulative(obj, key) {\n    let prev = 0;\n    obj.forEach((row) => {\n        row[key] += prev;\n        prev = row[key];\n    });\n}\n\nfunction dailyTrend(history, xKey, keys, cumulative, count) {\n    let series = keys.map((key) => {\n        return history.map((row, i) => {\n            if (xKey === '$index') {\n                return [i, row[key]];\n            }\n            return [row[xKey], row[key]];\n        });\n    });\n\n    if (cumulative) {\n        series.forEach((s) => {\n            makeCumulative(s, 1);\n        });\n    }\n\n    if (count) {\n        series = series.map((s) => s.slice(-count));\n    }\n\n    return series;\n}\n\nexport {dailyTrend, makeCumulative};\n","import React, { useRef, useState } from \"react\";\nimport Chart from \"./Chart\";\nimport { dailyTrend } from \"../charts/daily\";\nimport { toCapitalize } from \"../utils/common-utils\";\n\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction TrendGraph(props) {\n    let {chartJson, history} = props;\n\n    const ref = useRef();\n    const [chartStore, updateChartStore] = useState({});\n    const [dailyChartMode, setDailyChartMode] = useState('cumulative');\n\n    const [timeFrame, setTimeFrame] = useState('all');\n    const [cumulative, setCumulative] = useState(true);\n\n    let trendTime = {'1week': 7, '2week': 14, month: 30},\n        seriesNames = ['confirmed', 'active', 'recovered', 'dead'];\n\n    /**\n     *\n     * @param chart\n     * @param name\n     */\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    function updateCallback() {\n        let chart = chartStore.daily,\n            scaleMode = scaleState.checked ? 'log' : 'linear',\n            cumulative = cumulativeMode.checked === false;\n\n        chart.userdata.chart.axes.yaxis[0].scaleType = scaleMode;\n        let {series, minRange} = getTrendSeries(cumulative, trendTime[timeFrame]);\n\n        series.forEach((s, i) => {\n            chart.userdata.seriesdata.chartdata[i].data = s;\n        });\n        chart.userdata.chart.axes.xaxis.minRange = minRange;\n        chart.redraw();\n    }\n\n    function getTrendSeries(cumulative, count) {\n        // create the graph data\n        let seriesNames = ['confirmed', 'active', 'recovered', 'dead'];\n        let dailySeries = dailyTrend(history, 'date', seriesNames, cumulative, count);\n        return {\n            series: dailySeries,\n            minRange: dailySeries[0][0][0],\n        };\n    }\n\n    /**\n     *\n     * @param event\n     */\n    function updateDailyChartScaleMode(event) {\n        let checked = event.target.checked;\n        setScaleState({...scaleState, [event.target.name]: checked});\n        setCumulativeMode({...cumulativeMode, checked: false});\n    }\n\n    /**\n     *\n     * @param event\n     */\n    function updateDailyChartCumulative(event) {\n        let cumulative = event.target.checked === false;\n        setCumulative(cumulative);\n\n        setCumulativeMode({...cumulativeMode, checked: !cumulative});\n        setScaleState({...scaleState, checked: false});\n    }\n\n    function updateTimeFrame(frame) {\n        setTimeFrame(frame);\n    }\n\n    if (history.length && !chartStore.daily) {\n        let {series, minRange} = getTrendSeries(true, trendTime[timeFrame]);\n        series.forEach((series, i) => {\n            chartJson.seriesdata.chartdata[i] = {data: series, seriesname: toCapitalize(seriesNames[i])};\n        });\n        chartJson.chart.axes.xaxis.minRange = minRange;\n        chartJson.canvas.title.show = false;\n    }\n\n    const [scaleState, setScaleState] = React.useState({checked: false});\n    const [cumulativeMode, setCumulativeMode] = React.useState({checked: false});\n\n    return (\n        <React.Fragment>\n            <h2 className=\"ml-3 mt-4\">Daily Trend</h2>\n            <div className=\"ml-3 flex mt-2\">\n                <div className=\"flex items-center \">\n                    <span className=\"mr-2\">Scale</span>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                size=\"small\"\n                                checked={scaleState.checked}\n                                onChange={updateDailyChartScaleMode}\n                                name=\"checked\"\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Logarithmic\"\n                    />\n                </div>\n                <div className=\"flex items-center \">\n                    <span className=\"mr-2\">Mode</span>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                disabled={scaleState.checked}\n                                size=\"small\"\n                                checked={cumulativeMode.checked}\n                                onChange={updateDailyChartCumulative}\n                                name=\"checked\"\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Daily\"\n                    />\n                </div>\n            </div>\n            <div className=\"trend-graph\">\n                <Chart seriesData={chartJson} name=\"daily\" callback={chartCallback} updateCallback={updateCallback} />\n            </div>\n            <div className=\"flex flex-auto z-10 my-4 items-center justify-end\">\n                <div className=\"button-group text-sm mr-4\">\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('all')}\n                        className={`${\n                            timeFrame === 'all' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        Beginning\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('month')}\n                        className={`${\n                            timeFrame === 'month' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        Month\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('2week')}\n                        className={`${\n                            timeFrame === '2week' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        2 Weeks\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('1week')}\n                        className={`${\n                            timeFrame === '1week' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        1 Week\n                    </button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default TrendGraph;\n","import React from 'react';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InfoIcon from '@material-ui/icons/Info';\nimport {PUPULATION_SOURCE} from '../constants/population';\nimport {numberFormatLocal, round} from '../utils/common-utils';\n\n/**\n *\n * @return {*}\n * @constructor\n */\n\nconst NaNCheck = (d) => {\n    if (isNaN(d)) {\n        return 0;\n    }\n    return numberFormatLocal(d);\n};\n\nfunction MetaCard({report, tests, history}) {\n    let {populationNumeric: population} = tests;\n\n    let confirmedPerMillion = NaNCheck(round((report.confirmed / population) * 1000000));\n    let activePercent = NaNCheck(round((report.active / report.confirmed) * 100, 2));\n    let recoveredPercent = NaNCheck(round((report.recovered / report.confirmed) * 100, 2));\n    let deathPercent = NaNCheck(round((report.dead / report.confirmed) * 100, 2));\n    let testPerMillion = NaNCheck(round((tests.testedNumeric / population) * 1000000));\n\n    // add a sum for total confirmed\n    let last = 0;\n    history.forEach((row) => {\n        row.confirmedCumulative = row.confirmed + last;\n        last = row.confirmedCumulative;\n    });\n\n    let growRatePerWeek = 0,\n        growthDateRange = 0;\n\n    if (history.length > 2) {\n        let lastWeek = history[history.length - 8],\n            yesterday = history[history.length - 2];\n\n        if (history.length < 8) {\n            lastWeek = history[0];\n        }\n\n        let growthRate =\n            ((yesterday.confirmedCumulative - lastWeek.confirmedCumulative) / lastWeek.confirmedCumulative) * 100;\n        growRatePerWeek = round(growthRate / 7);\n        growthDateRange = `${lastWeek.date.split(',')[0]} - ${yesterday.date.split(',')[0]}`;\n    }\n    // const doublingRate = growthRate > 0 ? 70 / round(growthRate, 2) : 0;\n    \n    let cards = [\n        {\n            title: 'Confirmed Per Million',\n            info: '(confirmed / state population) * 1 Million',\n            report: confirmedPerMillion,\n            description: `~${confirmedPerMillion} out of every 1 million people in ${report.name} have tested positive for the virus.`,\n            cardColor: 'red',\n        },\n        {\n            title: 'Active',\n            info: '(active / confirmed) * 100',\n            report: activePercent,\n            description: `For every 100 confirmed cases, ~${round(activePercent)} are currently infected.`,\n            cardColor: 'orange',\n        },\n        {\n            title: 'Recovery Rate',\n            info: '(recovered / confirmed) * 100',\n            report: recoveredPercent,\n            description: `For every 100 confirmed cases, ~${round(recoveredPercent)} have recovered from the virus.`,\n            cardColor: 'green',\n        },\n        {\n            title: 'Mortality Rate',\n            info: '(deaths / confirmed) * 100',\n            report: deathPercent,\n            description: `For every 100 confirmed cases, ~${round(\n                deathPercent\n            )} have unfortunately passed away from the virus.`,\n            cardColor: 'gray',\n        },\n        {\n            title: 'Average Growth Rate',\n            info: '(((yesterdayData - sevenDayBeforeData) / sevenDayBeforeData) * 100) / 7',\n            report: `${growRatePerWeek}%`,\n            reportLabel: growthDateRange,\n            description: `In the last one week, the number of new infections has grown by an average of ${growRatePerWeek}% every day.`,\n            cardColor: 'brown',\n        },\n        {\n            title: 'Tests Per Million',\n            info: '(total tests / total population) * 1 Million',\n            report: `~${testPerMillion}`,\n            description: `For every 1 million people in ${report.name}, ~${testPerMillion} people were tested.`,\n            cardColor: 'blue',\n        },\n    ];\n\n    return (\n        <React.Fragment>\n            <div className=\"flex justify-between my-4\">\n                <div className=\"text-gray-700 font-bold\">\n                    <h2 className=\"text-sm\">\n                        Population{' '}\n                        <a\n                            rel=\"noopener\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"text-blue-600\"\n                            href={PUPULATION_SOURCE}\n                        >\n                            2019\n                        </a>\n                    </h2>\n                    <h3 className=\"my-0 mt-1 text-2xl font-extra-bold\">{tests.population}</h3>\n                </div>\n            </div>\n            <div className=\"meta-card my-4\">\n                {cards.map((card, i) => {\n                    return (\n                        <div\n                            className={`meta-item px-6 py-6 bg-${card.cardColor}-100 text-${card.cardColor}-400 font-bold rounded shadow`}\n                            key={i}\n                        >\n                            <div className=\"meta-item-top flex items-center justify-between\">\n                                <h4 className=\"my-0 text-base\">{card.title}</h4>\n                                <span>\n                                    <Tooltip\n                                        title={<div className=\"text-sm py-2 global-style\">{card.info}</div>}\n                                        arrow\n                                        placement=\"top\"\n                                        enterTouchDelay={50}\n                                    >\n                                        <InfoIcon size=\"small\" />\n                                    </Tooltip>\n                                </span>\n                            </div>\n                            <div className=\"my-2\">\n                                <h1 className={`text-${card.cardColor}-600 text-2xl font-extra-bold`}>{card.report}</h1>\n                                <span className=\"text-xs\">{card.reportLabel}</span>\n                            </div>\n                            <p className=\"text-sm\">{card.description}</p>\n                        </div>\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default MetaCard;\n","import React from \"react\";\nimport { timeDifference } from \"../utils/common-utils\";\n\nconst icons = [\n        'bangaloremirror',\n        'firstspot',\n        'indiatoday',\n        'livemint',\n        'ndtv',\n        'news18',\n        'thehindu',\n        'zeenews',\n        'tribuneindia',\n        'hindustantimes',\n        'indiatvnews',\n        'timesofindia',\n        'firstpost',\n        'telanganatoday',\n        'cnbc',\n        'economictimes',\n        'moneycontrol',\n        'youtube',\n        'businessinsider',\n        'indianexpress',\n        'gadgetsnow',\n        'mumbaimirror',\n        'thenewsminute',\n        'republicworld',\n        'cnn',\n        'khaleejtimes',\n    ],\n    regex = new RegExp(icons.join('|')),\n    styles = {overflow: 'hidden', wordBreak: 'break-word'};\n\nfunction NewsCard({articles}) {\n    return (\n        <React.Fragment>\n            {articles.map((article, i) => {\n                let relativeTime = timeDifference(new Date(), new Date(article.publishedAt));\n                let match = article.url.match(regex),\n                    iconDiv = '',\n                    source = '';\n\n                if (match && match.length) {\n                    let icon = `images/news-favicon/${match[0]}.png`;\n                    iconDiv = (\n                        <div className=\"news-favicon bg-no-repeat mb-2\" style={{backgroundImage: `url(${icon})`}}></div>\n                    );\n                } else {\n                    source = (\n                        <div className=\"text-sm break-words mt-2\" style={styles}>\n                            <b>Source:</b> {article.source.name}\n                        </div>\n                    );\n                }\n\n                if (!article.urlToImage || article.urlToImage.match('^http://')) {\n                    return '';\n                }\n\n                return (\n                    <div className=\"article rounded border my-4\" key={i}>\n                        <a\n                            href={article.url}\n                            target=\"_blank\"\n                            rel=\"noopener\"\n                            className=\"article p-4 border-gray-400 flex w-full relative mb-2\"\n                        >\n                            <div\n                                className=\"image-preview bg-cover bg-center bg-no-repeat\"\n                                lazy=\"loaded\"\n                                style\n                                style={{backgroundImage: `url(${article.urlToImage})`}}\n                            ></div>\n\n                            <div className=\"content w-full text-black\">\n                                {iconDiv}\n                                <div\n                                    className=\"text-base font-semibold leading-normal break-words lg:text-base mb-3\"\n                                    style={styles}\n                                >\n                                    {article.title}\n                                </div>\n                                <div className=\"leading-snug break-words text-gray-700 text-xs\" style={styles}>\n                                    {article.description}\n                                </div>\n                                {source}\n                                <div className=\"source-date\">{relativeTime}</div>\n                            </div>\n                        </a>\n                    </div>\n                );\n            })}\n        </React.Fragment>\n    );\n}\n\nexport default NewsCard;\n","import React from \"react\";\n\nconst buildFindData = (data) => {\n    const dataByDateAndName = new Map();\n    data.forEach((dataPoint) => {\n        const {date, name} = dataPoint;\n        if (!dataByDateAndName.get(date)) {\n            dataByDateAndName.set(date, {[name]: dataPoint});\n        } else {\n            const nextGroup = {\n                ...dataByDateAndName.get(date),\n                [name]: dataPoint,\n            };\n            dataByDateAndName.set(date, nextGroup);\n        }\n    });\n    const finder = ({date, name}) => {\n        try {\n            return dataByDateAndName.get(date)[name];\n        } catch (e) {\n            return null;\n        }\n    };\n    return finder;\n};\n\nconst makeKeyframes = (data, numOfSlice) => {\n    const findData = buildFindData(data);\n    const nameSet = new Set(data.map(({name}) => name));\n\n    const nameList = [...nameSet];\n    const dateSet = new Set(data.map(({date}) => date));\n    const dateList = [...dateSet];\n\n    const frames = dateList.map((date) => ({\n        date,\n        data: nameList.map((name) => {\n            const dataPoint = findData({date, name});\n            return {\n                ...dataPoint,\n                value: dataPoint ? dataPoint.value : 0,\n            };\n        }),\n    }));\n\n    const keyframes = frames\n        .reduce((result, frame, idx) => {\n            const prev = frame;\n            const next = idx !== frames.length - 1 ? frames[idx + 1] : null;\n            if (!next) {\n                result.push({...frame, date: new Date(frame.date)});\n            } else {\n                const prevTimestamp = new Date(prev.date).getTime();\n                const nextTimestamp = new Date(next.date).getTime();\n                const diff = nextTimestamp - prevTimestamp;\n                for (let i = 0; i < numOfSlice; i++) {\n                    const sliceDate = new Date(prevTimestamp + (diff * i) / numOfSlice);\n                    const sliceData = frame.data.map(({name, value, ...others}) => {\n                        const prevValue = value;\n                        const nextDataPoint = findData({date: next.date, name});\n                        const nextValue = nextDataPoint ? nextDataPoint.value : 0;\n                        const sliceValue = prevValue + ((nextValue - prevValue) * i) / numOfSlice;\n                        return {\n                            name,\n                            value: sliceValue,\n                            ...others,\n                        };\n                    });\n                    result.push({\n                        date: sliceDate,\n                        data: sliceData,\n                    });\n                }\n            }\n            return result;\n        }, [])\n        .map(({date, data}) => {\n            return {\n                date,\n                data: data.sort((a, b) => b.value - a.value),\n            };\n        });\n    return keyframes;\n};\n\nexport {makeKeyframes};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { scaleLinear } from \"@vx/scale\";\nimport { AxisTop as VxAxisTop } from \"@vx/axis\";\n\nconst AxisTop = (props) => {\n    const {domainMax, xMax} = props;\n    const numTicks = xMax > 500 ? 5 : Math.floor(xMax / 100);\n    const xScaleForAxis = scaleLinear({\n        domain: [0, domainMax],\n        range: [0, xMax],\n    });\n    return (\n        <VxAxisTop\n            top={0}\n            left={0}\n            scale={xScaleForAxis}\n            tickLabelProps={() => ({textAnchor: 'middle', dy: '-0.25em', fontSize: 12})}\n            numTicks={numTicks}\n        />\n    );\n};\n\nAxisTop.propTypes = {\n    domainMax: PropTypes.number.isRequired,\n    xMax: PropTypes.number.isRequired,\n};\n\nexport default AxisTop;\n","import React, { forwardRef, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { animated, useSpring } from \"react-spring\";\nimport AxisTop from \"./AxisTop\";\n\nconst AnimatedAxisTop = animated(AxisTop);\n\nconst RacingAxisTop = forwardRef(({domainMax, xMax}, ref) => {\n    const prevDomainMaxRef = useRef(domainMax);\n    const prevDomainMax = prevDomainMaxRef.current;\n    const springProps = useSpring({\n        from: {domainMax: prevDomainMax},\n        to: {domainMax},\n        ref,\n    });\n    return <AnimatedAxisTop xMax={xMax} {...springProps} />;\n});\n\nRacingAxisTop.propTypes = {\n    domainMax: PropTypes.number.isRequired,\n    xMax: PropTypes.number.isRequired,\n};\n\nexport default RacingAxisTop;\n","import React from \"react\";\n\nconst Bar = ({color, x, y, width, height, name, value}) => {\n    return (\n        <g transform={`translate(${x} ${y})`}>\n            <rect x={0} y={0} width={width} height={height} fill={color} style={{opacity: 0.8}} />\n            <text dominantBaseline=\"middle\" x={width + 5} y={height / 2} textAnchor=\"start\" className='text-xs'>\n                {value}\n            </text>\n            <text dominantBaseline=\"middle\" x={ - 5} y={height / 2} textAnchor=\"end\" fontSize={10} className='text-2xs font-bold'>\n                {name}\n            </text>\n        </g>\n    );\n};\n\nexport default Bar;\n","import React, { forwardRef } from \"react\";\nimport { animated, useTransition } from \"react-spring\";\nimport Bar from \"./Bar\";\n\nconst AnimatedBar = animated(Bar);\n\nconst RacingBarGroup = forwardRef(({frameData, xScale, yScale, colorScale}, ref) => {\n    const transitions = useTransition(\n        frameData.map(({name, value}, idx) => ({\n            y: yScale(idx),\n            width: xScale(value),\n            value,\n            name,\n        })),\n        (d) => d.name,\n        {\n            initial: (d) => d,\n            from: {y: yScale.range()[1] + 50, width: 0, value: 0},\n            leave: {y: yScale.range()[1] + 50, width: 0, value: 0},\n            enter: (d) => d,\n            update: (d) => d,\n            unique: true,\n            ref,\n        }\n    );\n\n    return transitions.map(({item, props}) => {\n        const {y, value, width} = props;\n        const {name} = item;\n        return (\n            <AnimatedBar\n                x={xScale(0)}\n                y={y}\n                width={width}\n                height={yScale.bandwidth()}\n                color={colorScale(name)}\n                value={value.interpolate((v) => v.toFixed())}\n                name={name}\n                key={name}\n            />\n        );\n    });\n});\n\nexport default RacingBarGroup;\n","export const COLOR_ARRAY1 = [\n    '#f44336',\n    '#E91E63',\n    '#9C27B0',\n    '#673AB7',\n    '#3F51B5',\n    '#2196F3',\n    '#03A9F4',\n    '#00BCD4',\n    '#009688',\n    '#4CAF50',\n    '#8BC34A',\n    '#CDDC39',\n    '#FFEB3B',\n    '#FFC107',\n    '#FF9800',\n    '#FF5722',\n    '#795548',\n    '#9E9E9E',\n    '#607D8B',\n];\n\nexport const COLOR_ARRAY2 = [\n    '#00b8aa',\n    '#374649',\n    '#fd615d',\n    '#f2c80e',\n    '#5f6a6d',\n    '#8ad4eb',\n    '#a66999',\n    '#795548',\n    '#455A64',\n    '#9C27B0',\n];\n\nexport const COLOR_ARRAY3 = [\n    '#d32f2f',\n    '#C2185B',\n    '#7B1FA2',\n    '#512DA8',\n    '#303F9F',\n    '#1976D2',\n    '#0288D1',\n    '#0097A7',\n    '#00796B',\n    '#388E3C',\n    '#689F38',\n    '#AFB42B',\n    '#FBC02D',\n    '#FFA000',\n    '#F57C00',\n    '#E64A19',\n    '#5D4037',\n    '#616161',\n    '#455A64',\n    ...COLOR_ARRAY2,\n];\n","import React, { useEffect, useImperativeHandle, useLayoutEffect, useMemo, useRef, useState } from \"react\";\nimport { scaleBand, scaleLinear, scaleOrdinal } from \"@vx/scale\";\nimport { Group } from \"@vx/group\";\nimport RacingAxisTop from \"./RacingAxisTop\";\nimport RacingBarGroup from \"./RacingBarGroup\";\nimport { getStyle } from \"../../utils/common-utils\";\nimport { COLOR_ARRAY3 } from \"../../constants/colors\";\n\nconst RacingBarChart = React.forwardRef(({parentRef, keyframes, categories, onStart, onStop}, ref) => {\n    const [{frameIdx, animationKey, playing}, setAnimation] = useState({\n        frameIdx: 0,\n        animationKey: 0,\n        playing: false,\n    });\n    const updateFrameRef = useRef();\n    // when replay, increment the key to rerender the chart.\n    useEffect(() => {\n        if (!updateFrameRef.current && playing) {\n            updateFrameRef.current = setTimeout(() => {\n                setAnimation(({frameIdx: prevFrameIdx, playing, ...others}) => {\n                    const isLastFrame = prevFrameIdx === keyframes.length - 1;\n                    const nextFrameIdx = isLastFrame ? prevFrameIdx : prevFrameIdx + 1;\n                    return {\n                        ...others,\n                        frameIdx: playing ? nextFrameIdx : prevFrameIdx,\n                        playing: !!(playing && !isLastFrame),\n                    };\n                });\n                updateFrameRef.current = null;\n            }, 250);\n        }\n    });\n\n    const [chartDimension, setChartDimension] = useState({width: 0, height: 0});\n\n    useEffect(() => {\n        if (parentRef.current) {\n            setChartDimension({\n                width: getStyle(parentRef.current, 'width'),\n                height: getStyle(parentRef.current, 'height'),\n            });\n        }\n    }, [parentRef]);\n\n    let numOfBars = 10,\n        width = chartDimension.width,\n        height = chartDimension.height,\n        margin = {\n            top: 30,\n            right: 60,\n            bottom: 10,\n            left: 110,\n        },\n        colorScale = scaleOrdinal(COLOR_ARRAY3).domain(categories).range(COLOR_ARRAY3);\n\n    const barGroupRef = useRef();\n    const axisRef = useRef();\n    useImperativeHandle(ref, () => ({\n        replay: () => {\n            clearTimeout(updateFrameRef.current);\n            updateFrameRef.current = null;\n            setAnimation(({animationKey, ...others}) => ({\n                ...others,\n                frameIdx: 0,\n                animationKey: animationKey + 1,\n                playing: true,\n            }));\n        },\n        start: () => {\n            setAnimation((animation) => ({\n                ...animation,\n                playing: true,\n            }));\n        },\n        stop: () => {\n            setAnimation((animation) => ({\n                ...animation,\n                playing: false,\n            }));\n            barGroupRef.current.stop();\n            axisRef.current.stop();\n        },\n        playing,\n    }));\n    const prevPlayingRef = useRef(playing);\n\n    useEffect(() => {\n        if (prevPlayingRef.current !== playing) {\n            if (playing) {\n                onStart();\n            } else {\n                onStop();\n            }\n        }\n        prevPlayingRef.current = playing;\n    }, [onStart, onStop, playing]);\n\n    useLayoutEffect(() => {\n        if (barGroupRef.current) {\n            if (playing) {\n                barGroupRef.current.start();\n                axisRef.current.start();\n            }\n        }\n    });\n    const frame = keyframes[frameIdx];\n    const {date: currentDate, data: frameData} = frame;\n    const values = frameData.map(({value}) => value);\n    const xMax = width - margin.left - margin.right;\n    const yMax = height - margin.top - margin.bottom;\n    const domainMax = Math.max(...values);\n    const xScale = scaleLinear({\n        domain: [0, domainMax],\n        range: [0, xMax],\n    });\n    const yScale = useMemo(\n        () =>\n            scaleBand({\n                domain: Array(numOfBars)\n                    .fill(0)\n                    .map((_, idx) => idx),\n                range: [0, yMax],\n                padding: 0.1,\n            }),\n        [numOfBars, yMax]\n    );\n\n    const monthNames = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ];\n    let dateObj = currentDate;\n    let month = monthNames[dateObj.getMonth()];\n    let day = String(dateObj.getDate()).padStart(2, '0');\n    let year = dateObj.getFullYear();\n\n    let dateInYear = month + '\\n' + day + ',' + year;\n\n    return (\n        parentRef.current && (\n            <svg width={width} height={height} className='race-bar-svg'>\n                <Group top={margin.top} left={margin.left} key={animationKey}>\n                    <RacingBarGroup\n                        frameData={frameData.slice(0, numOfBars)}\n                        xScale={xScale}\n                        yScale={yScale}\n                        colorScale={colorScale}\n                        ref={barGroupRef}\n                    />\n                    <text textAnchor=\"end\" x={xMax + margin.right - 10} y={yMax} className='md:text-2xl text-xl'>\n                        {dateInYear}\n                    </text>\n                    <line x1={0} y1={0} x2={0} y2={yMax} stroke=\"black\" />\n                    <RacingAxisTop domainMax={domainMax} xMax={xMax} ref={axisRef} />\n                </Group>\n            </svg>\n        )\n    );\n});\n\nRacingBarChart.defaultProps = {\n    width: 600,\n    height: 450,\n    margin: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 100,\n    },\n};\n\nexport default RacingBarChart;\n","export const STATE_CODES = {\n    AP: 'Andhra Pradesh',\n    AR: 'Arunachal Pradesh',\n    AS: 'Assam',\n    BR: 'Bihar',\n    CT: 'Chhattisgarh',\n    GA: 'Goa',\n    GJ: 'Gujarat',\n    HR: 'Haryana',\n    HP: 'Himachal Pradesh',\n    JH: 'Jharkhand',\n    KA: 'Karnataka',\n    KL: 'Kerala',\n    MP: 'Madhya Pradesh',\n    MH: 'Maharashtra',\n    MN: 'Manipur',\n    ML: 'Meghalaya',\n    MZ: 'Mizoram',\n    NL: 'Nagaland',\n    OR: 'Odisha',\n    PB: 'Punjab',\n    RJ: 'Rajasthan',\n    SK: 'Sikkim',\n    TN: 'Tamil Nadu',\n    TG: 'Telangana',\n    TR: 'Tripura',\n    UT: 'Uttarakhand',\n    UP: 'Uttar Pradesh',\n    WB: 'West Bengal',\n    AN: 'Andaman and Nicobar',\n    CH: 'Chandigarh',\n    DN: 'Dadra and Nagar Haveli',\n    DD: 'Daman and Diu',\n    DL: 'Delhi',\n    JK: 'Jammu and Kashmir',\n    LA: 'Ladakh',\n    LD: 'Lakshadweep',\n    PY: 'Puducherry',\n};\n","import React from 'react';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport {Button} from '@material-ui/core';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport FacebookIcon from '@material-ui/icons/Facebook';\n/**\n *\n * @return {*}\n * @constructor\n */\n\nfunction SocialCard({github, twitter, facebook}) {\n    return (\n        <React.Fragment>\n            <a\n                href=\"https://github.com/abdul-alim/covid19-india\"\n                rel=\"noopener\"\n                target=\"_blank\"\n                className={`block my-2 ${github ? '' : 'hidden'}`}\n            >\n                <Button\n                    className=\"text-white\"\n                    startIcon={<GitHubIcon size=\"small\" />}\n                    style={{\n                        fontSize: '11px',\n                        color: 'white',\n                        backgroundColor: '#333',\n                        fontWeight: 'bold',\n                        padding: '0.4rem 0.8rem',\n                        textTransform: 'capitalize',\n                    }}\n                >\n                    View on Github\n                </Button>\n            </a>\n            <a\n                href=\"https://twitter.com/trackcovid19in\"\n                rel=\"noopener\"\n                className={`my-2 block ${twitter ? '' : 'hidden'}`}\n                target=\"_blank\"\n            >\n                <Button\n                    startIcon={<TwitterIcon size=\"small\" />}\n                    style={{\n                        fontSize: '11px',\n                        color: 'rgb(0, 123, 255)',\n                        backgroundColor: 'rgb(206, 229, 255)',\n                        fontWeight: 'bold',\n                        padding: '0.4rem 0.8rem',\n                        textTransform: 'capitalize',\n                    }}\n                >\n                    View Updates on Twitter\n                </Button>\n            </a>\n            <a\n                href=\"https://www.facebook.com/trackcovid19.in/\"\n                rel=\"noopener\"\n                className={`my-2 block ${facebook ? '' : 'hidden'}`}\n                target=\"_blank\"\n            >\n                <Button\n                    startIcon={<FacebookIcon size=\"small\" />}\n                    style={{\n                        fontSize: '11px',\n                        color: 'white',\n                        backgroundColor: '#4267b2',\n                        fontWeight: 'bold',\n                        padding: '0.4rem 0.8rem',\n                        textTransform: 'capitalize',\n                    }}\n                >\n                    View Updates on Facebook\n                </Button>\n            </a>\n        </React.Fragment>\n    );\n}\n\nexport default SocialCard;\n","import React from 'react';\nimport SocialCard from './social';\n\nfunction Footer() {\n    return (\n        <footer className=\"flex justify-center my-10 flex-col items-center\">\n            <SocialCard github={true} facebook={true} twitter={true} />\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React, {useEffect, useRef, useState} from 'react';\nimport DisplayCard from './display-card';\nimport axios from 'axios';\nimport Table from './table';\nimport Map from './Map';\nimport {POPULATION, PUPULATION_SOURCE} from '../constants/population';\nimport {getFormattedTestingData} from '../utils/format-test';\nimport Chart from './Chart';\nimport {dailyTrend} from '../charts/daily';\nimport {\n    clone,\n    IS_MOBILE_DEVICE,\n    IS_SINGLE_COLUMN,\n    isTouchDevice,\n    shareTheApp,\n    timeDifference,\n    toCapitalize,\n    toFixedNumber,\n    animationDelay,\n} from '../utils/common-utils';\nimport TrendGraph from './trend-chart';\nimport {useHistory} from 'react-router-dom';\nimport {Helmet} from 'react-helmet';\nimport {Button} from '@material-ui/core';\nimport ShareIcon from '@material-ui/icons/Share';\nimport MetaCard from './meta-card';\nimport NewsCard from './news-card';\nimport {makeKeyframes} from './race-bar/useKeyframes';\nimport RacingBarChart from './race-bar/RacingBarChart';\nimport {STATE_CODES} from '../constants/state-code';\nimport {COLOR_ARRAY1} from '../constants/colors';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport IconButton from '@material-ui/core/IconButton';\nimport Footer from './footer';\nimport SocialCard from './social';\n\nconst d3 = window.d3;\nconst IS_DESKTOP = !IS_MOBILE_DEVICE;\n\nfunction Home({}) {\n    const [fetched, setFetched] = useState(false);\n    const [data, setData] = useState({});\n    const [tableData, setTableData] = useState({rows: [], columns: []});\n    const [mapInitData, setMapInitData] = useState({});\n    const [testingData, setTestingData] = useState({});\n    const [metaCardPopulation, setMetaCardPopulation] = useState({});\n    const [stateDataMapped, setStateDataMapped] = useState({});\n    const [dailyChart, setDailyChart] = useState(null);\n    const [stateStackedChart, setStateStackedChart] = useState({});\n    const [deathTrendChart, setDeathTrendChart] = useState({});\n    const [deathTrendTotalChart, setDeathTrendTotalChart] = useState({});\n    const [recoveryTrendChart, setRecoveryTrendChart] = useState({});\n    const [growthRateChart, setGrowthRateChart] = useState({});\n    const [stateCases, setStateCases] = useState({});\n    const [wordcloudChart, setWordcloudChart] = useState({});\n    const [percentChart, setPercentChart] = useState({});\n    const history = useHistory();\n    const childRef = useRef();\n    const [chartStore, updateChartStore] = useState({});\n    const [lastUpdated, setLastUpdated] = useState('-');\n    const [caseHistory, setCaseHistory] = useState({});\n    const [spinner, setSpinner] = useState(true);\n    const [articles, setArticles] = useState(true);\n    const [keyframes, setKeyFrames] = useState([]);\n\n    const getCards = (total = {}, today = {}) => {\n        return [\n            {\n                name: 'Confirmed',\n                value: total.confirmed,\n                delta: today.confirmed,\n                colorClass: 'red',\n            },\n            {\n                name: 'Active',\n                value: total.active,\n                delta: today.active,\n                colorClass: 'orange',\n            },\n            {\n                name: 'Recovered',\n                value: total.recovered,\n                delta: today.recovered,\n                colorClass: 'green',\n            },\n            {\n                name: 'Dead',\n                value: total.dead,\n                delta: today.dead,\n                colorClass: 'gray',\n            },\n        ];\n    };\n\n    const [displayCards, setDisplayCards] = useState(getCards());\n    const [stateData, setStateData] = useState([]);\n\n    useEffect(() => {\n        if (fetched === false) {\n            getData();\n        }\n    }, [fetched]);\n    \n    async function fetchData(URL) {\n        return axios\n          .get(URL)\n          .then(async function(response) {\n              return response\n          })\n          .catch(function(error) {\n              return { success: false, data: null };\n          });\n    }\n\n    const getData = async () => {\n        try {\n            \n            let urls = [\n                'https://api.track-covid19.in/reports_v2.json',\n                'https://api.track-covid19.in/history.json',\n                '/charts/daily.json',\n                '/charts/states.json',\n                '/charts/percent-chart.json',\n                'https://jsonstorage.net/api/items/72baa701-75d5-4069-89f3-573c4a4bb3e3',\n                'https://api.track-covid19.in/tests.json'\n            ]\n            \n            let [\n                {data: reports},\n                {\n                    data: {india: indiaHistory, state: stateHistory},\n                },\n                {data: dailyChart},\n                {data: stateBar},\n                {data: percentChartJson},\n                {data: news},\n                {data: tests},\n            ] = await Promise.all(urls.map(fetchData));\n    \n            if (!news) {\n                news = {\n                    headlines :{\n                        articles:[]\n                    },\n                    news: {\n                        articles: []\n                    }\n                }\n            }\n\n            setSpinner(false);\n            setData(reports);\n            setCaseHistory({india: indiaHistory, state: stateHistory});\n            setArticles(news);\n\n            // time updated\n            {\n                // 10/05/2020 14:34:22\n                let parseTime = d3.timeParse('%d/%m/%Y %H:%M:%S');\n                let updatedTime = parseTime(reports.updatedTime);\n\n                setLastUpdated(\n                    `${timeDifference(new Date(), updatedTime)} - ${d3.timeFormat('%B %d, %I:%M %p')(\n                        new Date(updatedTime)\n                    )}`\n                );\n            }\n\n            // set the testing value temporary\n            for (var stateCode in reports.states) {\n                if (reports.states.hasOwnProperty(stateCode)) {\n                    if (tests.states[stateCode]) {\n                        let stateTestHistory = tests.states[stateCode];\n                        reports.states[stateCode].testing_data = stateTestHistory[stateTestHistory.length - 1];\n                    }\n                }\n            }\n\n            let totalPopulation = d3.sum(Object.values(POPULATION));\n\n            let testingData = getFormattedTestingData(reports.testing_data_imcr, totalPopulation, 'Total');\n            setTestingData(testingData);\n            setMetaCardPopulation({...testingData});\n\n            setDisplayCards(getCards(reports, reports.today));\n\n            let mapInitData = {\n                confirmed: reports.confirmed,\n                active: reports.active,\n                recovered: reports.recovered,\n                dead: reports.dead,\n                name: 'India',\n                today: reports.today,\n            };\n            setMapInitData(mapInitData);\n\n            let tableData = Object.values(reports.states); //.filter(row => row.confirmed > 0);\n            setStateData(tableData);\n\n            // s\n            let t = {};\n            tableData.forEach((state) => {\n                t[state.name] = state;\n            });\n            setStateDataMapped(t);\n\n            setTableData({\n                rows: tableData,\n                columns: [\n                    {name: 'state/UT', accessor: 'name'},\n                    {\n                        name: IS_MOBILE_DEVICE ? 'cnfmd' : 'confirmed',\n                        accessor: 'confirmed',\n                        colorClass: 'red',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'actv' : 'active',\n                        accessor: 'active',\n                        colorClass: 'orange',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'Rcvrd' : 'recovered',\n                        accessor: 'recovered',\n                        colorClass: 'green',\n                    },\n                    {\n                        name: 'dead',\n                        accessor: 'dead',\n                        colorClass: 'gray',\n                    },\n                ],\n            });\n\n            // daily trend\n            setDailyChart(dailyChart);\n\n            // sort the st\n\n            let states = Object.values(reports.states).filter(\n                (state) => state.confirmed > 50 && state.stateCode !== 'UN'\n            );\n\n            // set the factors\n            states.forEach((state) => {\n                state.deathRateByRecovery = toFixedNumber((state.dead / (state.recovered + state.dead)) * 100, 2);\n                state.deathRateByTotal = toFixedNumber((state.dead / state.confirmed) * 100, 2);\n                state.recoveryRateByTotal = toFixedNumber((state.recovered / state.confirmed) * 100, 2);\n            });\n\n            // *************************************************************************** //\n\n            // stacked chart\n            states.sort(function (a, b) {\n                return d3.descending(a.confirmed, b.confirmed);\n            });\n\n            let barSeriesNames = ['confirmed', 'recovered', 'dead'],\n                stateBarSeries = dailyTrend(states, 'name', barSeriesNames),\n                stateBarStacked = clone(stateBar);\n\n            stateBarSeries.forEach((series, i) => {\n                stateBarStacked.seriesdata.chartdata[i] = {data: series, seriesname: toCapitalize(barSeriesNames[i])};\n            });\n            setStateStackedChart(stateBarStacked);\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.deathRateByRecovery, b.deathRateByRecovery);\n                });\n\n                let lineSeriesColumns = ['confirmed', 'recovered', 'dead', 'deathRateByRecovery'],\n                    lineSeriesNames = ['confirmed', 'recovered', 'dead', 'Death Ratio'],\n                    stateBarSeriesLine = dailyTrend(states, 'name', lineSeriesColumns),\n                    deathTrendChart = clone(stateBar);\n\n                deathTrendChart.canvas.title.text = 'Death Ratio By Total Recoveries';\n                deathTrendChart.canvas.subtitle = {text: 'Death Ratio = Deaths / (Deaths + Recoveries)', show: true};\n                deathTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                deathTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                stateBarSeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames[i]),\n                    };\n                    if (i === stateBarSeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = 'rgb(171, 16, 23)';\n                    }\n                    deathTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setDeathTrendChart(deathTrendChart);\n            }\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.deathRateByTotal, b.deathRateByTotal);\n                });\n\n                let lineSeriesColumns = ['confirmed', 'recovered', 'dead', 'deathRateByTotal'],\n                    lineSeriesNames = ['confirmed', 'recovered', 'dead', 'death rate'],\n                    stateBarSeriesLine = dailyTrend(states, 'name', lineSeriesColumns),\n                    deathTrendChart = clone(stateBar);\n\n                deathTrendChart.canvas.title.text = 'Death Ratio By Total Confirmed';\n                deathTrendChart.canvas.subtitle = {text: 'Death Ratio = Deaths / (Deaths + Recoveries)', show: false};\n                deathTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                deathTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                stateBarSeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames[i]),\n                    };\n                    if (i === stateBarSeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = 'rgb(171, 16, 23)';\n                    }\n                    deathTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setDeathTrendTotalChart(deathTrendChart);\n            }\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.recoveryRateByTotal, b.recoveryRateByTotal);\n                });\n\n                let lineSeriesColumns1 = ['confirmed', 'recovered', 'dead', 'recoveryRateByTotal'],\n                    lineSeriesNames1 = ['confirmed', 'recovered', 'dead', 'recovery rate'],\n                    recoverySeriesLine = dailyTrend(states, 'name', lineSeriesColumns1),\n                    recoveryTrendChart = clone(stateBar);\n\n                recoveryTrendChart.canvas.title.text = 'Recovery Ratio By Total Infected';\n                recoveryTrendChart.canvas.subtitle = {text: 'States With  > 50 Confirmed Cases', show: true};\n                recoveryTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                recoveryTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                recoverySeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames1[i]),\n                    };\n                    if (i === recoverySeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = '#00897B';\n                    }\n                    recoveryTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setRecoveryTrendChart(recoveryTrendChart);\n            }\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.confirmed, b.confirmed);\n                });\n\n                var parseTime = d3.timeParse('%b %d, %Y');\n                let march1 = new Date(2020, 1, 29);\n\n                let data = states.slice(0, 15).map((state) => {\n                    let history = stateHistory[state.stateCode].filter((row) => {\n                        return parseTime(row.date) > march1;\n                    });\n\n                    let data = dailyTrend(history, 'date', ['confirmed'], true)[0];\n\n                    return {\n                        seriesname: state.name,\n                        type: 'line',\n                        data: data,\n                    };\n                });\n                let stateCasesChart = clone(dailyChart);\n                stateCasesChart.legend.colors = COLOR_ARRAY1;\n                stateCasesChart.canvas.title.text = 'Total Confirmed Cases By States';\n                data.forEach((s, i) => {\n                    stateCasesChart.seriesdata.chartdata[i] = s;\n                });\n                setStateCases(stateCasesChart);\n            }\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.confirmed, b.confirmed);\n                });\n\n                let data = states.slice(0, 20).map((state) => {\n                    let data = dailyTrend(stateHistory[state.stateCode], '$index', ['confirmed'], true)[0];\n                    return {\n                        seriesname: state.name,\n                        type: 'line',\n                        data: data,\n                    };\n                });\n\n                let stateCasesChartLog = clone(dailyChart);\n                stateCasesChartLog.legend.colors = COLOR_ARRAY1;\n                data.forEach((s, i) => {\n                    stateCasesChartLog.seriesdata.chartdata[i] = s;\n                });\n                stateCasesChartLog.chart.axes.xaxis.threshold = {};\n                stateCasesChartLog.chart.axes.xaxis.tickCount = 5;\n                stateCasesChartLog.chart.axes.xaxis.label = {\n                    text: 'No. Of Days Since 1st Confirmed Case',\n                };\n                stateCasesChartLog.chart.axes.xaxis.ticklabel.alignMode = 'rotate(45)';\n                stateCasesChartLog.metadata.columns[0] = {\n                    datatype: 'numeric',\n                    columnname: 'Day',\n                    dataindex: 0,\n                    numeric: {\n                        axisformat: {\n                            prefix: 'Day ',\n                        },\n                    },\n                };\n                stateCasesChartLog.chart.axes.yaxis[0].scaleType = 'log';\n                stateCasesChartLog.legend.colors = COLOR_ARRAY1;\n                stateCasesChartLog.canvas.title.text = 'Statewise Growth trend';\n                stateCasesChartLog.canvas.subtitle = {text: 'Top 20 States', show: true};\n\n                setGrowthRateChart(stateCasesChartLog);\n            }\n\n            {\n                let wordcloudSeries = dailyTrend(Object.values(reports.states), 'name', ['confirmed']),\n                    wordCloudChart = clone(stateBar);\n\n                wordCloudChart.canvas.title.text = 'Word Cloud of Affected States and UTs';\n                wordCloudChart.chart.axes.yaxis[0].label.text = 'Total';\n                wordCloudChart.seriesdata.chartdata[0] = {\n                    type: 'wordcloud',\n                    data: wordcloudSeries,\n                    seriesname: 'Confirmed',\n                };\n                wordCloudChart.legend.colors = ['#E91E63'];\n                wordCloudChart.legend.enabled = false;\n                wordCloudChart.chart.plot.plotoptions.wordcloud = {\n                    minSize: '2.5%',\n                    maxSize: '15%',\n                    legendHighlightEffect: {\n                        selectedSeries: 'invert',\n                    },\n                };\n                setWordcloudChart(wordCloudChart);\n            }\n\n            {\n                percentChartJson.seriesdata.chartdata[0] = {\n                    type: 'pie',\n                    data: [\n                        ['Active', reports.active],\n                        ['Recovered', reports.recovered],\n                        ['dead', reports.dead],\n                    ],\n                };\n                setPercentChart(percentChartJson);\n            }\n\n            {\n                // build rave bar data\n                Object.entries(stateHistory).forEach(([key, value]) => {\n                    let last = 0;\n                    value.forEach((entry) => {\n                        entry.name = STATE_CODES[key];\n                        entry.value = entry.confirmed + last;\n                        last = entry.value;\n                    });\n                });\n\n                let all = Object.values(stateHistory)\n                    .flat()\n                    .filter((d) => d.name !== undefined);\n\n                all.sort(function (a, b) {\n                    return d3.ascending(new Date(a.date), new Date(b.date));\n                });\n                all = all.slice(90, all.length);\n                const keyframes = makeKeyframes(all, 3);\n                setKeyFrames(keyframes);\n            }\n\n            //\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    function callbackMap(point) {\n        // setStateDataMapped\n        let state = stateDataMapped[point.name],\n            totalPopulation = POPULATION[state.stateCode];\n        let testingData = getFormattedTestingData(state.testing_data, totalPopulation, state.name);\n        setTestingData(testingData);\n    }\n\n    function goToStatePage(event, {point}) {\n        let stateCode = tableData.rows.find((row) => row.name === point[0]).stateCode;\n        history.push('/state/' + stateCode);\n    }\n\n    let last = null;\n    function tapCallback(event, data, mapInstance) {\n        // console.log(data.point[0])\n        // fix for tapping same data twice\n        let mouse = d3.mouse(mapInstance.container.node());\n        let latLong = mapInstance.geo.utils.projection.invert(mouse);\n        let point = mapInstance.rendererArrangedReveresd[0].getPoint(latLong, mouse, 0);\n\n        if (data.point[0] === last && point) {\n            return goToStatePage(event, data);\n        }\n\n        last = data.point[0];\n        window.d3.event.allowDefault = true;\n    }\n\n    /**\n     *\n     * @param chart\n     * @param name\n     */\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    function getMapAndTable() {\n        return (\n            <React.Fragment>\n                <div className=\"font-bold my-8 text-center text-gray-700 opacity-0 fade-in\" style={animationDelay(2)}>\n                    <h1 className=\"text-2xl font-extra-bold\">Live Covid-19 Case Map - India</h1>\n                    <h2 className=\"text-xs\">\n                        {isTouchDevice() ? 'Tap/Double Tap' : 'Hover/Click'} on the map for more information\n                    </h2>\n                </div>\n                <div className=\"flex justify-between fade-in my-6\" style={animationDelay(2)}>\n                    <div className=\"text-blue-600 items-center justify-center\">\n                        <div className=\"text-xs py-1\">\n                            Tested <span className=\"font-bold\">{testingData.label}</span>\n                        </div>\n                        <div className=\"text-xl font-bold\">{testingData.tested}</div>\n                        {testingData.date}\n                    </div>\n                    <div className=\"text-blue-600 items-center justify-center text-right\">\n                        <div className=\"text-xs py-1\">\n                            Population{' '}\n                            <a rel=\"noopener\" target=\"_blank\" className=\"bg-blue-100\" href={PUPULATION_SOURCE}>\n                                2019\n                            </a>\n                        </div>\n                        <div className=\"text-sm font-bold\">{testingData.population}</div>\n                        <div className=\"text-sm font-bold\">{testingData.test_per_million} tests / million people</div>\n                    </div>\n                </div>\n\n                <div className=\"fade-in\" style={animationDelay(4)}>\n                    <Map\n                        initCardData={mapInitData}\n                        seriesPoints={stateData}\n                        stateCode={'IND'}\n                        joinBy={'name'}\n                        data={tableData}\n                        cards={['confirmed', 'active', 'recovered', 'dead']}\n                        callback={callbackMap}\n                        clickCallback={goToStatePage}\n                        tapCallback={tapCallback}\n                    />\n                </div>\n\n                <div className=\"w-full my-6 fade-in\" style={animationDelay(6)}>\n                    {fetched && <Table rows={tableData.rows} columns={tableData.columns} link={true} />}\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    //*****************************\n\n    // race bar chart handle\n    let stateCodes = Object.values(STATE_CODES);\n    const chartRef = React.useRef();\n    const handleReplay = () => {\n        chartRef.current.replay();\n    };\n    const handleStart = () => {\n        chartRef.current.start();\n    };\n    const handleStop = () => {\n        chartRef.current.stop();\n    };\n    const playing = chartRef.current ? chartRef.current.playing : false;\n    const [_, forceUpdate] = useState();\n    let parentRef = useRef(null);\n\n    return (\n        <React.Fragment>\n            <Helmet>\n                <title>Coronavirus Outbreak in India - track-covid19.in</title>\n                <meta name=\"title\" content=\"Coronavirus Outbreak in India}: Latest Map and Case Count\" />\n                <meta\n                    name=\"description\"\n                    content={`Live statistics of Coronavirus (COVID-19) in India. Track the confirmed cases, recovered patients, and death toll of India due to the COVID-19 coronavirus.`}\n                />\n            </Helmet>\n            <div className=\"container\">\n                {spinner && (\n                    <div\n                        className=\"flex items-center justify-center fixed h-screen w-full z-10\"\n                        style={{left: 0, top: 0}}\n                    >\n                        <div className=\"lds-dual-ring\"></div>\n                    </div>\n                )}\n                {fetched && (\n                    <div className=\"opacity-0 my-8 fade-in\">\n                        <div className=\"flex flex-wrap justify-center\">\n                            <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                                <div className=\"flex justify-between font-bold items-center my-4\">\n                                    <SocialCard github={true} />\n                                </div>\n                                <div className=\"flex justify-between text-primary font-bold items-center my-2\">\n                                    <div className=\"flex\">\n                                        <Button\n                                            onClick={shareTheApp}\n                                            color=\"primary\"\n                                            className=\"bg-primary\"\n                                            endIcon={<ShareIcon />}\n                                        >\n                                            Share\n                                        </Button>\n                                    </div>\n                                    <div className=\"text-right text-xs mb-2\">\n                                        <h2 className=\"\">Last Updated</h2>\n                                        <h2 id=\"lastUpdated\" className=\"capitalize\">\n                                            {lastUpdated}\n                                        </h2>\n                                    </div>\n                                </div>\n\n                                <div className=\"w-full fade-in mb-4\" style={animationDelay(1)}>\n                                    <DisplayCard ref={childRef} cards={displayCards} count={2000} />\n                                </div>\n\n                                <div className=\"w-full fade-in mb-4 border\" style={animationDelay(2)}>\n                                    <TrendGraph chartJson={dailyChart} history={caseHistory.india} />\n                                </div>\n\n                                {IS_SINGLE_COLUMN && getMapAndTable()}\n\n                                <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(4)}>\n                                    <Chart seriesData={stateCases} name=\"state_cases\" callback={chartCallback} />\n                                </div>\n\n                                <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(5)}>\n                                    <Chart seriesData={growthRateChart} name=\"growth\" callback={chartCallback} />\n                                </div>\n\n                                <div\n                                    className=\"w-full fade-in md:w-40 mb-4 percent-chart border\"\n                                    style={animationDelay(6)}\n                                >\n                                    <Chart seriesData={percentChart} name=\"percent\" callback={chartCallback} />\n                                </div>\n\n                                <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(7)}>\n                                    <Chart seriesData={wordcloudChart} name=\"wordcloud\" callback={chartCallback} />\n                                </div>\n\n                                <div className=\"w-full fade-in mb-4 border\" style={animationDelay(2)}>\n                                    <h2 className=\"ml-3 mt-4\">Animation Of Top 10 States By Total Confirmed Cases</h2>\n                                    <h2 className=\"ml-3 my-0 text-sm text-gray-400 mb-2 subtitle-color\">\n                                        Click the play button to animate the chart\n                                    </h2>\n                                    <div className=\"race-bar\" ref={parentRef}>\n                                        <RacingBarChart\n                                            keyframes={keyframes}\n                                            onStart={() => forceUpdate(true)}\n                                            onStop={() => forceUpdate(false)}\n                                            ref={chartRef}\n                                            parentRef={parentRef}\n                                            categories={stateCodes}\n                                        />\n                                    </div>\n                                    <div style={{marginLeft: 100}} className=\"my-2\">\n                                        <IconButton aria-label=\"replay\" size=\"small\" onClick={handleReplay}>\n                                            <ReplayIcon />\n                                        </IconButton>\n                                        <IconButton onClick={playing ? handleStop : handleStart} size=\"small\">\n                                            {playing ? <PauseIcon /> : <PlayArrowIcon />}\n                                        </IconButton>\n                                    </div>\n                                </div>\n\n                                <div className=\"w-full fade-in\" style={animationDelay(3)}>\n                                    <MetaCard\n                                        history={caseHistory.india}\n                                        tests={metaCardPopulation}\n                                        report={{...mapInitData}}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"w-full md:w-40 md:mx-10\">\n                                {!IS_SINGLE_COLUMN && getMapAndTable()}\n\n                                <div className=\"w-full md:w-40 mb-4 state-bar border fade-in\" style={animationDelay(9)}>\n                                    <Chart seriesData={stateStackedChart} name=\"stacked\" callback={chartCallback} />\n                                </div>\n\n                                <div\n                                    className=\"w-full md:w-40 mb-4 state-bar border fade-in\"\n                                    style={animationDelay(11)}\n                                >\n                                    <Chart\n                                        seriesData={recoveryTrendChart}\n                                        name=\"recovery_trend\"\n                                        callback={chartCallback}\n                                    />\n                                </div>\n\n                                <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(8)}>\n                                    <Chart\n                                        seriesData={deathTrendTotalChart}\n                                        name=\"recovery_trend\"\n                                        callback={chartCallback}\n                                    />\n                                </div>\n\n                                <div\n                                    className=\"w-full md:w-40 mb-4 state-bar border fade-in\"\n                                    style={animationDelay(10)}\n                                >\n                                    <Chart seriesData={deathTrendChart} name=\"death_trend\" callback={chartCallback} />\n                                </div>\n                            </div>\n                            <div className=\"w-full md:w-40 md:mx-10 my-8\">\n                                <h2 className=\"border-l-2 border-primary text-primary font-bold p-2 uppercase text-xl\">\n                                    Top Headlines\n                                </h2>\n                                <NewsCard articles={articles.headlines.articles} />\n                            </div>\n                            <div className=\"w-full md:w-40 md:mx-10 my-8\">\n                                <h2 className=\"border-l-2 border-primary text-primary font-bold p-2 uppercase text-xl\">\n                                    Top News\n                                </h2>\n                                <NewsCard articles={articles.news.articles} />\n                            </div>\n                        </div>\n                        <Footer />\n                    </div>\n                )}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Helmet } from \"react-helmet\";\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction Helpline({}) {\n    const [fetched, setFetched] = useState(false);\n    const [helplines, setHelplines] = useState(false);\n\n    useEffect(() => {\n        if (fetched === false) {\n            getHelplines();\n        }\n    }, [fetched]);\n\n    const getHelplines = async () => {\n        try {\n            const [{data: helplines}] = await Promise.all([axios.get('data/helplines.json')]);\n            setHelplines(helplines);\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    /**\n     *\n     * @param value\n     * @param type\n     * @return {string|*}\n     */\n    const formatLinkType = (value, type) => {\n        if (type === 'phone') {\n            return `tel:${value}`;\n        } else if (type === 'whatsapp') {\n            return `whatsapp://send?phone=${value}`;\n        } else if (type === 'email') {\n            return `mailto:${type}`;\n        }\n        return value;\n    };\n\n    return (\n        <React.Fragment>\n            <Helmet>\n                <title>Helplines for Coronavirus Queries - track-covid19.in</title>\n                <meta name=\"title\" content=\"Helplines for Coronavirus Queries - track-covid19.in\" />\n            </Helmet>\n            <div className={'container px-4'} id=\"help-lines\">\n                {Object.keys(helplines).map((key, i) => {\n                    return (\n                        <div key={i}>\n                            <div className=\"fade-in border-l-2 border-primary text-primary font-bold p-2 uppercase my-2\">\n                                <span className=\"ml-1\">{key}</span>\n                            </div>\n                            <div className={'flex flex-wrap -mx-2'}>\n                                {helplines[key].map((helpline, j) => {\n                                    return (\n                                        <div\n                                            key={`${JSON.stringify(helpline)}`}\n                                            className={\n                                                'fade-in md:w-auto w-full shadow px-4 py-2 text-base mx-2 my-2 md:flex-basis-250'\n                                            }\n                                            style={{animationDelay: 30 * j + 'ms'}}\n                                        >\n                                            <div className=\"font-bold\">{helpline.name}</div>\n                                            <a\n                                                className=\"pr-2 underline text-blue-500\"\n                                                href={formatLinkType(helpline.number, helpline.type)}\n                                            >\n                                                {helpline.number}\n                                            </a>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Helpline;\n","import React, {useEffect, useRef, useState} from 'react';\nimport DisplayCard from './display-card';\nimport axios from 'axios';\nimport Table from './table';\nimport Map from './Map';\nimport {Link, useHistory, useParams} from 'react-router-dom';\nimport {STATE_CODES} from '../constants/state-code';\nimport {POPULATION, PUPULATION_SOURCE} from '../constants/population.js';\nimport {getFormattedTestingData} from '../utils/format-test';\nimport TrendGraph from './trend-chart';\nimport {animationDelay, clone, IS_MOBILE_DEVICE, shareTheApp, timeDifference} from '../utils/common-utils';\nimport Chart from './Chart';\nimport {Helmet} from 'react-helmet';\nimport {Button} from '@material-ui/core';\nimport ShareIcon from '@material-ui/icons/Share';\nimport MetaCard from './meta-card';\nimport {dailyTrend} from '../charts/daily';\nimport Footer from './footer';\n\nconst d3 = window.d3;\n\nfunction State({}) {\n    const [fetched, setFetched] = useState(false);\n    const [tableData, setTableData] = useState({rows: [], columns: []});\n    const [mapInitData, setMapInitData] = useState({});\n    const [testingData, setTestingData] = useState({});\n    const [spinner, setSpinner] = useState(true);\n    const childRef = useRef();\n\n    const {stateCode} = useParams();\n    const history = useHistory();\n\n    const stateName = STATE_CODES[stateCode];\n    const statesKeys = Object.keys(STATE_CODES);\n\n    // if (childRef.current) {\n    //     setInterval(function () {\n    //         childRef.current.updateDisplayCardCounts(Math.random());\n    //     }, 1000);\n    // }\n\n    const getCards = (total = {}, today = {}) => {\n        return [\n            {\n                name: 'Confirmed',\n                value: total.confirmed,\n                delta: today.confirmed,\n                colorClass: 'red',\n            },\n            {\n                name: 'Active',\n                value: total.active,\n                delta: today.active,\n                colorClass: 'orange',\n            },\n            {\n                name: 'Recovered',\n                value: total.recovered,\n                delta: today.recovered,\n                colorClass: 'green',\n            },\n            {\n                name: 'Dead',\n                value: total.dead,\n                delta: today.dead,\n                colorClass: 'gray',\n            },\n        ];\n    };\n\n    const [displayCards, setDisplayCards] = useState(getCards());\n    const [districtData, setDistrictData] = useState([]);\n    const [dailyChart, setDailyChart] = useState(null);\n    const [wordcloudChart, setWordcloudChart] = useState(null);\n    const [caseHistory, setCaseHistory] = useState(null);\n    const [chartStore, updateChartStore] = useState({});\n    const [percentChart, setPercentChart] = useState({});\n    const [updatedTime, setUpdatedTime] = useState();\n    const [zones, setZones] = useState();\n\n    useEffect(() => {\n        setFetched(false);\n        getData();\n    }, [stateCode]);\n\n    const getData = async () => {\n        try {\n            let [\n                {data: district_data},\n                {data: state_data},\n                {\n                    data: {state: history},\n                },\n                // {data: zonesV2},\n                {data: dailyChart},\n                {data: percentChartJson},\n                {data: tests},\n                {data: stateBar},\n            ] = await Promise.all([\n                axios.get('https://api.track-covid19.in/district_v2.json'),\n                axios.get('https://api.track-covid19.in/reports_v2.json'),\n                axios.get('https://api.track-covid19.in/history.json'),\n                // axios.get('https://api.track-covid19.in/zones.json'),\n                axios.get('/charts/daily.json'),\n                axios.get('/charts/percent-chart.json'),\n                axios.get('https://api.track-covid19.in/tests.json'),\n                axios.get('/charts/states.json'),\n            ]);\n\n            // hide spinner\n            setSpinner(false);\n\n            let districtInfo = district_data[stateCode];\n            let stateInfo = state_data.states[stateCode];\n            let stateTestHistory = tests.states[stateCode],\n                testing_data = stateInfo.testing_data;\n\n            if (stateTestHistory) {\n                testing_data = stateTestHistory[stateTestHistory.length - 1];\n            }\n\n            let state_population = POPULATION[stateCode];\n\n            var formatTime = d3.timeFormat('%B %d, %I:%M%p IST');\n            let parseTime = d3.timeParse('%d/%m/%Y %H:%M:%S');\n            let updatedTime = parseTime(stateInfo.updatedTime);\n            setUpdatedTime(`${timeDifference(new Date(), updatedTime)} - ${formatTime(new Date(updatedTime))}`);\n\n            let testingData = getFormattedTestingData(testing_data, state_population, districtInfo.state);\n            setTestingData(testingData);\n\n            // fix the negative deaths and\n            districtInfo.districts.forEach((district) => {\n                let {today} = district;\n                if (today) {\n                    today.confirmed = Math.max(0, today.confirmed);\n                    today.recovered = Math.max(0, today.recovered);\n                    today.dead = Math.max(0, today.dead);\n                    today.active = today.confirmed - today.recovered - today.dead;\n                }\n            });\n\n            // find out the unknowns\n            {\n                let districts = districtInfo.districts.filter((d) => d.district !== 'Unknown');\n                let totalKnownConfirmed = d3.sum(districts, (district) => district.confirmed),\n                    totalKnownRecovered = d3.sum(districts, (district) => district.recovered),\n                    totalKnownDeaths = d3.sum(districts, (district) => district.dead);\n\n                let unknowns = {\n                    district: 'Unknown',\n                    confirmed: stateInfo.confirmed - totalKnownConfirmed,\n                    recovered: stateInfo.recovered - totalKnownRecovered,\n                    dead: stateInfo.dead - totalKnownDeaths,\n                };\n                unknowns.active = unknowns.confirmed - unknowns.recovered - unknowns.dead;\n                if (unknowns.confirmed || unknowns.recovered || unknowns.dead) {\n                    districts.push(unknowns);\n                }\n                districtInfo.districts = districts;\n            }\n\n            {\n                let {today} = stateInfo;\n                if (today) {\n                    today.confirmed = Math.max(0, today.confirmed);\n                    today.recovered = Math.max(0, today.recovered);\n                    today.dead = Math.max(0, today.dead);\n                    today.active = today.confirmed - today.recovered - today.dead;\n                }\n            }\n\n            setDisplayCards(getCards(stateInfo, stateInfo.today));\n            setDistrictData(districtInfo.districts);\n\n            let mapInitData = {\n                confirmed: stateInfo.confirmed,\n                active: stateInfo.active,\n                recovered: stateInfo.recovered,\n                dead: stateInfo.dead,\n                name: stateInfo.name,\n                today: stateInfo.today,\n            };\n            setMapInitData(mapInitData);\n\n            setTableData({\n                rows: districtInfo.districts,\n                columns: [\n                    {name: 'district', accessor: 'district'},\n                    {\n                        name: IS_MOBILE_DEVICE ? 'cnfmd' : 'confirmed',\n                        accessor: 'confirmed',\n                        colorClass: 'red',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'actv' : 'active',\n                        accessor: 'active',\n                        colorClass: 'orange',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'Rcvrd' : 'recovered',\n                        accessor: 'recovered',\n                        colorClass: 'green',\n                    },\n                    {\n                        name: 'dead',\n                        accessor: 'dead',\n                        colorClass: 'gray',\n                    },\n                ],\n            });\n\n            setDailyChart(dailyChart);\n            if (history[stateCode]) {\n                setCaseHistory(history[stateCode]);\n            }\n\n            {\n                percentChartJson.seriesdata.chartdata[0] = {\n                    type: 'pie',\n                    data:\n                        stateInfo.confirmed > 0\n                            ? [\n                                  ['Active', stateInfo.active],\n                                  ['Recovered', stateInfo.recovered],\n                                  ['Dead', stateInfo.dead],\n                              ]\n                            : [],\n                };\n                setPercentChart(percentChartJson);\n            }\n\n            {\n                let districts = districtInfo.districts.filter((district) => district.confirmed > 0);\n\n                if (districts.length > 4) {\n                    let dd = districts.filter((d) => d.district !== 'Unknown');\n                    let wordcloudSeries = dailyTrend(Object.values(dd), 'district', ['confirmed']),\n                        wordCloudChart = clone(stateBar);\n\n                    wordCloudChart.canvas.title.text = 'Word Cloud of Affected Districts';\n                    wordCloudChart.chart.axes.yaxis[0].label.text = 'Total';\n                    wordCloudChart.seriesdata.chartdata[0] = {\n                        type: 'wordcloud',\n                        data: wordcloudSeries,\n                        seriesname: 'Confirmed',\n                    };\n                    wordCloudChart.legend.colors = ['#E91E63'];\n                    wordCloudChart.legend.enabled = false;\n                    wordCloudChart.chart.plot.plotoptions.wordcloud = {\n                        minSize: '2.5%',\n                        maxSize: '15%',\n                        legendHighlightEffect: {\n                            selectedSeries: 'invert',\n                        },\n                    };\n                    setWordcloudChart(wordCloudChart);\n                }\n            }\n\n            // let zoneV2 = zonesV2[stateCode].map((row) => [row.district, `${row.zone} Zone`]);\n            // setZones(zoneV2);\n\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const changeStatePage = (event) => {\n        history.push('/state/' + event.target.value);\n    };\n\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    return (\n        <React.Fragment>\n            <Helmet>\n                <title>Coronavirus Outbreak in {STATE_CODES[stateCode]} - track-covid19.in</title>\n                <meta\n                    name=\"title\"\n                    content={`Coronavirus Outbreak in ${STATE_CODES[stateCode]}: Latest Map and Case Count`}\n                />\n                <meta\n                    name=\"description\"\n                    content={`Live statistics of Coronavirus (COVID-19) in ${STATE_CODES[stateCode]} - India. Track the confirmed cases, recovered patients, and death toll of India due to the COVID-19 coronavirus.`}\n                />\n            </Helmet>\n            <div className=\"container\">\n                {spinner && (\n                    <div\n                        className=\"flex items-center justify-center fixed h-screen w-full z-10\"\n                        style={{left: 0, top: 0}}\n                    >\n                        <div className=\"lds-dual-ring\"></div>\n                    </div>\n                )}\n                {fetched && (\n                    <div className=\"opacity-0 my-12 fade-in\">\n                        <div className=\"flex flex-wrap justify-center\">\n                            <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                                <div className=\"w-full md:w-40 font-bold cursor-pointer flex pb-6 text-xs text-gray-600 items-center\">\n                                    <Link to={'/'}>Home</Link> <span className=\"px-1\">/</span>\n                                    <select\n                                        onChange={changeStatePage}\n                                        defaultValue={stateCode}\n                                        name=\"states\"\n                                        className=\"bg-gray-200 font-bold appearance-none py-1 px-2 state-select\"\n                                    >\n                                        {statesKeys.map((key) => {\n                                            return (\n                                                <option value={key} key={key}>\n                                                    {STATE_CODES[key]}\n                                                </option>\n                                            );\n                                        })}\n                                    </select>\n                                </div>\n\n                                <div className=\"flex justify-between text-primary font-bold items-center my-6\">\n                                    <div>\n                                        <h1 className=\"font-extra-bold text-primary text-3xl\">{stateName}</h1>\n                                        <div className=\"text-xs text-gray-700 font-bold\">\n                                            <h2 className=\"\">Last Updated</h2>\n                                            <h2 id=\"lastUpdated\" className=\"capitalize\">\n                                                {updatedTime}\n                                            </h2>\n                                        </div>\n                                    </div>\n                                    <div>\n                                        <Button\n                                            onClick={shareTheApp}\n                                            color=\"primary\"\n                                            className=\"bg-primary\"\n                                            endIcon={<ShareIcon />}\n                                        >\n                                            Share\n                                        </Button>\n                                    </div>\n                                </div>\n                                <div className=\"w-full fade-in\">\n                                    <DisplayCard ref={childRef} cards={displayCards} count={2000} />\n                                </div>\n                                <div className={`w-full my-10 ${fetched ? 'fade-in anim-delay-1' : ''}`}>\n                                    <Table rows={tableData.rows} columns={tableData.columns} />\n                                </div>\n\n                                <div className=\"w-full fade-in my-8\" style={animationDelay(4)}>\n                                    <MetaCard history={caseHistory} tests={testingData} report={mapInitData} />\n                                </div>\n                            </div>\n                            <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                                <div className=\"\">\n                                    <div className=\"flex justify-between fade-in anim-delay-2\">\n                                        <div className=\"text-blue-600 items-center justify-center p-2\">\n                                            <div className=\"text-xs py-1\">Tested</div>\n                                            <div className=\"text-xl font-bold\">{testingData.tested}</div>\n                                            {testingData.date}\n                                        </div>\n                                        <div className=\"text-blue-600 items-center justify-center text-right p-2\">\n                                            <div className=\"text-xs py-1\">\n                                                Population{' '}\n                                                <a\n                                                    rel=\"noopener\"\n                                                    target=\"_blank\"\n                                                    className=\"bg-blue-100\"\n                                                    href={PUPULATION_SOURCE}\n                                                >\n                                                    2019\n                                                </a>\n                                            </div>\n                                            <div className=\"text-sm font-bold\">{testingData.population}</div>\n                                            <div className=\"text-sm font-bold\">\n                                                {testingData.test_per_million} tests / million people\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"fade-in opacity-0  anim-delay-2 py-4\">\n                                        <Map\n                                            initCardData={mapInitData}\n                                            stateCode={stateCode}\n                                            seriesPoints={districtData}\n                                            joinBy={'district'}\n                                            cards={['confirmed', 'active', 'recovered', 'dead']}\n                                            zones={zones}\n                                        />\n                                    </div>\n\n                                    <div className=\"w-full border fade-in my-6\">\n                                        {dailyChart && <TrendGraph chartJson={dailyChart} history={caseHistory} />}\n                                    </div>\n\n                                    {wordcloudChart && (\n                                        <div\n                                            className=\"w-full fade-in md:w-40 mb-4 state-bar border\"\n                                            style={animationDelay(5)}\n                                        >\n                                            <Chart\n                                                seriesData={wordcloudChart}\n                                                name=\"wordcloud\"\n                                                callback={chartCallback}\n                                            />\n                                        </div>\n                                    )}\n\n                                    <div className=\"w-full border my-6 fade-in\" style={{height: '300px'}}>\n                                        <Chart seriesData={percentChart} name=\"percent\" callback={chartCallback} />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <Footer />\n                    </div>\n                )}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default State;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n    const {pathname} = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return null;\n}\n","import React from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\n\nimport Navbar from \"./components/navbar\";\nimport Home from \"./components/home\";\nimport Helpline from \"./components/helplines\";\nimport State from \"./components/state\";\nimport \"./styles/styles.css\";\nimport ScrollToTop from \"./utils/scroll-top\";\nimport { Helmet } from \"react-helmet\";\nimport Analytics from \"react-router-ga\";\n\nfunction App() {\n    const pages = [\n        {\n            pageLink: '/',\n            view: Home,\n            displayName: 'Home',\n            showInNavbar: true,\n        },\n        {\n            pageLink: '/helplines',\n            view: Helpline,\n            displayName: 'Helplines',\n            showInNavbar: true,\n        },\n        {\n            pageLink: '/state/:stateCode',\n            view: State,\n            displayName: 'State',\n            showInNavbar: false,\n        },\n    ];\n\n    const schemaMarkup = {\n        '@context': 'http://schema.org/',\n        '@type': 'NGO',\n        name: 'Coronavirus Outbreak in India: Latest Map and Case Count',\n        alternateName: 'COVID-19 Tracker',\n        url: 'https://track-covid-19.in',\n        image: 'https://www.track-covid19.in/thumbnail.png',\n    };\n\n    return (\n        <div className=\"App\">\n            <Helmet>\n                <script type=\"application/ld+json\">{JSON.stringify(schemaMarkup)}</script>\n            </Helmet>\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <ScrollToTop />\n                <Analytics id=\"UA-163302592-1\">\n                    <Route\n                        render={({location}) => (\n                            <div className=\"Routing\">\n                                <Navbar pages={pages} />\n                                <Switch location={location}>\n                                    {pages.map((page, index) => {\n                                        return (\n                                            <Route\n                                                exact\n                                                path={page.pageLink}\n                                                render={({match}) => (\n                                                    <page.view key={match.params.stateCode || index} />\n                                                )}\n                                                key={index}\n                                            />\n                                        );\n                                    })}\n                                    <Redirect to=\"/\" />\n                                </Switch>\n                            </div>\n                        )}\n                    />\n                </Analytics>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}