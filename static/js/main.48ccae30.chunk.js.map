{"version":3,"sources":["components/navbar.jsx","components/arrow.js","components/display-card.jsx","components/table.jsx","utils/sort.js","components/text.js","components/Map.js","constants/population.js","utils/format-test.js","components/Chart.js","charts/daily.js","utils/common-utils.js","components/trend-chart.js","components/home.jsx","constants/state-code.js","components/helplines.jsx","components/state.jsx","utils/scroll-top.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","pages","useState","className","src","alt","map","page","i","showInNavbar","exact","to","pageLink","key","activeClassName","path","animationDelay","animationDelayForNavbar","window","location","pathname","style","displayName","Arrow","up","rotate","arrow","transform","marginTop","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","points","DisplayCard","forwardRef","ref","count","cc","cards","styles","callback","setCards","name","activeCard","setActiveCard","updateActiveCard","card","useImperativeHandle","updateDisplayCardCounts","bg100","bg200","shadow","flexAuto","bg","colorClass","autoWidth","onClick","onTouchStart","delta","value","Table","props","columns","rows","filter","row","confirmed","setValues","useEffect","slice","sortRows","event","thisElement","currentTarget","prop","dataset","asc","ascending","sorted","sort","a","b","NaN","descending","column","data-prop","accessor","title","index","j","columnName","todayCount","extraClass","today","district","link","stateCode","colorMap","active","recovered","dead","tested","getCards","total","list","item","MapText","state","initCardData","child","React","createRef","data","this","setState","current","Component","d3","Map","handleMapHover","update","rawPoints","seriesPoints","joinBy","zones","codeLower","toLowerCase","scopeCode","mapExtents","max","d","colors","object_map","forEach","zoneMap","Promise","all","axios","get","toposjon","mapData","$ZC","mapCollections","availableNames","objects","source","geometries","name_ascii","properties","push","zone","includes","console","log","myDiv","classList","add","scope","seriesdata","chartdata","legend","colorBand","stops","last","tapCallback","clickCallback","mapAction","error","point","data_callback","allowDefault","defaultEvent","chart","plot","plotoptions","geoheatmap","events","mousemove","tap","click","maps","userdata","ranges","enabled","metadata","axes","clr","strokeColor","eventHandler","mapEvents","clearHighlightedPoints","redraw","selectAll","classed","target","bind","c","changeMapType","colorFinder","chartInstance","POPULATION","DL","HR","KL","HP","PB","GA","TG","UT","CH","LD","DN","GJ","CT","DD","AN","TN","MH","KA","OR","WB","PY","AP","JH","TR","MP","MZ","UP","RJ","SK","BR","MN","AR","JK","LA","NL","ML","AS","PUPULATION_SOURCE","parseTime","timeParse","formatTime","timeFormat","getFormattedTestingData","testing_data","totalPopulation","label","dateString","date","href","rel","toLocaleString","population","test_per_million","Math","round","Chart","seriesData","charts","updateCallback","dailyTrend","history","xKey","keys","cumulative","series","s","obj","prev","makeCumulative","toCapitalize","string","charAt","toUpperCase","toFixedNumber","number","decimal","tenToD","pow","Number","EPSILON","toFixed","timeDifference","previous","elapsed","fixRelative","num","str","t0","msPerMinute","msPerHour","msPerDay","clone","json","JSON","parse","stringify","IS_MOBILE_DEVICE","innerWidth","shareTheApp","message","document","url","undefined","navigator","share","text","then","catch","shareUri","encodeURI","left","screen","w","top","h","open","shareURL","TrendGraph","chartJson","useRef","chartStore","updateChartStore","timeFrame","setTimeFrame","setCumulative","trendTime","month","seriesNames","getTrendSeries","dailySeries","minRange","updateTimeFrame","frame","length","daily","seriesname","xaxis","canvas","show","checked","scaleState","setScaleState","cumulativeMode","setCumulativeMode","Fragment","FormControlLabel","control","Switch","size","onChange","color","disabled","scaleMode","yaxis","scaleType","type","IS_DESKTOP","Home","fetched","setFetched","setData","tableData","setTableData","mapInitData","setMapInitData","testingData","setTestingData","stateDataMapped","setStateDataMapped","dailyChart","setDailyChart","stateStackedChart","setStateStackedChart","deathTrendChart","setDeathTrendChart","deathTrendTotalChart","setDeathTrendTotalChart","recoveryTrendChart","setRecoveryTrendChart","growthRateChart","setGrowthRateChart","stateCases","setStateCases","wordcloudChart","setWordcloudChart","percentChart","setPercentChart","useHistory","childRef","lastUpdated","setLastUpdated","spinner","setSpinner","displayCards","setDisplayCards","stateData","setStateData","getData","reports","stateBar","percentChartJson","updatedTime","Date","sum","Object","values","testing_data_imcr","states","t","deathRateByRecovery","deathRateByTotal","recoveryRateByTotal","stateBarSeries","barSeriesNames","stateBarStacked","lineSeriesNames","stateBarSeriesLine","subtitle","bar","stacked","yaxiscolumnorder","lineSeriesNames1","recoverySeriesLine","march1","stateCasesChart","stateCasesChartLog","threshold","tickCount","ticklabel","alignMode","datatype","columnname","dataindex","numeric","axisformat","prefix","wordcloudSeries","wordCloudChart","wordcloud","minSize","legendHighlightEffect","selectedSeries","callbackMap","goToStatePage","find","mapInstance","mouse","container","node","latLong","geo","utils","projection","invert","rendererArrangedReveresd","getPoint","chartCallback","getMapAndTable","Helmet","content","Button","endIcon","id","STATE_CODES","Helpline","helplines","setHelplines","getHelplines","helpline","State","useParams","stateName","statesKeys","districtData","setDistrictData","caseHistory","setCaseHistory","setUpdatedTime","setZones","district_data","state_data","districtInfo","stateInfo","state_population","districts","defaultValue","ScrollToTop","useLocation","scrollTo","App","view","alternateName","image","basename","process","render","match","params","Boolean","hostname","ReactDOM","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48ccae30.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst navLinkProps = (path, animationDelay) => ({\n    className: `${window.location.pathname === path ? 'focused' : ''}`,\n    style: {\n        animationDelay: `${animationDelay}s`,\n    },\n});\n\nfunction Navbar({pages}) {\n    const [expand, setExpand] = useState(false);\n    return (\n        <nav className=\"flex items-center flex-wrap bg-white text-primary py-2\">\n            <div className=\"container py-2 px-2 items-center font-bold text-lg\">\n                <div className=\"w-full flex items-center justify-between -my-2\">\n                    <div className=\"flex items-center cursor-pointer lg:flex\">\n                        <img\n                            src=\"/images/covid.svg\"\n                            alt=\"logo\"\n                            className=\"h-10 w-auto mr-3\"\n                        />\n                        <div className=\"text-xl font-bold text-black text-primary\">\n                            COVID-19 India\n                            <span className=\"text-red-600 uppercase live-txt blink\">\n                                Live\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"flex ml-auto mr-1\">\n                        {pages.map((page, i) => {\n                            if (page.showInNavbar === true) {\n                                return (\n                                    <NavLink\n                                        exact={true}\n                                        to={page.pageLink}\n                                        key={i}\n                                        className={\n                                            'mx-1 px-3 py-4 hidden lg:block nav-link'\n                                        }\n                                        activeClassName={\n                                            'relative nav-link-active'\n                                        }\n                                    >\n                                        <span\n                                            {...navLinkProps(\n                                                page.pageLink,\n                                                page.animationDelayForNavbar\n                                            )}\n                                        >\n                                            {page.displayName}\n                                        </span>\n                                    </NavLink>\n                                );\n                            }\n                            return null;\n                        })}\n                    </div>\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from 'react';\n\n/**\n *\n * @return {string}\n * @constructor\n */\nfunction Arrow({up, rotate = 0}) {\n    let arrow = up ? '5 12 12 5 19 12' : '5 12 12 19 19 12';\n    let transform = {};\n    if (rotate) {\n        transform.transform = `rotate(${rotate}deg)`;\n    }\n    return (\n        <svg\n            style={{marginTop: '-0.14rem', ...transform}}\n            className=\"inline-block\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"10\"\n            height=\"10\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"3\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\" />\n            <polyline points={arrow} />\n        </svg>\n    );\n}\n\nexport default Arrow;\n","import React, {forwardRef, useImperativeHandle, useState} from 'react';\nimport Arrow from './arrow';\n\nconst DisplayCard = forwardRef(({count, cards: cc, styles = {}, callback}, ref) => {\n    let [cards, setCards] = useState(cc);\n    let [activeCard, setActiveCard] = useState(cards[0].name);\n\n    useImperativeHandle(ref, () => ({\n        updateDisplayCardCounts(cards) {\n            setCards(cards);\n        },\n    }));\n\n    function updateActiveCard(card) {\n        setActiveCard(card.name);\n        setCards([...cards]);\n    }\n\n    return (\n        <div className=\"flex flex-row justify-center my-5 justify-between\">\n            {cards.map((card, i) => {\n                let bg100, bg200, shadow, flexAuto;\n\n\n                if (styles.bg !== false || card.name === activeCard) {\n                    bg100 = `bg-${card.colorClass}-100`;\n                    bg200 = `bg-${card.colorClass}-200`;\n                }\n\n                if (styles.shadow !== false) {\n                    shadow = 'shadow';\n                }\n\n                if (styles.autoWidth !== false) {\n                    flexAuto = 'flex-auto';\n                }\n\n                callback = callback || (() => {});\n\n                return (\n                    <div\n                        onClick={() => {\n                            updateActiveCard(card, i);\n                            callback(card, i);\n                        }}\n                        onTouchStart={() => {\n                            updateActiveCard(card, i);\n                            callback(card, i);\n                        }}\n                        key={i}\n                        className={`${\n                            i ? 'ml-2' : ''\n                        } w-24 flex ${flexAuto} flex-col rounded overflow-hidden cursor-pointer ${shadow} text-center text-${\n                            card.colorClass\n                        }-600`}\n                    >\n                        <div className={`pt-2 flex flex-auto flex-col items-center justify-center ${bg100} font-bold`}>\n                            {\n                                <span className=\"text-xs\">\n                                    {card.delta ? <Arrow up={card.delta >= 0} /> : ''}\n                                    {card.delta}\n                                </span>\n                            }\n                            <span className=\"text-xl lg:text-2xl py-1\">{card.value + ''}</span>\n                        </div>\n                        <div className={`py-2 w-full ${bg200} text-sm font-semibold`}>\n                            <span className=\"capitalize\">{card.name}</span>\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n});\n\nexport default DisplayCard;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ascending, descending } from \"../utils/sort\";\nimport Arrow from \"./arrow\";\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction Table(props) {\n    let [{rows, columns}, setValues] = useState({\n        columns: props.columns,\n        rows: props.rows.filter((row) => row.confirmed > 0),\n    });\n\n    rows = rows.filter((row) => row.confirmed > 0);\n\n    useEffect(() => {\n        setValues({\n            columns: props.columns.slice(0),\n            rows: props.rows.slice(0),\n        });\n    }, [props]);\n\n    const sortRows = function (event) {\n        let thisElement = event.currentTarget,\n            {prop} = thisElement.dataset;\n\n        let asc = (thisElement.ascending = !thisElement.ascending);\n        let sorted = rows.slice(0).sort(function (a, b) {\n            return asc\n                ? descending(a[prop], b[prop])\n                : ascending(a[prop], b[prop]);\n        });\n        setValues({\n            rows: sorted,\n            columns,\n        });\n    };\n\n    return (\n        <table className=\"w-full\">\n            <tbody className=\"text-xs leading-tight border-b-2 cursor-pointer\">\n                <tr>\n                    {columns.map((column) => (\n                        <th\n                            className=\"capitalize border px-2 py-2 sort-by sticky bg-white\"\n                            key={column.name}\n                            onClick={sortRows}\n                            data-prop={column.accessor}\n                            title=\"Click to sort\"\n                        >\n                            {column.name}\n                        </th>\n                    ))}\n                </tr>\n            </tbody>\n            <tbody className=\"font-bold\">\n                {rows.map((row, index) => (\n                    <tr key={index}>\n                        {columns.map((column, j) => {\n                            let columnName = column.accessor,\n                                colorClass = column.colorClass,\n                                todayCount = 0,\n                                count = row[columnName],\n                                extraClass = '';\n\n                            if (row.today) {\n                                todayCount = row.today[columnName];\n                            }\n\n                            if (row.district === 'Unknown') {\n                                extraClass = `bg-${colorClass}-200 text-${colorClass}-600`;\n                            }\n\n                            //\n                            if (props.link && j === 0) {\n                                count = (\n                                    <Link to={`/state/${row.stateCode}`}>\n                                        {count}\n                                        <span className=\"ml-1 text-gray-600\">\n                                            <Arrow rotate={-90} />\n                                        </span>\n                                    </Link>\n                                );\n                            }\n\n                            return (\n                                <td\n                                    key={j}\n                                    className={`${\n                                        j === 0 ? 'bg-gray-200' : 'text-right'\n                                    }  text-2xs border px-2 py-2 ${extraClass}`}\n                                >\n                                    <span>\n                                        {j > 0 && todayCount ? (\n                                            <span\n                                                className={` mr-1 text-${colorClass}-600 break-words`}\n                                            >\n                                                <Arrow up={todayCount > 0} />\n                                                <span>{todayCount}</span>\n                                            </span>\n                                        ) : (\n                                            ''\n                                        )}\n                                    </span>\n                                    <span className=\"text-xs\">{count}</span>\n                                </td>\n                            );\n                        })}\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n}\n\nexport default Table;\n","/**\n *\n * @param a\n * @param b\n * @return {number}\n */\nfunction ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\n/**\n *\n * @param a\n * @param b\n * @return {number}\n */\nfunction descending(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n\nexport {ascending, descending};\n","import React from \"react\";\nimport DisplayCard from \"./display-card\";\n\nlet colorMap = {\n    confirmed: 'red',\n    active: 'orange',\n    recovered: 'green',\n    dead: 'gray',\n    tested: 'blue',\n};\n\nconst getCards = (total = {}, today = {}, list) => {\n    return list.map((item) => {\n        return {\n            name: item,\n            value: total[item],\n            delta: today[item],\n            colorClass: colorMap[item],\n        };\n    });\n};\n\nclass MapText extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = {...props.initCardData, cards: props.cards};\n        this.child = React.createRef();\n    }\n\n    update(data, today) {\n        this.setState(data);\n        let cards = getCards(data, today, this.props.cards);\n        this.child.current.updateDisplayCardCounts(cards);\n    }\n\n    render() {\n        let cards = getCards(this.state, this.state.today, this.props.cards);\n        let {name} = this.state;\n\n        return (\n            <div>\n                <h2 className=\"font-extra-bold text-xl text-primary my-2\">\n                    {name}\n                </h2>\n                <DisplayCard\n                    styles={{bg: false, autoWidth: false}}\n                    cards={cards}\n                    ref={this.child}\n                    callback={this.props.callback}\n                />\n            </div>\n        );\n    }\n}\nexport default MapText;\n","import React from 'react';\nimport axios from 'axios';\nimport MapText from './text';\nconst d3 = window.d3;\n\nclass Map extends React.Component {\n    constructor(props) {\n        super(props);\n        this.child = React.createRef();\n    }\n\n    handleMapHover = (data, today) => {\n        this.child.current.update(data, today);\n    };\n\n    async componentDidMount() {\n        let {stateCode, seriesPoints: rawPoints, joinBy, zones} = this.props,\n            codeLower = stateCode.toLowerCase(),\n            scopeCode = `countries-ind-${codeLower}-2`,\n            seriesPoints = [];\n\n        this.mapExtents = {\n            confirmed: {\n                count: d3.max(rawPoints, (d) => d.confirmed),\n                colors: ['#fff4ec', '#ff1100'],\n            },\n            active: {\n                count: d3.max(rawPoints, (d) => d.active),\n                colors: ['#fff4ec', '#f36f40'],\n            },\n            recovered: {\n                count: d3.max(rawPoints, (d) => d.recovered),\n                colors: ['#f4fcee', '#007e1a'],\n            },\n            dead: {\n                count: d3.max(rawPoints, (d) => d.dead),\n                colors: ['#fcfbfc', '#2f2f2f'],\n            },\n        };\n\n        // create a object map and then asign to the series poitns\n        let object_map = {};\n        rawPoints.forEach((row) => {\n            object_map[row[joinBy]] = row;\n        });\n\n        let zoneMap = {};\n        if (zones) {\n            zones.forEach((row) => {\n                zoneMap[row[0]] = row[1];\n            });\n        }\n\n        const [{data: toposjon}, {data: mapData}] = await Promise.all([\n            axios.get(`/maps/${stateCode}.topojson`),\n            axios.get('/charts/map.json'),\n        ]);\n\n        window.$ZC.mapCollections[scopeCode] = toposjon;\n\n        // create data for all available district\n        let availableNames = [];\n        seriesPoints = toposjon.objects.source.geometries.map(({properties: {name_ascii}}) => {\n            let confirmed = 0,\n                active = 0,\n                recovered = 0,\n                dead = 0;\n\n            if (object_map[name_ascii]) {\n                ({confirmed, active, recovered, dead} = object_map[name_ascii]);\n            }\n            availableNames.push(name_ascii);\n            let zone = null;\n            if (zones) {\n                zone = zoneMap[name_ascii];\n            }\n            return [name_ascii, confirmed, active, recovered, dead, zone];\n        });\n\n        // list the non matched names\n        rawPoints.forEach((row) => {\n            if (!availableNames.includes(row[joinBy])) {\n                console.log('map mitchmatch', row[joinBy]);\n            }\n        });\n\n        console.log('*****************************');\n\n        if (zones) {\n            zones.forEach((district) => {\n                if (!availableNames.includes(district[0])) {\n                    console.log('zone mitchmatch', district[0]);\n                }\n            });\n        }\n\n        if (this.myDiv) {\n            this.myDiv.classList.add('fade-in');\n            mapData.map.scope = scopeCode;\n            mapData.seriesdata.chartdata[0].data = [seriesPoints];\n\n            mapData.legend.colors = [...this.mapExtents.confirmed.colors];\n            mapData.legend.colorBand.stops = [0, this.mapExtents.confirmed.count];\n\n            let last = null,\n                {callback, tapCallback, clickCallback} = this.props;\n\n            const mapAction = (error, data) => {\n                let [name, confirmed, active, recovered, dead] = data.point,\n                    today = {recovered: 0, confirmed: 0, active: 0, dead: 0};\n\n                if (object_map[name]) {\n                    today = object_map[name].today;\n                }\n\n                let data_callback = {\n                    name,\n                    confirmed,\n                    active,\n                    recovered,\n                    dead,\n                };\n\n                if (name !== last) {\n                    this.handleMapHover(data_callback, today);\n                    last = name;\n                }\n\n                if (callback) {\n                    callback(data_callback, today);\n                }\n                window.d3.event.allowDefault = true;\n            };\n\n            let defaultEvent = () => (window.d3.event.allowDefault = true);\n\n            mapData.chart.plot.plotoptions.geoheatmap.events = {\n                mousemove: mapAction,\n                tap: (error, data) => {\n                    mapAction(error, data);\n                    if (tapCallback) {\n                        tapCallback(error, data, this.map);\n                    }\n                    window.d3.event.allowDefault = true;\n                },\n                click: clickCallback || defaultEvent,\n            };\n\n            this.map = window.$ZC.maps(this.myDiv, mapData);\n        }\n    }\n\n    callback(card, i) {\n        let colorMap = ['#e84b36', '#f88658', '#007e1a', '#2f2f2f'];\n\n        this.map.userdata.legend.colors = [...this.mapExtents[card.name].colors];\n        this.map.userdata.legend.colorBand.stops = [0, this.mapExtents[card.name].count];\n\n        this.map.userdata.legend.colorBand.ranges = null;\n        this.map.userdata.legend.filter.enabled = false;\n        this.map.userdata.metadata.axes.clr = [i + 1];\n        this.map.userdata.chart.plot.plotoptions.geoheatmap.strokeColor = colorMap[i];\n        this.map.eventHandler.mapEvents.clearHighlightedPoints();\n        this.map.redraw();\n    }\n\n    changeMapType(event) {\n        d3.selectAll('button').classed('text-primary', false);\n        event.target.classList.add('text-primary');\n\n        if (event.target.name === 'zone') {\n            this.map.userdata.legend.colors = ['#ff1100', '#f88658', '#009688'];\n            this.map.userdata.legend.colorBand.ranges = [['Red Zone'], ['Orange Zone'], ['Green Zone']];\n            this.map.userdata.chart.plot.plotoptions.geoheatmap.strokeColor = '#ddd';\n            this.map.userdata.legend.filter.enabled = true;\n            this.map.userdata.metadata.axes.clr = [5];\n            this.map.eventHandler.mapEvents.clearHighlightedPoints();\n            this.map.redraw();\n        } else {\n            this.callback({name: this.props.cards[0]}, 0);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <MapText\n                    ref={this.child}\n                    initCardData={this.props.initCardData}\n                    cards={this.props.cards}\n                    callback={this.callback.bind(this)}\n                />\n                <div className=\"live-map my-6\" ref={(c) => (this.myDiv = c)}></div>\n                {this.props.zones && (\n                    <div className=\"my-4 text-sm\">\n                        <button\n                            className=\"bg-gray-300 px-4 py-3 font-bold text-primary\"\n                            name=\"default\"\n                            onClick={this.changeMapType.bind(this)}\n                            onTouchStart={this.changeMapType.bind(this)}\n                        >\n                            Affected Areas\n                        </button>\n                        <button\n                            className=\"bg-gray-300 px-4 py-3 font-bold ml-2\"\n                            name=\"zone\"\n                            onClick={this.changeMapType.bind(this)}\n                            onTouchStart={this.changeMapType.bind(this)}\n                        >\n                            Zones\n                        </button>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nwindow.colorFinder = function (chartInstance, index, data) {\n    let colorIndex = chartInstance.userdata.metadata.axes.clr[0];\n\n    if (data[colorIndex] === 0) {\n        return 'white';\n    }\n};\n\nexport default Map;\n","export const POPULATION = {\n    DL: 18498192,\n    HR: 27793351,\n    KL: 35461849,\n    HP: 7384022,\n    PB: 29875481,\n    GA: 1564349,\n    TG: 38919054,\n    UT: 11140566,\n    CH: 1142479,\n    LD: 72172,\n    DN: 384058,\n    GJ: 64801901,\n    CT: 28989789,\n    DD: 223165,\n    AN: 411278,\n    TN: 77177540,\n    MH: 121924973,\n    KA: 66834193,\n    OR: 45861035,\n    WB: 98662146,\n    PY: 1394026,\n    AP: 53390841,\n    JH: 37933898,\n    TR: 4112223,\n    MP: 83849671,\n    MZ: 1222134,\n    UP: 233378519,\n    RJ: 79584255,\n    SK: 680721,\n    BR: 122256981,\n    MN: 3048861,\n    AR: 1548776,\n    JK: 13468313,\n    LA: 279924,\n    NL: 2218634,\n    ML: 3320226,\n    AS: 35080827,\n};\n\nexport const PUPULATION_SOURCE =\n    'https://uidai.gov.in/images/state-wise-aadhaar-saturation.pdf';\n\nexport const POPULATION_SOURCE_ARCHIVED =\n    'https://web.archive.org/web/20200229034831/https://uidai.gov.in/images/state-wise-aadhaar-saturation.pdf';\n","import React from 'react';\nconst d3 = window.d3;\nvar parseTime = d3.timeParse('%d/%m/%Y');\nvar formatTime = d3.timeFormat('%B %d');\n\n/**\n *\n * @param testing_data\n * @param totalPopulation\n * @param label\n * @return {{date: *, test_per_million: string, tested: string, label: string, population: string}}\n */\n\nexport function getFormattedTestingData(testing_data, totalPopulation, label) {\n    let dateString = '';\n\n    dateString = (\n        <div className=\"text-xs\">\n            {label === 'Total' ? 'As per latest IMCR ' : `Till ${formatTime(parseTime(testing_data.date))} as per `}\n            <a href={testing_data.source} rel=\"noopener\" className=\"bg-blue-100\" target=\"_blank\">\n                {label === 'Total' ? 'Report' : 'source'}\n            </a>\n        </div>\n    );\n\n    return {\n        tested: testing_data.tested.toLocaleString(),\n        date: dateString,\n        population: totalPopulation.toLocaleString(),\n        test_per_million: Math.round((testing_data.tested / totalPopulation) * 1000000).toLocaleString(),\n        label: ` - ${label}`,\n    };\n}\n","import React from 'react';\n\nclass Chart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.child = React.createRef();\n    }\n\n    componentDidMount() {\n        let {seriesData, name, callback} = this.props;\n\n        if (this.myDiv) {\n            let chart = this.chart = window.$ZC.charts(this.myDiv, seriesData);\n            if (callback) {\n                callback(chart, name);\n            }\n        }\n    }\n    \n    componentDidUpdate() {\n        if (this.props.updateCallback) {\n            this.props.updateCallback(this.chart, this.props.name)\n        }\n    }\n\n    render() {\n        return <div className=\"h-full\" ref={(c) => (this.myDiv = c)}></div>;\n    }\n}\n\nexport default Chart;\n","function makeCumulative(obj, key) {\n    let prev = 0;\n    obj.forEach((row) => {\n        row[key] += prev;\n        prev = row[key];\n    });\n}\n\nfunction dailyTrend(history, xKey, keys, cumulative, count) {\n    let series = keys.map((key) => {\n        return history.map((row, i) => {\n            if (xKey === '$index') {\n                return [i, row[key]];\n            }\n            return [row[xKey], row[key]];\n        });\n    });\n\n    if (cumulative) {\n        series.forEach((s) => {\n            makeCumulative(s, 1);\n        });\n    }\n\n    if (count) {\n        series = series.map((s) => s.slice(-count));\n    }\n\n    return series;\n}\n\nexport {dailyTrend, makeCumulative};\n","/**\n *\n * @param xs\n * @param key\n * @return {*}\n */\nexport function groupBy(xs, key) {\n    return xs.reduce(function (rv, x) {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n}\n\nexport function defined(obj) {\n    return obj !== undefined;\n}\n\nexport function toCapitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n *\n * @param number\n * @param decimal\n * @return {number}\n */\nexport function toFixedNumber(number, decimal) {\n    var tenToD = Math.pow(10, decimal);\n    return +(Math.round((number + Number.EPSILON) * tenToD) / tenToD).toFixed(decimal);\n}\n\n/**\n *\n * @param current\n * @param previous\n * @return {string}\n */\nexport function timeDifference(current, previous) {\n    var msPerMinute = 60 * 1000;\n    var msPerHour = msPerMinute * 60;\n    var msPerDay = msPerHour * 24;\n    var msPerMonth = msPerDay * 30;\n    var msPerYear = msPerDay * 365;\n    var elapsed = Math.max(0, current - previous),\n        r,\n        fixRelative = (num, str) => {\n            let t0 = num > 1 ? 's' : '';\n            if (str === 'day' && num === 1) {\n                return 'Yesterday';\n            }\n            return `${num} ${str}${t0} ago`;\n        };\n\n    if (elapsed < msPerMinute) {\n        return `${Math.round(elapsed / 1000)} seconds ago`;\n    } else if (elapsed < msPerHour) {\n        r = Math.round(elapsed / msPerMinute);\n        return fixRelative(r, 'minute');\n    } else if (elapsed < msPerDay) {\n        return fixRelative(Math.round(elapsed / msPerHour), 'hour');\n    } else if (elapsed < msPerMonth) {\n        return fixRelative(Math.round(elapsed / msPerDay), 'day');\n    } else if (elapsed < msPerYear) {\n        return fixRelative(Math.round(elapsed / msPerMonth), 'month');\n    } else {\n        return fixRelative(Math.round(elapsed / msPerYear), 'year');\n    }\n}\n\n/**\n *\n * @param json\n * @return {any}\n */\nexport function clone(json) {\n    return JSON.parse(JSON.stringify(json));\n}\n\nexport const IS_MOBILE_DEVICE = window.innerWidth < 769;\n\n/**\n *\n * @param url\n * @param message\n * @return {Window}\n */\nfunction shareURL(url, message) {\n    const shareUri = `https://www.addtoany.com/share#url=${encodeURI(url)}&title=${encodeURI(message)}`;\n    const h = 500;\n    const w = 500;\n    const left = window.screen.width / 2 - w / 2;\n    const top = window.screen.height / 2 - h / 2;\n    return window.open(\n        shareUri,\n        document.title,\n        'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' +\n            w +\n            ', height=' +\n            h +\n            ', top=' +\n            top +\n            ', left=' +\n            left\n    );\n}\n\nexport function shareTheApp() {\n    const message = document.title,\n        url = window.location.href;\n\n    if (navigator.share !== undefined) {\n        navigator\n            .share({\n                title: message,\n                text: message,\n                url: url,\n            })\n            .then()\n            .catch((error) => {});\n    } else {\n        shareURL(url, message);\n    }\n}\n","import React, {useEffect, useState, useRef} from 'react';\nimport Chart from './Chart';\nimport {dailyTrend} from '../charts/daily';\nimport {toCapitalize} from '../utils/common-utils';\n\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction TrendGraph(props) {\n    let {chartJson, history} = props;\n\n    const ref = useRef();\n    const [chartStore, updateChartStore] = useState({});\n    const [dailyChartMode, setDailyChartMode] = useState('cumulative');\n\n    const [timeFrame, setTimeFrame] = useState('month');\n    const [cumulative, setCumulative] = useState(true);\n\n    let trendTime = {'1week': 7, '2week': 14, month: 30},\n        seriesNames = ['confirmed', 'active', 'recovered', 'dead'];\n\n    /**\n     *\n     * @param chart\n     * @param name\n     */\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    function updateCallback() {\n        let chart = chartStore.daily,\n            scaleMode = scaleState.checked ? 'log' : 'linear',\n            cumulative = cumulativeMode.checked === false;\n\n        chart.userdata.chart.axes.yaxis[0].scaleType = scaleMode;\n        let {series, minRange} = getTrendSeries(cumulative, trendTime[timeFrame]);\n\n        series.forEach((s, i) => {\n            chart.userdata.seriesdata.chartdata[i].data = s;\n        });\n        chart.userdata.chart.axes.xaxis.minRange = minRange;\n        chart.redraw();\n    }\n\n    function getTrendSeries(cumulative, count) {\n        // create the graph data\n        let seriesNames = ['confirmed', 'active', 'recovered', 'dead'];\n        let dailySeries = dailyTrend(history, 'date', seriesNames, cumulative, count);\n        return {\n            series: dailySeries,\n            minRange: dailySeries[0][0][0],\n        };\n    }\n\n    /**\n     *\n     * @param event\n     */\n    function updateDailyChartScaleMode(event) {\n        let checked = event.target.checked;\n        setScaleState({...scaleState, [event.target.name]: checked});\n        setCumulativeMode({...cumulativeMode, checked: false});\n    }\n\n    /**\n     *\n     * @param event\n     */\n    function updateDailyChartCumulative(event) {\n        let cumulative = event.target.checked === false;\n        setCumulative(cumulative);\n\n        setCumulativeMode({...cumulativeMode, checked: !cumulative});\n        setScaleState({...scaleState, checked: false});\n    }\n\n    function updateTimeFrame(frame) {\n        setTimeFrame(frame);\n    }\n\n    if (history.length && !chartStore.daily) {\n        let {series, minRange} = getTrendSeries(true, trendTime[timeFrame]);\n        series.forEach((series, i) => {\n            chartJson.seriesdata.chartdata[i] = {data: series, seriesname: toCapitalize(seriesNames[i])};\n        });\n        chartJson.chart.axes.xaxis.minRange = minRange;\n        chartJson.canvas.title.show = false;\n    }\n\n    const [scaleState, setScaleState] = React.useState({checked: false});\n    const [cumulativeMode, setCumulativeMode] = React.useState({checked: false});\n\n    return (\n        <React.Fragment>\n            <h2 className=\"ml-3 mt-4\">Daily Trend</h2>\n            <div className=\"ml-3 flex mt-2\">\n                <div className=\"flex items-center \">\n                    <span className=\"mr-2\">Scale</span>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                size=\"small\"\n                                checked={scaleState.checked}\n                                onChange={updateDailyChartScaleMode}\n                                name=\"checked\"\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Logarithmic\"\n                    />\n                </div>\n                <div className=\"flex items-center \">\n                    <span className=\"mr-2\">Mode</span>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                disabled={scaleState.checked}\n                                size=\"small\"\n                                checked={cumulativeMode.checked}\n                                onChange={updateDailyChartCumulative}\n                                name=\"checked\"\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Daily\"\n                    />\n                </div>\n            </div>\n            <div className=\"trend-graph\">\n                <Chart seriesData={chartJson} name=\"daily\" callback={chartCallback} updateCallback={updateCallback} />\n            </div>\n            <div className=\"flex flex-auto z-10 my-4 items-center justify-end\">\n                <div className=\"button-group text-sm mr-4\">\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('all')}\n                        className={`${\n                            timeFrame === 'all' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        Beginning\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('month')}\n                        className={`${\n                            timeFrame === 'month' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        Month\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('2week')}\n                        className={`${\n                            timeFrame === '2week' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        2 Weeks\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('1week')}\n                        className={`${\n                            timeFrame === '1week' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        1 Week\n                    </button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default TrendGraph;\n","import React, {useEffect, useRef, useState} from 'react';\nimport DisplayCard from './display-card';\nimport axios from 'axios';\nimport Table from './table';\nimport Map from './Map';\nimport {POPULATION, PUPULATION_SOURCE} from '../constants/population';\nimport {getFormattedTestingData} from '../utils/format-test';\nimport Chart from './Chart';\nimport {dailyTrend} from '../charts/daily';\nimport {clone, IS_MOBILE_DEVICE, shareTheApp, timeDifference, toCapitalize, toFixedNumber} from '../utils/common-utils';\nimport TrendGraph from './trend-chart';\nimport {useHistory} from 'react-router-dom';\nimport {Helmet} from 'react-helmet';\nimport {Button} from '@material-ui/core';\nimport ShareIcon from '@material-ui/icons/Share';\n\nconst d3 = window.d3;\nconst IS_DESKTOP = !IS_MOBILE_DEVICE;\n\nfunction Home({}) {\n    const [fetched, setFetched] = useState(false);\n    const [data, setData] = useState({});\n    const [tableData, setTableData] = useState({rows: [], columns: []});\n    const [mapInitData, setMapInitData] = useState({});\n    const [testingData, setTestingData] = useState({});\n    const [stateDataMapped, setStateDataMapped] = useState({});\n    const [dailyChart, setDailyChart] = useState(null);\n    const [stateStackedChart, setStateStackedChart] = useState({});\n    const [deathTrendChart, setDeathTrendChart] = useState({});\n    const [deathTrendTotalChart, setDeathTrendTotalChart] = useState({});\n    const [recoveryTrendChart, setRecoveryTrendChart] = useState({});\n    const [growthRateChart, setGrowthRateChart] = useState({});\n    const [stateCases, setStateCases] = useState({});\n    const [wordcloudChart, setWordcloudChart] = useState({});\n    const [percentChart, setPercentChart] = useState({});\n    const history = useHistory();\n    const childRef = useRef();\n    const [chartStore, updateChartStore] = useState({});\n    const [lastUpdated, setLastUpdated] = useState('-');\n    const [spinner, setSpinner] = useState(true);\n\n    const getCards = (total = {}, today = {}) => {\n        return [\n            {\n                name: 'Confirmed',\n                value: total.confirmed,\n                delta: today.confirmed,\n                colorClass: 'red',\n            },\n            {\n                name: 'Active',\n                value: total.active,\n                delta: today.active,\n                colorClass: 'orange',\n            },\n            {\n                name: 'Recovered',\n                value: total.recovered,\n                delta: today.recovered,\n                colorClass: 'green',\n            },\n            {\n                name: 'Dead',\n                value: total.dead,\n                delta: today.dead,\n                colorClass: 'gray',\n            },\n        ];\n    };\n\n    const [displayCards, setDisplayCards] = useState(getCards());\n    const [stateData, setStateData] = useState([]);\n\n    useEffect(() => {\n        if (fetched === false) {\n            getData();\n        }\n    }, [fetched]);\n\n    const getData = async () => {\n        try {\n            let [{data: reports}, {data: dailyChart}, {data: stateBar}, {data: percentChartJson}] = await Promise.all([\n                axios.get('https://api.track-corona.in/reports_v2.json'),\n                axios.get('/charts/daily.json'),\n                axios.get('/charts/states.json'),\n                axios.get('/charts/percent-chart.json'),\n            ]);\n\n            setSpinner(false);\n            setData(reports);\n\n            // time updated\n            {\n                let updatedTime = new Date(reports.updatedTime);\n                setLastUpdated(\n                    `${timeDifference(new Date(), updatedTime)} - ${d3.timeFormat('%B %d, %I:%M %p')(\n                        new Date(updatedTime)\n                    )}`\n                );\n            }\n\n            // let a = d3.timeFormat('%B %d, %I:%M %p')(new Date(reports.updatedTime));\n            // console.log(a);\n\n            let totalPopulation = d3.sum(Object.values(POPULATION));\n\n            let testingData = getFormattedTestingData(reports.testing_data_imcr, totalPopulation, 'Total');\n            setTestingData(testingData);\n\n            setDisplayCards(getCards(reports, reports.today));\n\n            let mapInitData = {\n                confirmed: reports.confirmed,\n                active: reports.active,\n                recovered: reports.recovered,\n                dead: reports.dead,\n                name: 'India',\n                today: reports.today,\n            };\n            setMapInitData(mapInitData);\n\n            let tableData = Object.values(reports.states); //.filter(row => row.confirmed > 0);\n            setStateData(tableData);\n\n            // s\n            let t = {};\n            tableData.forEach((state) => {\n                t[state.name] = state;\n            });\n            setStateDataMapped(t);\n\n            setTableData({\n                rows: tableData,\n                columns: [\n                    {name: 'state/UT', accessor: 'name'},\n                    {\n                        name: IS_MOBILE_DEVICE ? 'cnfmd' : 'confirmed',\n                        accessor: 'confirmed',\n                        colorClass: 'red',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'actv' : 'active',\n                        accessor: 'active',\n                        colorClass: 'orange',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'Rcvrd' : 'recovered',\n                        accessor: 'recovered',\n                        colorClass: 'green',\n                    },\n                    {\n                        name: 'dead',\n                        accessor: 'dead',\n                        colorClass: 'gray',\n                    },\n                ],\n            });\n\n            // daily trend\n            setDailyChart(dailyChart);\n\n            // sort the st\n\n            let states = Object.values(reports.states).filter((state) => state.confirmed > 50);\n\n            // set the factors\n            states.forEach((state) => {\n                state.deathRateByRecovery = toFixedNumber((state.dead / (state.recovered + state.dead)) * 100, 2);\n                state.deathRateByTotal = toFixedNumber((state.dead / state.confirmed) * 100, 2);\n                state.recoveryRateByTotal = toFixedNumber((state.recovered / state.confirmed) * 100, 2);\n            });\n\n            // *************************************************************************** //\n\n            // stacked chart\n            states.sort(function (a, b) {\n                return d3.descending(a.confirmed, b.confirmed);\n            });\n\n            let barSeriesNames = ['confirmed', 'recovered', 'dead'],\n                stateBarSeries = dailyTrend(states, 'name', barSeriesNames),\n                stateBarStacked = clone(stateBar);\n\n            stateBarSeries.forEach((series, i) => {\n                stateBarStacked.seriesdata.chartdata[i] = {data: series, seriesname: toCapitalize(barSeriesNames[i])};\n            });\n            setStateStackedChart(stateBarStacked);\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.deathRateByRecovery, b.deathRateByRecovery);\n                });\n\n                let lineSeriesColumns = ['confirmed', 'recovered', 'dead', 'deathRateByRecovery'],\n                    lineSeriesNames = ['confirmed', 'recovered', 'dead', 'Death Ratio'],\n                    stateBarSeriesLine = dailyTrend(states, 'name', lineSeriesColumns),\n                    deathTrendChart = clone(stateBar);\n\n                deathTrendChart.canvas.title.text = 'Death Ratio By Total Recoveries';\n                deathTrendChart.canvas.subtitle = {text: 'Death Ratio = Deaths / (Deaths + Recoveries)', show: true};\n                deathTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                deathTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                stateBarSeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames[i]),\n                    };\n                    if (i === stateBarSeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = 'rgb(171, 16, 23)';\n                    }\n                    deathTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setDeathTrendChart(deathTrendChart);\n            }\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.deathRateByTotal, b.deathRateByTotal);\n                });\n\n                let lineSeriesColumns = ['confirmed', 'recovered', 'dead', 'deathRateByTotal'],\n                    lineSeriesNames = ['confirmed', 'recovered', 'dead', 'death rate'],\n                    stateBarSeriesLine = dailyTrend(states, 'name', lineSeriesColumns),\n                    deathTrendChart = clone(stateBar);\n\n                deathTrendChart.canvas.title.text = 'Death Ratio By Total Confirmed';\n                deathTrendChart.canvas.subtitle = {text: 'Death Ratio = Deaths / (Deaths + Recoveries)', show: false};\n                deathTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                deathTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                stateBarSeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames[i]),\n                    };\n                    if (i === stateBarSeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = 'rgb(171, 16, 23)';\n                    }\n                    deathTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setDeathTrendTotalChart(deathTrendChart);\n            }\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.recoveryRateByTotal, b.recoveryRateByTotal);\n                });\n\n                let lineSeriesColumns1 = ['confirmed', 'recovered', 'dead', 'recoveryRateByTotal'],\n                    lineSeriesNames1 = ['confirmed', 'recovered', 'dead', 'recovery rate'],\n                    recoverySeriesLine = dailyTrend(states, 'name', lineSeriesColumns1),\n                    recoveryTrendChart = clone(stateBar);\n\n                recoveryTrendChart.canvas.title.text = 'Recovery Ratio By Total Infected';\n                recoveryTrendChart.canvas.subtitle = {text: 'States With  > 50 Confirmed Cases', show: true};\n                recoveryTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                recoveryTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                recoverySeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames1[i]),\n                    };\n                    if (i === recoverySeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = '#00897B';\n                    }\n                    recoveryTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setRecoveryTrendChart(recoveryTrendChart);\n            }\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.confirmed, b.confirmed);\n                });\n\n                var parseTime = d3.timeParse('%b %d, %Y');\n                let march1 = new Date(2020, 1, 29);\n\n                let data = states.slice(0, 15).map((state) => {\n                    let history = state.history.filter((row) => {\n                        return parseTime(row.date) > march1;\n                    });\n\n                    let data = dailyTrend(history, 'date', ['confirmed'], true)[0];\n\n                    return {\n                        seriesname: state.name,\n                        type: 'line',\n                        data: data,\n                    };\n                });\n                let stateCasesChart = clone(dailyChart);\n                stateCasesChart.canvas.title.text = 'Total Confirmed Cases By States';\n                data.forEach((s, i) => {\n                    stateCasesChart.seriesdata.chartdata[i] = s;\n                });\n                setStateCases(stateCasesChart);\n            }\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.confirmed, b.confirmed);\n                });\n\n                let data = states.slice(0, 20).map((state) => {\n                    let data = dailyTrend(state.history, '$index', ['confirmed'], true)[0];\n                    return {\n                        seriesname: state.name,\n                        type: 'line',\n                        data: data,\n                    };\n                });\n\n                let colors = [\n                    '#f44336',\n                    '#E91E63',\n                    '#9C27B0',\n                    '#673AB7',\n                    '#3F51B5',\n                    '#2196F3',\n                    '#03A9F4',\n                    '#00BCD4',\n                    '#009688',\n                    '#4CAF50',\n                    '#8BC34A',\n                    '#CDDC39',\n                    '#FFEB3B',\n                    '#FFC107',\n                    '#FF9800',\n                    '#FF5722',\n                    '#795548',\n                    '#9E9E9E',\n                    '#607D8B',\n                ];\n\n                let stateCasesChartLog = clone(dailyChart);\n                data.forEach((s, i) => {\n                    stateCasesChartLog.seriesdata.chartdata[i] = s;\n                });\n                stateCasesChartLog.chart.axes.xaxis.threshold = {};\n                stateCasesChartLog.chart.axes.xaxis.tickCount = 5;\n                stateCasesChartLog.chart.axes.xaxis.label = {\n                    text: 'No. Of Days Since 1st Confirmed Case',\n                };\n                stateCasesChartLog.chart.axes.xaxis.ticklabel.alignMode = 'rotate(45)';\n                stateCasesChartLog.metadata.columns[0] = {\n                    datatype: 'numeric',\n                    columnname: 'Day',\n                    dataindex: 0,\n                    numeric: {\n                        axisformat: {\n                            prefix: 'Day ',\n                        },\n                    },\n                };\n                stateCasesChartLog.chart.axes.yaxis[0].scaleType = 'log';\n                stateCasesChartLog.legend.colors = colors;\n                stateCasesChartLog.canvas.title.text = 'Statewise Growth trend';\n                stateCasesChartLog.canvas.subtitle = {text: 'Top 20 States', show: true};\n\n                setGrowthRateChart(stateCasesChartLog);\n            }\n\n            {\n                let wordcloudSeries = dailyTrend(Object.values(reports.states), 'name', ['confirmed']),\n                    wordCloudChart = clone(stateBar);\n\n                wordCloudChart.canvas.title.text = 'Word Cloud of Affected States and UTs';\n                wordCloudChart.chart.axes.yaxis[0].label.text = 'Total';\n                wordCloudChart.seriesdata.chartdata[0] = {\n                    type: 'wordcloud',\n                    data: wordcloudSeries,\n                    seriesname: 'Confirmed',\n                };\n                wordCloudChart.legend.colors = ['#E91E63'];\n                wordCloudChart.legend.enabled = false;\n                wordCloudChart.chart.plot.plotoptions.wordcloud = {\n                    minSize: '2.5%',\n                    legendHighlightEffect: {\n                        selectedSeries: 'invert',\n                    },\n                };\n                setWordcloudChart(wordCloudChart);\n            }\n\n            {\n                percentChartJson.seriesdata.chartdata[0] = {\n                    type: 'pie',\n                    data: [\n                        ['Active', reports.active],\n                        ['Recovered', reports.recovered],\n                        ['dead', reports.dead],\n                    ],\n                };\n                setPercentChart(percentChartJson);\n            }\n\n            //\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    function callbackMap(point) {\n        // setStateDataMapped\n        let state = stateDataMapped[point.name],\n            totalPopulation = POPULATION[state.stateCode];\n        let testingData = getFormattedTestingData(state.testing_data, totalPopulation, state.name);\n        setTestingData(testingData);\n    }\n\n    function goToStatePage(event, {point}) {\n        let stateCode = tableData.rows.find((row) => row.name === point[0]).stateCode;\n        history.push('/state/' + stateCode);\n    }\n\n    let last = null;\n    function tapCallback(event, data, mapInstance) {\n        // console.log(data.point[0])\n        // fix for tapping same data twice\n        let mouse = d3.mouse(mapInstance.container.node());\n        let latLong = mapInstance.geo.utils.projection.invert(mouse);\n        let point = mapInstance.rendererArrangedReveresd[0].getPoint(latLong, mouse, 0);\n\n        if (data.point[0] === last && point) {\n            return goToStatePage(event, data);\n        }\n\n        last = data.point[0];\n        window.d3.event.allowDefault = true;\n    }\n\n    /**\n     *\n     * @param chart\n     * @param name\n     */\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    function animationDelay(i) {\n        return {animationDelay: i * 200 + 'ms'};\n    }\n\n    function getMapAndTable() {\n        return (\n            <React.Fragment>\n                <Helmet>\n                    <title>Coronavirus Outbreak in India - track-covid19.in</title>\n                    <meta name=\"title\" content=\"Coronavirus Outbreak in India}: Latest Map and Case Count\" />\n                    <meta\n                        name=\"description\"\n                        content={`Live statistics of Coronavirus (COVID-19) in India. Track the confirmed cases, recovered patients, and death toll of India due to the COVID-19 coronavirus.`}\n                    />\n                </Helmet>\n                <div className=\"flex justify-between fade-in my-6\" style={animationDelay(2)}>\n                    <div className=\"text-blue-600 items-center justify-center\">\n                        <div className=\"text-xs py-1\">\n                            Tested <span className=\"font-bold\">{testingData.label}</span>\n                        </div>\n                        <div className=\"text-xl font-bold\">{testingData.tested}</div>\n                        {testingData.date}\n                    </div>\n                    <div className=\"text-blue-600 items-center justify-center text-right\">\n                        <div className=\"text-xs py-1\">\n                            Population{' '}\n                            <a rel=\"noopener\" target=\"_blank\" className=\"bg-blue-100\" href={PUPULATION_SOURCE}>\n                                2019\n                            </a>\n                        </div>\n                        <div className=\"text-sm font-bold\">{testingData.population}</div>\n                        <div className=\"text-sm font-bold\">{testingData.test_per_million} tests / million people</div>\n                    </div>\n                </div>\n\n                <div className=\"fade-in\" style={animationDelay(4)}>\n                    <Map\n                        initCardData={mapInitData}\n                        seriesPoints={stateData}\n                        stateCode={'IND'}\n                        joinBy={'name'}\n                        data={tableData}\n                        cards={['confirmed', 'active', 'recovered', 'dead']}\n                        callback={callbackMap}\n                        clickCallback={goToStatePage}\n                        tapCallback={tapCallback}\n                    />\n                </div>\n\n                <div className=\"w-full my-6 fade-in\" style={animationDelay(6)}>\n                    {fetched && <Table rows={tableData.rows} columns={tableData.columns} link={true} />}\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <div className={'container'}>\n            {spinner && (\n                <div className=\"flex items-center justify-center fixed h-screen w-full z-10\" style={{left: 0, top: 0}}>\n                    <div className=\"lds-dual-ring\"></div>\n                </div>\n            )}\n            {fetched && (\n                <div className=\"opacity-0 my-2 fade-in\">\n                    <h1 className=\"font-bold mb-8 text-center md:text-2xl text-xl\">Live Covid-19 statistcs - India</h1>\n                    <div className=\"flex flex-wrap justify-center\">\n                        <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                            <div className=\"flex justify-between text-primary font-bold items-center my-2\">\n                                <div className=\"flex\">\n                                    <Button\n                                        onClick={shareTheApp}\n                                        color=\"primary\"\n                                        className=\"bg-primary\"\n                                        endIcon={<ShareIcon />}\n                                    >\n                                        Share\n                                    </Button>\n                                </div>\n                                <div className=\"text-right text-xs mb-2\">\n                                    <h2 className=\"\">Last Updated</h2>\n                                    <h2 id=\"lastUpdated\" className=\"capitalize\">\n                                        {lastUpdated}\n                                    </h2>\n                                </div>\n                            </div>\n\n                            <div className=\"w-full fade-in mb-4\" style={animationDelay(1)}>\n                                <DisplayCard ref={childRef} cards={displayCards} count={2000} />\n                            </div>\n\n                            {IS_MOBILE_DEVICE && getMapAndTable()}\n\n                            <div className=\"w-full fade-in mb-4 border\" style={animationDelay(3)}>\n                                <TrendGraph chartJson={dailyChart} history={data.history} />\n                            </div>\n\n                            <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(5)}>\n                                <Chart seriesData={stateCases} name=\"state_cases\" callback={chartCallback} />\n                            </div>\n\n                            <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(4)}>\n                                <Chart seriesData={growthRateChart} name=\"growth\" callback={chartCallback} />\n                            </div>\n\n                            <div className=\"w-full fade-in md:w-40 mb-4 percent-chart border\" style={animationDelay(6)}>\n                                <Chart seriesData={percentChart} name=\"percent\" callback={chartCallback} />\n                            </div>\n\n                            <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(7)}>\n                                <Chart seriesData={wordcloudChart} name=\"wordcloud\" callback={chartCallback} />\n                            </div>\n                            <div className=\"w-full md:w-40 mb-4 state-bar border fade-in\" style={animationDelay(9)}>\n                                <Chart seriesData={stateStackedChart} name=\"stacked\" callback={chartCallback} />\n                            </div>\n                        </div>\n                        <div className=\"w-full md:w-40 md:mx-10\">\n                            {IS_DESKTOP && getMapAndTable()}\n\n                            <div className=\"w-full md:w-40 mb-4 state-bar border fade-in\" style={animationDelay(11)}>\n                                <Chart seriesData={recoveryTrendChart} name=\"recovery_trend\" callback={chartCallback} />\n                            </div>\n\n                            <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(8)}>\n                                <Chart\n                                    seriesData={deathTrendTotalChart}\n                                    name=\"recovery_trend\"\n                                    callback={chartCallback}\n                                />\n                            </div>\n\n                            <div className=\"w-full md:w-40 mb-4 state-bar border fade-in\" style={animationDelay(10)}>\n                                <Chart seriesData={deathTrendChart} name=\"death_trend\" callback={chartCallback} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default Home;\n","export const STATE_CODES = {\n    AP: 'Andhra Pradesh',\n    AR: 'Arunachal Pradesh',\n    AS: 'Assam',\n    BR: 'Bihar',\n    CT: 'Chhattisgarh',\n    GA: 'Goa',\n    GJ: 'Gujarat',\n    HR: 'Haryana',\n    HP: 'Himachal Pradesh',\n    JH: 'Jharkhand',\n    KA: 'Karnataka',\n    KL: 'Kerala',\n    MP: 'Madhya Pradesh',\n    MH: 'Maharashtra',\n    MN: 'Manipur',\n    ML: 'Meghalaya',\n    MZ: 'Mizoram',\n    NL: 'Nagaland',\n    OR: 'Odisha',\n    PB: 'Punjab',\n    RJ: 'Rajasthan',\n    SK: 'Sikkim',\n    TN: 'Tamil Nadu',\n    TG: 'Telangana',\n    TR: 'Tripura',\n    UT: 'Uttarakhand',\n    UP: 'Uttar Pradesh',\n    WB: 'West Bengal',\n    AN: 'Andaman and Nicobar',\n    CH: 'Chandigarh',\n    DN: 'Dadra and Nagar Haveli',\n    DD: 'Daman and Diu',\n    DL: 'Delhi',\n    JK: 'Jammu and Kashmir',\n    LA: 'Ladakh',\n    LD: 'Lakshadweep',\n    PY: 'Puducherry',\n};\n","import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport {Helmet} from 'react-helmet';\nimport {STATE_CODES} from '../constants/state-code';\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction Helpline({}) {\n    const [fetched, setFetched] = useState(false);\n    const [helplines, setHelplines] = useState(false);\n\n    useEffect(() => {\n        if (fetched === false) {\n            getHelplines();\n        }\n    }, [fetched]);\n\n    const getHelplines = async () => {\n        try {\n            const [{data: helplines}] = await Promise.all([axios.get('data/helplines.json')]);\n            setHelplines(helplines);\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    /**\n     *\n     * @param value\n     * @param type\n     * @return {string|*}\n     */\n    const formatLinkType = (value, type) => {\n        if (type === 'phone') {\n            return `tel:${value}`;\n        } else if (type === 'whatsapp') {\n            return `whatsapp://send?phone=${value}`;\n        } else if (type === 'email') {\n            return `mailto:${type}`;\n        }\n        return value;\n    };\n\n    return (\n        <React.Fragment>\n            <Helmet>\n                <title>Helplines for Coronavirus Queries - track-covid19.in</title>\n                <meta name=\"title\" content=\"Helplines for Coronavirus Queries - track-covid19.in\" />\n            </Helmet>\n            <div className={'container px-4'} id=\"help-lines\">\n                {Object.keys(helplines).map((key, i) => {\n                    return (\n                        <div key={i}>\n                            <div className=\"fade-in border-l-2 border-primary text-primary font-bold p-2 uppercase my-2\">\n                                <span className=\"ml-1\">{key}</span>\n                            </div>\n                            <div className={'flex flex-wrap -mx-2'}>\n                                {helplines[key].map((helpline, j) => {\n                                    return (\n                                        <div\n                                            key={`${JSON.stringify(helpline)}`}\n                                            className={\n                                                'fade-in md:w-auto w-full shadow px-4 py-2 text-base mx-2 my-2 md:flex-basis-250'\n                                            }\n                                            style={{animationDelay: 30 * j + 'ms'}}\n                                        >\n                                            <div className=\"font-bold\">{helpline.name}</div>\n                                            <a\n                                                className=\"pr-2 underline text-blue-500\"\n                                                href={formatLinkType(helpline.number, helpline.type)}\n                                            >\n                                                {helpline.number}\n                                            </a>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Helpline;\n","import React, {useEffect, useRef, useState} from 'react';\nimport DisplayCard from './display-card';\nimport axios from 'axios';\nimport Table from './table';\nimport Map from './Map';\nimport {Link, useHistory, useParams} from 'react-router-dom';\nimport {STATE_CODES} from '../constants/state-code';\nimport {POPULATION, PUPULATION_SOURCE} from '../constants/population.js';\nimport {getFormattedTestingData} from '../utils/format-test';\nimport TrendGraph from './trend-chart';\nimport {IS_MOBILE_DEVICE, shareTheApp} from '../utils/common-utils';\nimport Chart from './Chart';\nimport {Helmet} from 'react-helmet';\nimport {Button} from '@material-ui/core';\nimport ShareIcon from '@material-ui/icons/Share';\n\nconst d3 = window.d3;\n\nfunction State({}) {\n    const [fetched, setFetched] = useState(false);\n    const [tableData, setTableData] = useState({rows: [], columns: []});\n    const [mapInitData, setMapInitData] = useState({});\n    const [testingData, setTestingData] = useState({});\n    const [spinner, setSpinner] = useState(true);\n    const childRef = useRef();\n\n    const {stateCode} = useParams();\n    const history = useHistory();\n\n    const stateName = STATE_CODES[stateCode];\n    const statesKeys = Object.keys(STATE_CODES);\n\n    // if (childRef.current) {\n    //     setInterval(function () {\n    //         childRef.current.updateDisplayCardCounts(Math.random());\n    //     }, 1000);\n    // }\n\n    const getCards = (total = {}, today = {}) => {\n        return [\n            {\n                name: 'Confirmed',\n                value: total.confirmed,\n                delta: today.confirmed,\n                colorClass: 'red',\n            },\n            {\n                name: 'Active',\n                value: total.active,\n                delta: today.active,\n                colorClass: 'orange',\n            },\n            {\n                name: 'Recovered',\n                value: total.recovered,\n                delta: today.recovered,\n                colorClass: 'green',\n            },\n            {\n                name: 'Dead',\n                value: total.dead,\n                delta: today.dead,\n                colorClass: 'gray',\n            },\n        ];\n    };\n\n    const [displayCards, setDisplayCards] = useState(getCards());\n    const [districtData, setDistrictData] = useState([]);\n    const [dailyChart, setDailyChart] = useState(null);\n    const [caseHistory, setCaseHistory] = useState(null);\n    const [chartStore, updateChartStore] = useState({});\n    const [percentChart, setPercentChart] = useState({});\n    const [updatedTime, setUpdatedTime] = useState();\n    const [zones, setZones] = useState();\n\n    useEffect(() => {\n        setFetched(false);\n        getData();\n    }, [stateCode]);\n\n    const getData = async () => {\n        try {\n            let [\n                {data: district_data},\n                {data: state_data},\n                {data: dailyChart},\n                {data: percentChartJson},\n                {data: zones},\n            ] = await Promise.all([\n                axios.get('https://api.track-corona.in/district_v2.json'),\n                axios.get('https://api.track-corona.in/reports_v2.json'),\n                axios.get('/charts/daily.json'),\n                axios.get('/charts/percent-chart.json'),\n                axios.get('/data/zones.json'),\n            ]);\n\n            // hide spinner\n            setSpinner(false);\n\n            let districtInfo = district_data[stateCode];\n            let stateInfo = state_data.states[stateCode];\n            let {testing_data} = stateInfo;\n            let state_population = POPULATION[stateCode];\n\n            var formatTime = d3.timeFormat('%B %d, %I:%M%p IST');\n            setUpdatedTime(districtInfo.updatedTime ? formatTime(new Date(districtInfo.updatedTime)) : '-');\n\n            let testingData = getFormattedTestingData(testing_data, state_population, districtInfo.state);\n            setTestingData(testingData);\n\n            setDisplayCards(getCards(stateInfo, stateInfo.today));\n            setDistrictData(districtInfo.districts);\n\n            let mapInitData = {\n                confirmed: districtInfo.confirmed,\n                active: districtInfo.active,\n                recovered: districtInfo.recovered,\n                dead: districtInfo.dead,\n                name: districtInfo.state,\n                today: districtInfo.today,\n            };\n            setMapInitData(mapInitData);\n\n            setTableData({\n                rows: districtInfo.districts,\n                columns: [\n                    {name: 'district', accessor: 'district'},\n                    {\n                        name: IS_MOBILE_DEVICE ? 'cnfmd' : 'confirmed',\n                        accessor: 'confirmed',\n                        colorClass: 'red',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'actv' : 'active',\n                        accessor: 'active',\n                        colorClass: 'orange',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'Rcvrd' : 'recovered',\n                        accessor: 'recovered',\n                        colorClass: 'green',\n                    },\n                    {\n                        name: 'dead',\n                        accessor: 'dead',\n                        colorClass: 'gray',\n                    },\n                ],\n            });\n\n            setDailyChart(dailyChart);\n            if (stateInfo.history) {\n                setCaseHistory(stateInfo.history);\n            }\n\n            {\n                percentChartJson.seriesdata.chartdata[0] = {\n                    type: 'pie',\n                    data: [\n                        ['Active', stateInfo.active],\n                        ['Recovered', stateInfo.recovered],\n                        ['Dead', stateInfo.dead],\n                    ],\n                };\n                if (stateInfo.confirmed > 0) {\n                    setPercentChart(percentChartJson);\n                }\n            }\n\n            setZones(zones[stateCode]);\n\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const changeStatePage = (event) => {\n        history.push('/state/' + event.target.value);\n    };\n\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    return (\n        <React.Fragment>\n            <Helmet>\n                <title>Coronavirus Outbreak in {STATE_CODES[stateCode]} - track-covid19.in</title>\n                <meta\n                    name=\"title\"\n                    content={`Coronavirus Outbreak in ${STATE_CODES[stateCode]}: Latest Map and Case Count`}\n                />\n                <meta\n                    name=\"description\"\n                    content={`Live statistics of Coronavirus (COVID-19) in ${STATE_CODES[stateCode]} - India. Track the confirmed cases, recovered patients, and death toll of India due to the COVID-19 coronavirus.`}\n                />\n            </Helmet>\n            <div className=\"container\">\n                {spinner && (\n                    <div\n                        className=\"flex items-center justify-center fixed h-screen w-full z-10\"\n                        style={{left: 0, top: 0}}\n                    >\n                        <div className=\"lds-dual-ring\"></div>\n                    </div>\n                )}\n                {fetched && (\n                    <div className=\"opacity-0 my-6 fade-in\">\n                        <div className=\"flex flex-wrap justify-center\">\n                            <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                                <div className=\"w-full md:w-40 font-bold cursor-pointer flex pb-6 text-xs text-gray-600 items-center\">\n                                    <Link to={'/'}>Home</Link> <span className=\"px-1\">/</span>\n                                    <select\n                                        onChange={changeStatePage}\n                                        defaultValue={stateCode}\n                                        name=\"states\"\n                                        className=\"bg-gray-200 font-bold appearance-none py-1 px-2 state-select\"\n                                    >\n                                        {statesKeys.map((key) => {\n                                            return (\n                                                <option value={key} key={key}>\n                                                    {STATE_CODES[key]}\n                                                </option>\n                                            );\n                                        })}\n                                    </select>\n                                </div>\n\n                                <div className=\"flex justify-between text-primary font-bold items-center my-6\">\n                                    <div>\n                                        <h1 className=\"font-extra-bold text-primary text-3xl\">{stateName}</h1>\n                                        <div className=\"text-sm text-gray-700 font-bold\">\n                                            Last updated on {updatedTime}\n                                        </div>\n                                    </div>\n                                    <div>\n                                        <Button\n                                            onClick={shareTheApp}\n                                            color=\"primary\"\n                                            className=\"bg-primary\"\n                                            endIcon={<ShareIcon />}\n                                        >\n                                            Share\n                                        </Button>\n                                    </div>\n                                </div>\n\n                                <div className=\"w-full fade-in\">\n                                    <DisplayCard ref={childRef} cards={displayCards} count={2000} />\n                                </div>\n                                <div className={`w-full my-6 ${fetched ? 'fade-in anim-delay-1' : ''}`}>\n                                    <Table rows={tableData.rows} columns={tableData.columns} />\n                                </div>\n                            </div>\n                            <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                                <div className=\"\">\n                                    <div className=\"flex justify-between fade-in anim-delay-2\">\n                                        <div className=\"text-blue-600 items-center justify-center p-2\">\n                                            <div className=\"text-xs py-1\">Tested</div>\n                                            <div className=\"text-xl font-bold\">{testingData.tested}</div>\n                                            {testingData.date}\n                                        </div>\n                                        <div className=\"text-blue-600 items-center justify-center text-right p-2\">\n                                            <div className=\"text-xs py-1\">\n                                                Population{' '}\n                                                <a\n                                                    rel=\"noopener\"\n                                                    target=\"_blank\"\n                                                    className=\"bg-blue-100\"\n                                                    href={PUPULATION_SOURCE}\n                                                >\n                                                    2019\n                                                </a>\n                                            </div>\n                                            <div className=\"text-sm font-bold\">{testingData.population}</div>\n                                            <div className=\"text-sm font-bold\">\n                                                {testingData.test_per_million} tests / million people\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"fade-in opacity-0  anim-delay-2 py-4\">\n                                        <Map\n                                            initCardData={mapInitData}\n                                            stateCode={stateCode}\n                                            seriesPoints={districtData}\n                                            joinBy={'district'}\n                                            cards={['confirmed', 'active', 'recovered', 'dead']}\n                                            zones={zones}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"flex flex-wrap justify-center\">\n                            <div className=\"w-full md:w-40 md:mx-10 border my-6\">\n                                {dailyChart && <TrendGraph chartJson={dailyChart} history={caseHistory} />}\n                            </div>\n\n                            <div className=\"w-full md:w-40 md:mx-10 border my-6\" style={{height: '400px'}}>\n                                <Chart seriesData={percentChart} name=\"percent\" callback={chartCallback} />\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default State;\n","import {useEffect} from 'react';\nimport {useLocation} from 'react-router-dom';\n\nexport default function ScrollToTop() {\n    const {pathname} = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return null;\n}\n","import React from 'react';\nimport {BrowserRouter, Route, Redirect, Switch} from 'react-router-dom';\n\nimport Navbar from './components/navbar';\nimport Home from './components/home';\nimport Helpline from './components/helplines';\nimport State from './components/state';\nimport './styles/styles.css';\nimport ScrollToTop from './utils/scroll-top';\nimport {Helmet} from 'react-helmet';\nimport Analytics from 'react-router-ga';\n\nfunction App() {\n    const pages = [\n        {\n            pageLink: '/',\n            view: Home,\n            displayName: 'Home',\n            showInNavbar: true,\n        },\n        {\n            pageLink: '/helplines',\n            view: Helpline,\n            displayName: 'Helplines',\n            showInNavbar: true,\n        },\n        {\n            pageLink: '/state/:stateCode',\n            view: State,\n            displayName: 'State',\n            showInNavbar: false,\n        },\n    ];\n\n    const schemaMarkup = {\n        '@context': 'http://schema.org/',\n        '@type': 'NGO',\n        name: 'Coronavirus Outbreak in India: Latest Map and Case Count',\n        alternateName: 'COVID-19 Tracker',\n        url: 'https://track-covid-19.in',\n        image: 'https://www.track-covid19.in/server/covid-app/images/cms.png',\n    };\n\n    return (\n        <div className=\"App\">\n            <Helmet>\n                <script type=\"application/ld+json\">{JSON.stringify(schemaMarkup)}</script>\n            </Helmet>\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <ScrollToTop />\n                <Analytics id=\"UA-165660871-1\">\n                    <Route\n                        render={({location}) => (\n                            <div className=\"Routing\">\n                                <Navbar pages={pages} />\n                                <Switch location={location}>\n                                    {pages.map((page, index) => {\n                                        return (\n                                            <Route\n                                                exact\n                                                path={page.pageLink}\n                                                render={({match}) => (\n                                                    <page.view key={match.params.stateCode || index} />\n                                                )}\n                                                key={index}\n                                            />\n                                        );\n                                    })}\n                                    <Redirect to=\"/\" />\n                                </Switch>\n                            </div>\n                        )}\n                    />\n                </Analytics>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}