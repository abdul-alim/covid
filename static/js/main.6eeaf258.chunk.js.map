{"version":3,"sources":["components/navbar.jsx","components/arrow.js","components/display-card.jsx","components/table.jsx","utils/sort.js","components/text.js","components/Map.js","constants/population.js","utils/format-test.js","components/Chart.js","charts/daily.js","utils/common-utils.js","components/trend-chart.js","components/home.jsx","components/helplines.jsx","constants/state-code.js","components/state.jsx","utils/scroll-top.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","pages","useState","className","src","alt","map","page","i","showInNavbar","exact","to","pageLink","key","activeClassName","path","animationDelay","animationDelayForNavbar","window","location","pathname","style","displayName","Arrow","arrow","up","marginTop","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","points","DisplayCard","forwardRef","ref","count","cc","cards","styles","callback","setCards","name","activeCard","setActiveCard","updateActiveCard","card","useImperativeHandle","updateDisplayCardCounts","bg100","bg200","shadow","flexAuto","bg","colorClass","autoWidth","onClick","onTouchStart","delta","value","Table","props","columns","rows","filter","row","confirmed","setValues","useEffect","slice","sortRows","event","thisElement","currentTarget","prop","dataset","asc","ascending","sorted","sort","a","b","NaN","descending","column","data-prop","accessor","title","index","j","columnName","todayCount","extraClass","today","district","link","stateCode","colorMap","active","recovered","dead","tested","getCards","total","list","item","MapText","state","initCardData","child","React","createRef","data","this","setState","current","Component","d3","Map","handleMapHover","update","rawPoints","seriesPoints","joinBy","zones","codeLower","toLowerCase","scopeCode","mapExtents","max","d","colors","object_map","forEach","zoneMap","Promise","all","axios","get","toposjon","mapData","$ZC","mapCollections","availableNames","objects","source","geometries","name_ascii","properties","push","zone","includes","console","log","myDiv","classList","add","scope","seriesdata","chartdata","legend","colorBand","stops","last","tapCallback","clickCallback","mapAction","error","point","data_callback","allowDefault","defaultEvent","chart","plot","plotoptions","geoheatmap","events","mousemove","tap","click","maps","userdata","ranges","enabled","metadata","axes","clr","strokeColor","eventHandler","mapEvents","clearHighlightedPoints","redraw","selectAll","classed","target","bind","c","changeMapType","colorFinder","chartInstance","POPULATION","DL","HR","KL","HP","PB","GA","TG","UT","CH","LD","DN","GJ","CT","DD","AN","TN","MH","KA","OR","WB","PY","AP","JH","TR","MP","MZ","UP","RJ","SK","BR","MN","AR","JK","LA","NL","ML","AS","PUPULATION_SOURCE","parseTime","timeParse","formatTime","timeFormat","getFormattedTestingData","testing_data","totalPopulation","label","dateString","date","href","rel","toLocaleString","population","test_per_million","Math","round","Chart","seriesData","charts","dailyTrend","history","xKey","keys","cumulative","series","s","obj","prev","makeCumulative","toCapitalize","string","charAt","toUpperCase","toFixedNumber","number","decimal","tenToD","pow","Number","EPSILON","toFixed","clone","json","JSON","parse","stringify","IS_MOBILE_DEVICE","innerWidth","TrendGraph","chartJson","useRef","chartStore","updateChartStore","dailyChartMode","setDailyChartMode","timeFrame","setTimeFrame","setCumulative","trendTime","month","seriesNames","getTrendSeries","dailySeries","minRange","updateDailyChartCumulative","type","cumulativeL","daily","xaxis","length","seriesname","Fragment","id","defaultValue","onChange","scaleMode","yaxis","scaleType","setAttribute","parentElement","removeAttribute","remove","timeF","IS_DESKTOP","Home","fetched","setFetched","setData","tableData","setTableData","mapInitData","setMapInitData","testingData","setTestingData","stateDataMapped","setStateDataMapped","dailyChart","setDailyChart","stateStackedChart","setStateStackedChart","deathTrendChart","setDeathTrendChart","deathTrendTotalChart","setDeathTrendTotalChart","recoveryTrendChart","setRecoveryTrendChart","growthRateChart","setGrowthRateChart","stateCases","setStateCases","wordcloudChart","setWordcloudChart","percentChart","setPercentChart","useHistory","childRef","spinner","setSpinner","displayCards","setDisplayCards","stateData","setStateData","getData","reports","stateBar","percentChartJson","sum","Object","values","testing_data_imcr","states","t","deathRateByRecovery","deathRateByTotal","recoveryRateByTotal","stateBarSeries","barSeriesNames","stateBarStacked","lineSeriesNames","stateBarSeriesLine","canvas","text","subtitle","show","bar","stacked","yaxiscolumnorder","color","lineSeriesNames1","recoverySeriesLine","march1","Date","stateCasesChart","stateCasesChartLog","threshold","tickCount","ticklabel","alignMode","datatype","columnname","dataindex","numeric","axisformat","prefix","wordcloudSeries","wordCloudChart","wordcloud","minSize","legendHighlightEffect","selectedSeries","callbackMap","goToStatePage","find","mapInstance","mouse","container","node","latLong","geo","utils","projection","invert","rendererArrangedReveresd","getPoint","chartCallback","getMapAndTable","left","top","Helpline","helplines","setHelplines","getHelplines","helpline","STATE_CODES","State","useParams","stateName","statesKeys","districtData","setDistrictData","caseHistory","setCaseHistory","updatedTime","setUpdatedTime","setZones","district_data","state_data","districtInfo","stateInfo","state_population","districts","ScrollToTop","useLocation","scrollTo","App","view","basename","process","render","match","params","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6eeaf258.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst navLinkProps = (path, animationDelay) => ({\n    className: `${window.location.pathname === path ? 'focused' : ''}`,\n    style: {\n        animationDelay: `${animationDelay}s`,\n    },\n});\n\nfunction Navbar({pages}) {\n    const [expand, setExpand] = useState(false);\n    return (\n        <nav className=\"flex items-center flex-wrap bg-white text-primary py-2\">\n            <div className=\"container py-2 px-2 items-center font-bold text-lg\">\n                <div className=\"w-full flex items-center justify-between -my-2\">\n                    <div className=\"flex items-center cursor-pointer lg:flex\">\n                        <img\n                            src=\"/images/covid.svg\"\n                            alt=\"logo\"\n                            className=\"h-10 w-auto mr-3\"\n                        />\n                        <div className=\"text-xl font-bold text-black text-primary\">\n                            COVID-19 India\n                            <span className=\"text-red-600 uppercase live-txt blink\">\n                                Live\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"flex ml-auto mr-1\">\n                        {pages.map((page, i) => {\n                            if (page.showInNavbar === true) {\n                                return (\n                                    <NavLink\n                                        exact={true}\n                                        to={page.pageLink}\n                                        key={i}\n                                        className={\n                                            'mx-1 px-3 py-4 hidden lg:block nav-link'\n                                        }\n                                        activeClassName={\n                                            'relative nav-link-active'\n                                        }\n                                    >\n                                        <span\n                                            {...navLinkProps(\n                                                page.pageLink,\n                                                page.animationDelayForNavbar\n                                            )}\n                                        >\n                                            {page.displayName}\n                                        </span>\n                                    </NavLink>\n                                );\n                            }\n                            return null;\n                        })}\n                    </div>\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from \"react\";\n\n/**\n *\n * @return {string}\n * @constructor\n */\nfunction Arrow({up}) {\n    let arrow = up ? '5 12 12 5 19 12' : '5 12 12 19 19 12';\n    return (\n        <svg\n            style={{marginTop: '-0.14rem'}}\n            className=\"inline-block\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"10\"\n            height=\"10\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"3\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\" />\n            <polyline points={arrow} />\n        </svg>\n    );\n}\n\nexport default Arrow;\n","import React, {forwardRef, useImperativeHandle, useState} from 'react';\nimport Arrow from './arrow';\n\nconst DisplayCard = forwardRef(({count, cards: cc, styles = {}, callback}, ref) => {\n    let [cards, setCards] = useState(cc);\n    let [activeCard, setActiveCard] = useState(cards[0].name);\n\n    useImperativeHandle(ref, () => ({\n        updateDisplayCardCounts(cards) {\n            setCards(cards);\n        },\n    }));\n\n    function updateActiveCard(card) {\n        setActiveCard(card.name);\n        setCards([...cards]);\n    }\n\n    return (\n        <div className=\"flex flex-row justify-center my-5 justify-between\">\n            {cards.map((card, i) => {\n                let bg100, bg200, shadow, flexAuto;\n\n\n                if (styles.bg !== false || card.name === activeCard) {\n                    bg100 = `bg-${card.colorClass}-100`;\n                    bg200 = `bg-${card.colorClass}-200`;\n                }\n\n                if (styles.shadow !== false) {\n                    shadow = 'shadow';\n                }\n\n                if (styles.autoWidth !== false) {\n                    flexAuto = 'flex-auto';\n                }\n\n                callback = callback || (() => {});\n\n                return (\n                    <div\n                        onClick={() => {\n                            updateActiveCard(card, i);\n                            callback(card, i);\n                        }}\n                        onTouchStart={() => {\n                            updateActiveCard(card, i);\n                            callback(card, i);\n                        }}\n                        key={i}\n                        className={`${\n                            i ? 'ml-2' : ''\n                        } w-24 flex ${flexAuto} flex-col rounded overflow-hidden cursor-pointer ${shadow} text-center text-${\n                            card.colorClass\n                        }-600`}\n                    >\n                        <div className={`pt-2 flex flex-auto flex-col items-center justify-center ${bg100} font-bold`}>\n                            {\n                                <span className=\"text-xs\">\n                                    {card.delta ? <Arrow up={card.delta >= 0} /> : ''}\n                                    {card.delta}\n                                </span>\n                            }\n                            <span className=\"text-xl lg:text-2xl py-1\">{card.value + ''}</span>\n                        </div>\n                        <div className={`py-2 w-full ${bg200} text-sm font-semibold`}>\n                            <span className=\"capitalize\">{card.name}</span>\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n});\n\nexport default DisplayCard;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ascending, descending } from \"../utils/sort\";\nimport Arrow from \"./arrow\";\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction Table(props) {\n    let [{rows, columns}, setValues] = useState({\n        columns: props.columns,\n        rows: props.rows.filter((row) => row.confirmed > 0),\n    });\n\n    rows = rows.filter((row) => row.confirmed > 0);\n\n    useEffect(() => {\n        setValues({\n            columns: props.columns.slice(0),\n            rows: props.rows.slice(0),\n        });\n    }, [props]);\n\n    const sortRows = function (event) {\n        let thisElement = event.currentTarget,\n            {prop} = thisElement.dataset;\n\n        let asc = (thisElement.ascending = !thisElement.ascending);\n        let sorted = rows.slice(0).sort(function (a, b) {\n            return asc\n                ? descending(a[prop], b[prop])\n                : ascending(a[prop], b[prop]);\n        });\n        setValues({\n            rows: sorted,\n            columns,\n        });\n    };\n\n    return (\n        <table className=\"w-full\">\n            <tbody className=\"text-xs leading-tight border-b-2 cursor-pointer\">\n                <tr>\n                    {columns.map((column) => (\n                        <th\n                            className=\"capitalize border px-2 py-2 sort-by sticky bg-white\"\n                            key={column.name}\n                            onClick={sortRows}\n                            data-prop={column.accessor}\n                            title=\"Click to sort\"\n                        >\n                            {column.name}\n                        </th>\n                    ))}\n                </tr>\n            </tbody>\n            <tbody className=\"font-bold\">\n                {rows.map((row, index) => (\n                    <tr key={index}>\n                        {columns.map((column, j) => {\n                            let columnName = column.accessor,\n                                colorClass = column.colorClass,\n                                todayCount = 0,\n                                count = row[columnName],\n                                extraClass = '';\n\n                            if (row.today) {\n                                todayCount = row.today[columnName];\n                            }\n\n                            if (row.district === 'Unknown') {\n                                extraClass = `bg-${colorClass}-200 text-${colorClass}-600`;\n                            }\n\n                            //\n                            if (props.link && j === 0) {\n                                count = (\n                                    <Link to={`/state/${row.stateCode}`}>\n                                        {count}\n                                    </Link>\n                                );\n                            }\n\n                            return (\n                                <td\n                                    key={j}\n                                    className={`${\n                                        j === 0 ? 'bg-gray-200' : 'text-right'\n                                    }  text-2xs border px-2 py-2 ${extraClass}`}\n                                >\n                                    <span>\n                                        {j > 0 && todayCount ? (\n                                            <span\n                                                className={` mr-1 text-${colorClass}-600 break-words`}\n                                            >\n                                                <Arrow up={todayCount > 0} />\n                                                <span>{todayCount}</span>\n                                            </span>\n                                        ) : (\n                                            ''\n                                        )}\n                                    </span>\n                                    <span className=\"text-sm\">{count}</span>\n                                </td>\n                            );\n                        })}\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n}\n\nexport default Table;\n","/**\n *\n * @param a\n * @param b\n * @return {number}\n */\nfunction ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\n/**\n *\n * @param a\n * @param b\n * @return {number}\n */\nfunction descending(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n\nexport {ascending, descending};\n","import React from \"react\";\nimport DisplayCard from \"./display-card\";\n\nlet colorMap = {\n    confirmed: 'red',\n    active: 'orange',\n    recovered: 'green',\n    dead: 'gray',\n    tested: 'blue',\n};\n\nconst getCards = (total = {}, today = {}, list) => {\n    return list.map((item) => {\n        return {\n            name: item,\n            value: total[item],\n            delta: today[item],\n            colorClass: colorMap[item],\n        };\n    });\n};\n\nclass MapText extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = {...props.initCardData, cards: props.cards};\n        this.child = React.createRef();\n    }\n\n    update(data, today) {\n        this.setState(data);\n        let cards = getCards(data, today, this.props.cards);\n        this.child.current.updateDisplayCardCounts(cards);\n    }\n\n    render() {\n        let cards = getCards(this.state, this.state.today, this.props.cards);\n        let {name} = this.state;\n\n        return (\n            <div>\n                <h2 className=\"font-extra-bold text-xl text-primary my-2\">\n                    {name}\n                </h2>\n                <DisplayCard\n                    styles={{bg: false, autoWidth: false}}\n                    cards={cards}\n                    ref={this.child}\n                    callback={this.props.callback}\n                />\n            </div>\n        );\n    }\n}\nexport default MapText;\n","import React from 'react';\nimport axios from 'axios';\nimport MapText from './text';\nconst d3 = window.d3;\n\nclass Map extends React.Component {\n    constructor(props) {\n        super(props);\n        this.child = React.createRef();\n    }\n\n    handleMapHover = (data, today) => {\n        this.child.current.update(data, today);\n    };\n\n    async componentDidMount() {\n        let {stateCode, seriesPoints: rawPoints, joinBy, zones} = this.props,\n            codeLower = stateCode.toLowerCase(),\n            scopeCode = `countries-ind-${codeLower}-2`,\n            seriesPoints = [];\n\n        this.mapExtents = {\n            confirmed: {\n                count: d3.max(rawPoints, (d) => d.confirmed),\n                colors: ['#fff4ec', '#ff1100'],\n            },\n            active: {\n                count: d3.max(rawPoints, (d) => d.active),\n                colors: ['#fff4ec', '#f36f40'],\n            },\n            recovered: {\n                count: d3.max(rawPoints, (d) => d.recovered),\n                colors: ['#f4fcee', '#007e1a'],\n            },\n            dead: {\n                count: d3.max(rawPoints, (d) => d.dead),\n                colors: ['#fcfbfc', '#2f2f2f'],\n            },\n        };\n\n        // create a object map and then asign to the series poitns\n        let object_map = {};\n        rawPoints.forEach((row) => {\n            object_map[row[joinBy]] = row;\n        });\n\n        let zoneMap = {};\n        if (zones) {\n            zones.forEach((row) => {\n                zoneMap[row[0]] = row[1];\n            });\n        }\n\n        const [{data: toposjon}, {data: mapData}] = await Promise.all([\n            axios.get(`/maps/${stateCode}.topojson`),\n            axios.get('/charts/map.json'),\n        ]);\n\n        window.$ZC.mapCollections[scopeCode] = toposjon;\n\n        // create data for all available district\n        let availableNames = [];\n        seriesPoints = toposjon.objects.source.geometries.map(({properties: {name_ascii}}) => {\n            let confirmed = 0,\n                active = 0,\n                recovered = 0,\n                dead = 0;\n\n            if (object_map[name_ascii]) {\n                ({confirmed, active, recovered, dead} = object_map[name_ascii]);\n            }\n            availableNames.push(name_ascii);\n            let zone = null;\n            if (zones) {\n                zone = zoneMap[name_ascii];\n            }\n            return [name_ascii, confirmed, active, recovered, dead, zone];\n        });\n\n        // list the non matched names\n        rawPoints.forEach((row) => {\n            if (!availableNames.includes(row[joinBy])) {\n                console.log('map mitchmatch', row[joinBy]);\n            }\n        });\n\n        console.log('*****************************');\n\n        if (zones) {\n            zones.forEach((district) => {\n                if (!availableNames.includes(district[0])) {\n                    console.log('zone mitchmatch', district[0]);\n                }\n            });\n        }\n\n        if (this.myDiv) {\n            this.myDiv.classList.add('fade-in');\n            mapData.map.scope = scopeCode;\n            mapData.seriesdata.chartdata[0].data = [seriesPoints];\n\n            mapData.legend.colors = [...this.mapExtents.confirmed.colors];\n            mapData.legend.colorBand.stops = [0, this.mapExtents.confirmed.count];\n\n            let last = null,\n                {callback, tapCallback, clickCallback} = this.props;\n\n            const mapAction = (error, data) => {\n                let [name, confirmed, active, recovered, dead] = data.point,\n                    today = {recovered: 0, confirmed: 0, active: 0, dead: 0};\n\n                if (object_map[name]) {\n                    today = object_map[name].today;\n                }\n\n                let data_callback = {\n                    name,\n                    confirmed,\n                    active,\n                    recovered,\n                    dead,\n                };\n\n                if (name !== last) {\n                    this.handleMapHover(data_callback, today);\n                    last = name;\n                }\n\n                if (callback) {\n                    callback(data_callback, today);\n                }\n                window.d3.event.allowDefault = true;\n            };\n\n            let defaultEvent = () => (window.d3.event.allowDefault = true);\n\n            mapData.chart.plot.plotoptions.geoheatmap.events = {\n                mousemove: mapAction,\n                tap: (error, data) => {\n                    mapAction(error, data);\n                    if (tapCallback) {\n                        tapCallback(error, data, this.map);\n                    }\n                    window.d3.event.allowDefault = true;\n                },\n                click: clickCallback || defaultEvent,\n            };\n\n            this.map = window.$ZC.maps(this.myDiv, mapData);\n            window.chart = this.map;\n        }\n    }\n\n    callback(card, i) {\n        let colorMap = ['#e84b36', '#f88658', '#007e1a', '#2f2f2f'];\n        \n        this.map.userdata.legend.colors = [...this.mapExtents[card.name].colors];\n        this.map.userdata.legend.colorBand.stops = [0, this.mapExtents[card.name].count];\n    \n        this.map.userdata.legend.colorBand.ranges = null;\n        this.map.userdata.legend.filter.enabled = false;\n        this.map.userdata.metadata.axes.clr = [i + 1];\n        this.map.userdata.chart.plot.plotoptions.geoheatmap.strokeColor = colorMap[i];\n        this.map.eventHandler.mapEvents.clearHighlightedPoints()\n        this.map.redraw();\n    }\n\n    changeMapType(event) {\n        d3.selectAll('button').classed('text-primary', false);\n        event.target.classList.add('text-primary');\n\n        if (event.target.name === 'zone') {\n            this.map.userdata.legend.colors = ['#ff1100', '#f88658', '#009688'];\n            this.map.userdata.legend.colorBand.ranges = [['Red Zone'], ['Orange Zone'], ['Green Zone']];\n            this.map.userdata.chart.plot.plotoptions.geoheatmap.strokeColor = \"#ddd\";\n            this.map.userdata.legend.filter.enabled = true;\n            this.map.userdata.metadata.axes.clr = [5];\n            this.map.eventHandler.mapEvents.clearHighlightedPoints()\n            this.map.redraw();\n        } else {\n            this.callback({name: this.props.cards[0]}, 0)\n        }\n        \n    }\n\n    render() {\n        return (\n            <div>\n                <MapText\n                    ref={this.child}\n                    initCardData={this.props.initCardData}\n                    cards={this.props.cards}\n                    callback={this.callback.bind(this)}\n                />\n                <div className=\"live-map my-6\" ref={(c) => (this.myDiv = c)}></div>\n                {this.props.zones && (\n                    <div className=\"my-4 text-sm\">\n                        <button\n                            className=\"bg-gray-300 px-4 py-3 font-bold text-primary\"\n                            name=\"default\"\n                            onClick={this.changeMapType.bind(this)}\n                            onTouchStart={this.changeMapType.bind(this)}\n                        >\n                            Affected Areas\n                        </button>\n                        <button\n                            className=\"bg-gray-300 px-4 py-3 font-bold ml-2\"\n                            name=\"zone\"\n                            onClick={this.changeMapType.bind(this)}\n                            onTouchStart={this.changeMapType.bind(this)}\n                        >\n                            Zones\n                        </button>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nwindow.colorFinder = function (chartInstance, index, data) {\n    let colorIndex = chartInstance.userdata.metadata.axes.clr[0];\n\n    if (data[colorIndex] === 0) {\n        return 'white';\n    }\n};\n\nexport default Map;\n","export const POPULATION = {\n    DL: 18498192,\n    HR: 27793351,\n    KL: 35461849,\n    HP: 7384022,\n    PB: 29875481,\n    GA: 1564349,\n    TG: 38919054,\n    UT: 11140566,\n    CH: 1142479,\n    LD: 72172,\n    DN: 384058,\n    GJ: 64801901,\n    CT: 28989789,\n    DD: 223165,\n    AN: 411278,\n    TN: 77177540,\n    MH: 121924973,\n    KA: 66834193,\n    OR: 45861035,\n    WB: 98662146,\n    PY: 1394026,\n    AP: 53390841,\n    JH: 37933898,\n    TR: 4112223,\n    MP: 83849671,\n    MZ: 1222134,\n    UP: 233378519,\n    RJ: 79584255,\n    SK: 680721,\n    BR: 122256981,\n    MN: 3048861,\n    AR: 1548776,\n    JK: 13468313,\n    LA: 279924,\n    NL: 2218634,\n    ML: 3320226,\n    AS: 35080827,\n};\n\nexport const PUPULATION_SOURCE =\n    'https://uidai.gov.in/images/state-wise-aadhaar-saturation.pdf';\n\nexport const POPULATION_SOURCE_ARCHIVED =\n    'https://web.archive.org/web/20200229034831/https://uidai.gov.in/images/state-wise-aadhaar-saturation.pdf';\n","import React from 'react';\nconst d3 = window.d3;\nvar parseTime = d3.timeParse('%d/%m/%Y');\nvar formatTime = d3.timeFormat('%B %d');\n\n/**\n *\n * @param testing_data\n * @param totalPopulation\n * @param label\n * @return {{date: *, test_per_million: string, tested: string, label: string, population: string}}\n */\n\nexport function getFormattedTestingData(testing_data, totalPopulation, label) {\n    let dateString = '';\n\n    dateString = (\n        <div className=\"text-xs\">\n            {label === 'Total' ? 'As per latest IMCR ' : `Till ${formatTime(parseTime(testing_data.date))} as per `}\n            <a href={testing_data.source} rel=\"noopener\" className=\"bg-blue-100\" target=\"_blank\">\n                {label === 'Total' ? 'Report' : 'source'}\n            </a>\n        </div>\n    );\n\n    return {\n        tested: testing_data.tested.toLocaleString(),\n        date: dateString,\n        population: totalPopulation.toLocaleString(),\n        test_per_million: Math.round((testing_data.tested / totalPopulation) * 1000000).toLocaleString(),\n        label: ` - ${label}`,\n    };\n}\n","import React from 'react';\n\nclass Chart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.child = React.createRef();\n    }\n\n    async componentDidMount() {\n        let {seriesData, name, callback} = this.props;\n\n        if (this.myDiv) {\n            let chart = window.$ZC.charts(this.myDiv, seriesData);\n            if (callback) {\n                callback(chart, name);\n            }\n        }\n    }\n\n    render() {\n        return <div className=\"h-full\" ref={(c) => (this.myDiv = c)}></div>;\n    }\n}\n\nexport default Chart;\n","function makeCumulative(obj, key) {\n    let prev = 0;\n    obj.forEach((row) => {\n        row[key] += prev;\n        prev = row[key];\n    });\n}\n\nfunction dailyTrend(history, xKey, keys, cumulative, count) {\n    let series = keys.map((key) => {\n        return history.map((row, i) => {\n            if (xKey === '$index') {\n                return [i, row[key]];\n            }\n            return [row[xKey], row[key]];\n        });\n    });\n\n    if (cumulative) {\n        series.forEach((s) => {\n            makeCumulative(s, 1);\n        });\n    }\n\n    if (count) {\n        series = series.map((s) => s.slice(-count));\n    }\n\n    return series;\n}\n\nexport {dailyTrend, makeCumulative};\n","/**\n *\n * @param xs\n * @param key\n * @return {*}\n */\nexport function groupBy(xs, key) {\n    return xs.reduce(function (rv, x) {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n}\n\nexport function defined(obj) {\n    return obj !== undefined;\n}\n\nexport function toCapitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n *\n * @param number\n * @param decimal\n * @return {number}\n */\nexport function toFixedNumber(number, decimal) {\n    var tenToD = Math.pow(10, decimal);\n    return +(Math.round((number + Number.EPSILON) * tenToD) / tenToD).toFixed(decimal);\n}\n\n/**\n *\n * @param current\n * @param previous\n * @return {string}\n */\nexport function timeDifference(current, previous) {\n    var msPerMinute = 60 * 1000;\n    var msPerHour = msPerMinute * 60;\n    var msPerDay = msPerHour * 24;\n    var msPerMonth = msPerDay * 30;\n    var msPerYear = msPerDay * 365;\n    var elapsed = Math.max(0, current - previous),\n        r,\n        fixRelative = (num, str) => {\n            let t0 = num > 1 ? 's' : '';\n            if (str === 'day' && num === 1) {\n                return 'Yesterday';\n            }\n            return `${num} ${str}${t0} ago`;\n        };\n\n    if (elapsed < msPerMinute) {\n        return `${Math.round(elapsed / 1000)} seconds ago`;\n    } else if (elapsed < msPerHour) {\n        r = Math.round(elapsed / msPerMinute);\n        return fixRelative(r, 'minute');\n    } else if (elapsed < msPerDay) {\n        return fixRelative(Math.round(elapsed / msPerHour), 'hour');\n    } else if (elapsed < msPerMonth) {\n        return fixRelative(Math.round(elapsed / msPerDay), 'day');\n    } else if (elapsed < msPerYear) {\n        return fixRelative(Math.round(elapsed / msPerMonth), 'month');\n    } else {\n        return fixRelative(Math.round(elapsed / msPerYear), 'year');\n    }\n}\n\n/**\n *\n * @param json\n * @return {any}\n */\nexport function clone(json) {\n    return JSON.parse(JSON.stringify(json));\n}\n\nexport const IS_MOBILE_DEVICE = window.innerWidth < 769;\n","import React, {useEffect, useState, useRef} from 'react';\nimport Chart from './Chart';\nimport {dailyTrend} from '../charts/daily';\nimport {toCapitalize} from '../utils/common-utils';\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction TrendGraph(props) {\n    let {chartJson, history} = props;\n\n    const ref = useRef();\n    const [chartStore, updateChartStore] = useState({});\n    const [dailyChartMode, setDailyChartMode] = useState('cumulative');\n\n    const [timeFrame, setTimeFrame] = useState('month');\n    const [cumulative, setCumulative] = useState(true);\n\n    let trendTime = {'1week': 7, '2week': 14, month: 30},\n        seriesNames = ['confirmed', 'active', 'recovered', 'dead'];\n\n    /**\n     *\n     * @param chart\n     * @param name\n     */\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    function getTrendSeries(cumulative, count) {\n        // create the graph data\n        let seriesNames = ['confirmed', 'active', 'recovered', 'dead'];\n        let dailySeries = dailyTrend(history, 'date', seriesNames, cumulative, count);\n        return {\n            series: dailySeries,\n            minRange: dailySeries[0][0][0],\n        };\n    }\n\n    /**\n     *\n     * @param event\n     */\n    function updateDailyChartScaleMode(event) {\n        let chart = chartStore.daily;\n        let scaleMode = event.target.value;\n        chart.userdata.chart.axes.yaxis[0].scaleType = scaleMode;\n        if (scaleMode === 'log') {\n            setDailyChartMode('cumulative');\n            ref.current.setAttribute('disabled', true);\n            ref.current.parentElement.classList.add('text-gray-600');\n        } else {\n            ref.current.removeAttribute('disabled');\n            ref.current.parentElement.classList.remove('text-gray-600');\n        }\n        updateDailyChartCumulative(null, scaleMode);\n    }\n\n    /**\n     *\n     * @param event\n     */\n    function updateDailyChartCumulative(event, type) {\n        let cumulativeL = type || event.target.value === 'cumulative';\n        setCumulative(cumulativeL)\n\n        if (!type) {\n            setDailyChartMode(event.target.value);\n        }\n\n        let chart = chartStore.daily;\n        let {series, minRange} = getTrendSeries(cumulativeL, trendTime[timeFrame]);\n        series.forEach((s, i) => {\n            chart.userdata.seriesdata.chartdata[i].data = s;\n        });\n        chart.userdata.chart.axes.xaxis.minRange = minRange;\n        chart.redraw();\n    }\n\n    function updateTimeFrame(event) {\n        let timeF = event.target.value;\n        setTimeFrame(timeF);\n        let chart = chartStore.daily;\n        let {series, minRange} = getTrendSeries(cumulative, trendTime[timeF]);\n        series.forEach((s, i) => {\n            chart.userdata.seriesdata.chartdata[i].data = s;\n        });\n        chart.userdata.chart.axes.xaxis.minRange = minRange;\n        chart.redraw();\n    }\n\n    if (history.length) {\n        let {series, minRange} = getTrendSeries(true, trendTime[timeFrame]);\n        series.forEach((series, i) => {\n            chartJson.seriesdata.chartdata[i] = {data: series, seriesname: toCapitalize(seriesNames[i])};\n        });\n        chartJson.chart.axes.xaxis.minRange = minRange;\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"flex flex-auto z-10 my-2 items-center justify-center\">\n                <label className=\"flex items-center justify-center  text-sm mr-2\">\n                    <span>Scale</span>\n                    <select\n                        id=\"scale-mode\"\n                        className=\"bg-gray-200 text-left font-bold ml-1 rounded w-full flex\"\n                        defaultValue=\"linear\"\n                        onChange={updateDailyChartScaleMode}\n                    >\n                        <option value=\"linear\">Linear</option>\n                        <option value=\"log\">Log</option>\n                    </select>\n                </label>\n                <label className=\"flex items-center justify-center  text-sm \">\n                    <span>Mode: </span>\n                    <select\n                        id=\"trend-mode\"\n                        className=\"bg-gray-200 text-left font-bold ml-1 rounded w-full flex\"\n                        value={dailyChartMode}\n                        onChange={updateDailyChartCumulative}\n                        ref={ref}\n                    >\n                        <option value=\"cumulative\">Cumulative</option>\n                        <option value=\"daily\">Daily</option>\n                    </select>\n                </label>\n                <label className=\"flex items-center justify-center  text-sm ml-1 \">\n                    <span>Time: </span>\n                    <select\n                        id=\"trend-time\"\n                        className=\"bg-gray-200 text-left font-bold ml-1 rounded w-full flex\"\n                        defaultValue={timeFrame}\n                        onChange={updateTimeFrame}\n                    >\n                        <option value=\"1week\">1 Week</option>\n                        <option value=\"2week\">2 Weeks</option>\n                        <option value=\"month\">1 Month</option>\n                        <option value=\"all\">Beginning</option>\n                    </select>\n                </label>\n            </div>\n            <div className=\"trend-graph\">\n                <Chart seriesData={chartJson} name=\"daily\" callback={chartCallback} />\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default TrendGraph;\n","import React, {useEffect, useRef, useState} from 'react';\nimport DisplayCard from './display-card';\nimport axios from 'axios';\nimport Table from './table';\nimport Map from './Map';\nimport {POPULATION, PUPULATION_SOURCE} from '../constants/population';\nimport {getFormattedTestingData} from '../utils/format-test';\nimport Chart from './Chart';\nimport {dailyTrend} from '../charts/daily';\nimport {clone, IS_MOBILE_DEVICE, toCapitalize, toFixedNumber} from '../utils/common-utils';\nimport TrendGraph from './trend-chart';\nimport {useHistory} from 'react-router-dom';\nconst d3 = window.d3;\nconst IS_DESKTOP = !IS_MOBILE_DEVICE;\n\nfunction Home({}) {\n    const [fetched, setFetched] = useState(false);\n    const [data, setData] = useState({});\n    const [tableData, setTableData] = useState({rows: [], columns: []});\n    const [mapInitData, setMapInitData] = useState({});\n    const [testingData, setTestingData] = useState({});\n    const [stateDataMapped, setStateDataMapped] = useState({});\n    const [dailyChart, setDailyChart] = useState(null);\n    const [stateStackedChart, setStateStackedChart] = useState({});\n    const [deathTrendChart, setDeathTrendChart] = useState({});\n    const [deathTrendTotalChart, setDeathTrendTotalChart] = useState({});\n    const [recoveryTrendChart, setRecoveryTrendChart] = useState({});\n    const [growthRateChart, setGrowthRateChart] = useState({});\n    const [stateCases, setStateCases] = useState({});\n    const [wordcloudChart, setWordcloudChart] = useState({});\n    const [percentChart, setPercentChart] = useState({});\n    const history = useHistory();\n    const childRef = useRef();\n    const [chartStore, updateChartStore] = useState({});\n    const [spinner, setSpinner] = useState(true);\n\n    const getCards = (total = {}, today = {}) => {\n        return [\n            {\n                name: 'Confirmed',\n                value: total.confirmed,\n                delta: today.confirmed,\n                colorClass: 'red',\n            },\n            {\n                name: 'Active',\n                value: total.active,\n                delta: today.active,\n                colorClass: 'orange',\n            },\n            {\n                name: 'Recovered',\n                value: total.recovered,\n                delta: today.recovered,\n                colorClass: 'green',\n            },\n            {\n                name: 'Dead',\n                value: total.dead,\n                delta: today.dead,\n                colorClass: 'gray',\n            },\n        ];\n    };\n\n    const [displayCards, setDisplayCards] = useState(getCards());\n    const [stateData, setStateData] = useState([]);\n\n    useEffect(() => {\n        if (fetched === false) {\n            getData();\n        }\n    }, [fetched]);\n\n    const getData = async () => {\n        try {\n            let [{data: reports}, {data: dailyChart}, {data: stateBar}, {data: percentChartJson}] = await Promise.all([\n                axios.get('https://api.track-corona.in/reports_v2.json'),\n                axios.get('/charts/daily.json'),\n                axios.get('/charts/states.json'),\n                axios.get('/charts/percent-chart.json'),\n            ]);\n\n            setSpinner(false);\n            setData(reports);\n\n            let totalPopulation = d3.sum(Object.values(POPULATION));\n\n            let testingData = getFormattedTestingData(reports.testing_data_imcr, totalPopulation, 'Total');\n            setTestingData(testingData);\n\n            setDisplayCards(getCards(reports, reports.today));\n\n            let mapInitData = {\n                confirmed: reports.confirmed,\n                active: reports.active,\n                recovered: reports.recovered,\n                dead: reports.dead,\n                name: 'India',\n                today: reports.today,\n            };\n            setMapInitData(mapInitData);\n\n            let tableData = Object.values(reports.states); //.filter(row => row.confirmed > 0);\n            setStateData(tableData);\n\n            // s\n            let t = {};\n            tableData.forEach((state) => {\n                t[state.name] = state;\n            });\n            setStateDataMapped(t);\n\n            setTableData({\n                rows: tableData,\n                columns: [\n                    {name: 'state/UT', accessor: 'name'},\n                    {\n                        name: IS_MOBILE_DEVICE ? 'cnfmd' : 'confirmed',\n                        accessor: 'confirmed',\n                        colorClass: 'red',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'actv' : 'active',\n                        accessor: 'active',\n                        colorClass: 'orange',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'Rcvrd' : 'recovered',\n                        accessor: 'recovered',\n                        colorClass: 'green',\n                    },\n                    {\n                        name: 'dead',\n                        accessor: 'dead',\n                        colorClass: 'gray',\n                    },\n                ],\n            });\n\n            // daily trend\n            setDailyChart(dailyChart);\n\n            // sort the st\n\n            let states = Object.values(reports.states).filter((state) => state.confirmed > 50);\n\n            // set the factors\n            states.forEach((state) => {\n                state.deathRateByRecovery = toFixedNumber((state.dead / (state.recovered + state.dead)) * 100, 2);\n                state.deathRateByTotal = toFixedNumber((state.dead / state.confirmed) * 100, 2);\n                state.recoveryRateByTotal = toFixedNumber((state.recovered / state.confirmed) * 100, 2);\n            });\n\n            // *************************************************************************** //\n\n            // stacked chart\n            states.sort(function (a, b) {\n                return d3.descending(a.confirmed, b.confirmed);\n            });\n\n            let barSeriesNames = ['confirmed', 'recovered', 'dead'],\n                stateBarSeries = dailyTrend(states, 'name', barSeriesNames),\n                stateBarStacked = clone(stateBar);\n\n            stateBarSeries.forEach((series, i) => {\n                stateBarStacked.seriesdata.chartdata[i] = {data: series, seriesname: toCapitalize(barSeriesNames[i])};\n            });\n            setStateStackedChart(stateBarStacked);\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.deathRateByRecovery, b.deathRateByRecovery);\n                });\n\n                let lineSeriesColumns = ['confirmed', 'recovered', 'dead', 'deathRateByRecovery'],\n                    lineSeriesNames = ['confirmed', 'recovered', 'dead', 'Death Ratio'],\n                    stateBarSeriesLine = dailyTrend(states, 'name', lineSeriesColumns),\n                    deathTrendChart = clone(stateBar);\n\n                deathTrendChart.canvas.title.text = 'Death Ratio By Total Recoveries';\n                deathTrendChart.canvas.subtitle = {text: 'Death Ratio = Deaths / (Deaths + Recoveries)', show: true};\n                deathTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                deathTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                stateBarSeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames[i]),\n                    };\n                    if (i === stateBarSeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = 'rgb(171, 16, 23)';\n                    }\n                    deathTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setDeathTrendChart(deathTrendChart);\n            }\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.deathRateByTotal, b.deathRateByTotal);\n                });\n\n                let lineSeriesColumns = ['confirmed', 'recovered', 'dead', 'deathRateByTotal'],\n                    lineSeriesNames = ['confirmed', 'recovered', 'dead', 'death rate'],\n                    stateBarSeriesLine = dailyTrend(states, 'name', lineSeriesColumns),\n                    deathTrendChart = clone(stateBar);\n\n                deathTrendChart.canvas.title.text = 'Death Ratio By Total Confirmed';\n                deathTrendChart.canvas.subtitle = {text: 'Death Ratio = Deaths / (Deaths + Recoveries)', show: false};\n                deathTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                deathTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                stateBarSeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames[i]),\n                    };\n                    if (i === stateBarSeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = 'rgb(171, 16, 23)';\n                    }\n                    deathTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setDeathTrendTotalChart(deathTrendChart);\n            }\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.recoveryRateByTotal, b.recoveryRateByTotal);\n                });\n\n                let lineSeriesColumns1 = ['confirmed', 'recovered', 'dead', 'recoveryRateByTotal'],\n                    lineSeriesNames1 = ['confirmed', 'recovered', 'dead', 'recovery rate'],\n                    recoverySeriesLine = dailyTrend(states, 'name', lineSeriesColumns1),\n                    recoveryTrendChart = clone(stateBar);\n\n                recoveryTrendChart.canvas.title.text = 'Recovery Ratio By Total Infected';\n                recoveryTrendChart.canvas.subtitle = {text: 'States With  > 50 Confirmed Cases', show: true};\n                recoveryTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                recoveryTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                recoverySeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames1[i]),\n                    };\n                    if (i === recoverySeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = '#00897B';\n                    }\n                    recoveryTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setRecoveryTrendChart(recoveryTrendChart);\n            }\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.confirmed, b.confirmed);\n                });\n\n                var parseTime = d3.timeParse('%b %d, %Y');\n                let march1 = new Date(2020, 1, 29);\n\n                let data = states.slice(0, 15).map((state) => {\n                    let history = state.history.filter((row) => {\n                        return parseTime(row.date) > march1;\n                    });\n\n                    let data = dailyTrend(history, 'date', ['confirmed'], true)[0];\n\n                    return {\n                        seriesname: state.name,\n                        type: 'line',\n                        data: data,\n                    };\n                });\n                let stateCasesChart = clone(dailyChart);\n                stateCasesChart.canvas.title.text = 'Total Confirmed Cases By States';\n                data.forEach((s, i) => {\n                    stateCasesChart.seriesdata.chartdata[i] = s;\n                });\n                setStateCases(stateCasesChart);\n            }\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.confirmed, b.confirmed);\n                });\n\n                let data = states.slice(0, 20).map((state) => {\n                    let data = dailyTrend(state.history, '$index', ['confirmed'], true)[0];\n                    return {\n                        seriesname: state.name,\n                        type: 'line',\n                        data: data,\n                    };\n                });\n\n                let colors = [\n                    '#f44336',\n                    '#E91E63',\n                    '#9C27B0',\n                    '#673AB7',\n                    '#3F51B5',\n                    '#2196F3',\n                    '#03A9F4',\n                    '#00BCD4',\n                    '#009688',\n                    '#4CAF50',\n                    '#8BC34A',\n                    '#CDDC39',\n                    '#FFEB3B',\n                    '#FFC107',\n                    '#FF9800',\n                    '#FF5722',\n                    '#795548',\n                    '#9E9E9E',\n                    '#607D8B',\n                ];\n\n                let stateCasesChartLog = clone(dailyChart);\n                data.forEach((s, i) => {\n                    stateCasesChartLog.seriesdata.chartdata[i] = s;\n                });\n                stateCasesChartLog.chart.axes.xaxis.threshold = {};\n                stateCasesChartLog.chart.axes.xaxis.tickCount = 5;\n                stateCasesChartLog.chart.axes.xaxis.label = {\n                    text: 'No. Of Days Since 1st Confirmed Case',\n                };\n                stateCasesChartLog.chart.axes.xaxis.ticklabel.alignMode = 'rotate(45)';\n                stateCasesChartLog.metadata.columns[0] = {\n                    datatype: 'numeric',\n                    columnname: 'Day',\n                    dataindex: 0,\n                    numeric: {\n                        axisformat: {\n                            prefix: 'Day ',\n                        },\n                    },\n                };\n                stateCasesChartLog.chart.axes.yaxis[0].scaleType = 'log';\n                stateCasesChartLog.legend.colors = colors;\n                stateCasesChartLog.canvas.title.text = 'Statewise Growth trend';\n                stateCasesChartLog.canvas.subtitle = {text: 'Top 20 States', show: true};\n\n                setGrowthRateChart(stateCasesChartLog);\n            }\n\n            {\n                let wordcloudSeries = dailyTrend(Object.values(reports.states), 'name', ['confirmed']),\n                    wordCloudChart = clone(stateBar);\n\n                wordCloudChart.canvas.title.text = 'Word Cloud of Affected States and UTs';\n                wordCloudChart.chart.axes.yaxis[0].label.text = 'Total';\n                wordCloudChart.seriesdata.chartdata[0] = {\n                    type: 'wordcloud',\n                    data: wordcloudSeries,\n                    seriesname: 'Confirmed',\n                };\n                wordCloudChart.legend.colors = ['#E91E63'];\n                wordCloudChart.legend.enabled = false;\n                wordCloudChart.chart.plot.plotoptions.wordcloud = {\n                    minSize: '2.5%',\n                    legendHighlightEffect: {\n                        selectedSeries: 'invert',\n                    },\n                };\n                setWordcloudChart(wordCloudChart);\n            }\n\n            {\n                percentChartJson.seriesdata.chartdata[0] = {\n                    type: 'pie',\n                    data: [\n                        ['Active', reports.active],\n                        ['Recovered', reports.recovered],\n                        ['dead', reports.dead],\n                    ],\n                };\n                setPercentChart(percentChartJson);\n            }\n\n            //\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    function callbackMap(point) {\n        // setStateDataMapped\n        let state = stateDataMapped[point.name],\n            totalPopulation = POPULATION[state.stateCode];\n        let testingData = getFormattedTestingData(state.testing_data, totalPopulation, state.name);\n        setTestingData(testingData);\n    }\n\n    function goToStatePage(event, {point}) {\n        let stateCode = tableData.rows.find((row) => row.name === point[0]).stateCode;\n        history.push('/state/' + stateCode);\n    }\n\n    let last = null;\n    function tapCallback(event, data, mapInstance) {\n        // console.log(data.point[0])\n        // fix for tapping same data twice\n        let mouse = d3.mouse(mapInstance.container.node());\n        let latLong = mapInstance.geo.utils.projection.invert(mouse);\n        let point = mapInstance.rendererArrangedReveresd[0].getPoint(latLong, mouse, 0);\n\n        if (data.point[0] === last && point) {\n            return goToStatePage(event, data);\n        }\n\n        last = data.point[0];\n        window.d3.event.allowDefault = true;\n    }\n\n    /**\n     *\n     * @param chart\n     * @param name\n     */\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    function animationDelay(i) {\n        return {animationDelay: i * 200 + 'ms'};\n    }\n\n    function getMapAndTable() {\n        return (\n            <React.Fragment>\n                <div className=\"flex justify-between fade-in my-6\" style={animationDelay(2)}>\n                    <div className=\"text-blue-600 items-center justify-center\">\n                        <div className=\"text-xs py-1\">\n                            Tested <span className=\"font-bold\">{testingData.label}</span>\n                        </div>\n                        <div className=\"text-xl font-bold\">{testingData.tested}</div>\n                        {testingData.date}\n                    </div>\n                    <div className=\"text-blue-600 items-center justify-center text-right\">\n                        <div className=\"text-xs py-1\">\n                            Population{' '}\n                            <a rel=\"noopener\" target=\"_blank\" className=\"bg-blue-100\" href={PUPULATION_SOURCE}>\n                                2019\n                            </a>\n                        </div>\n                        <div className=\"text-sm font-bold\">{testingData.population}</div>\n                        <div className=\"text-sm font-bold\">{testingData.test_per_million} tests / million people</div>\n                    </div>\n                </div>\n\n                <div className=\"fade-in\" style={animationDelay(4)}>\n                    <Map\n                        initCardData={mapInitData}\n                        seriesPoints={stateData}\n                        stateCode={'IND'}\n                        joinBy={'name'}\n                        data={tableData}\n                        cards={['confirmed', 'active', 'recovered', 'dead']}\n                        callback={callbackMap}\n                        clickCallback={goToStatePage}\n                        tapCallback={tapCallback}\n                    />\n                </div>\n\n                <div className=\"w-full my-6 fade-in\" style={animationDelay(6)}>\n                    {fetched && <Table rows={tableData.rows} columns={tableData.columns} link={true} />}\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <div className={'container'}>\n            {spinner && (\n                <div className=\"flex items-center justify-center fixed h-screen w-full z-10\" style={{left: 0, top: 0}}>\n                    <div className=\"lds-dual-ring\"></div>\n                </div>\n            )}\n            {fetched && (\n                <div className=\"opacity-0 my-2 fade-in\">\n                    <h1 className=\"font-bold mb-8 text-center md:text-2xl text-xl\">Live Covid-19 statistcs - India</h1>\n                    <div className=\"flex flex-wrap justify-center\">\n                        <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                            <div className=\"w-full fade-in mb-4\" style={animationDelay(1)}>\n                                <DisplayCard ref={childRef} cards={displayCards} count={2000} />\n                            </div>\n\n                            {IS_MOBILE_DEVICE && getMapAndTable()}\n\n                            <div className=\"w-full fade-in mb-4 border\" style={animationDelay(3)}>\n                                <TrendGraph chartJson={dailyChart} history={data.history} />\n                            </div>\n\n                            <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(5)}>\n                                <Chart seriesData={stateCases} name=\"state_cases\" callback={chartCallback} />\n                            </div>\n\n                            <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(4)}>\n                                <Chart seriesData={growthRateChart} name=\"growth\" callback={chartCallback} />\n                            </div>\n\n                            <div className=\"w-full fade-in md:w-40 mb-4 percent-chart border\" style={animationDelay(6)}>\n                                <Chart seriesData={percentChart} name=\"percent\" callback={chartCallback} />\n                            </div>\n\n                            <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(7)}>\n                                <Chart seriesData={wordcloudChart} name=\"wordcloud\" callback={chartCallback} />\n                            </div>\n                            <div className=\"w-full md:w-40 mb-4 state-bar border fade-in\" style={animationDelay(9)}>\n                                <Chart seriesData={stateStackedChart} name=\"stacked\" callback={chartCallback} />\n                            </div>\n                        </div>\n                        <div className=\"w-full md:w-40 md:mx-10\">\n                            {IS_DESKTOP && getMapAndTable()}\n\n                            <div className=\"w-full md:w-40 mb-4 state-bar border fade-in\" style={animationDelay(11)}>\n                                <Chart seriesData={recoveryTrendChart} name=\"recovery_trend\" callback={chartCallback} />\n                            </div>\n\n                            <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(8)}>\n                                <Chart\n                                    seriesData={deathTrendTotalChart}\n                                    name=\"recovery_trend\"\n                                    callback={chartCallback}\n                                />\n                            </div>\n\n                            <div className=\"w-full md:w-40 mb-4 state-bar border fade-in\" style={animationDelay(10)}>\n                                <Chart seriesData={deathTrendChart} name=\"death_trend\" callback={chartCallback} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction Helpline({}) {\n    const [fetched, setFetched] = useState(false);\n    const [helplines, setHelplines] = useState(false);\n\n    useEffect(() => {\n        if (fetched === false) {\n            getHelplines();\n        }\n    }, [fetched]);\n\n    const getHelplines = async () => {\n        try {\n            const [{data: helplines}] = await Promise.all([\n                axios.get('data/helplines.json'),\n            ]);\n            setHelplines(helplines);\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    /**\n     *\n     * @param value\n     * @param type\n     * @return {string|*}\n     */\n    const formatLinkType = (value, type) => {\n        if (type === 'phone') {\n            return `tel:${value}`;\n        } else if (type === 'whatsapp') {\n            return `whatsapp://send?phone=${value}`;\n        } else if (type === 'email') {\n            return `mailto:${type}`;\n        }\n        return value;\n    };\n\n    return (\n        <div className={'container px-4'} id=\"help-lines\">\n            {Object.keys(helplines).map((key, i) => {\n                console.log(i * 10);\n                return (\n                    <div key={i}>\n                        <div className=\"fade-in border-l-2 border-primary text-primary font-bold p-2 uppercase my-2\">\n                            <span className=\"ml-1\">{key}</span>\n                        </div>\n                        <div\n                            className={'flex flex-wrap -mx-2'}\n                            \n                        >\n                            {helplines[key].map((helpline, j) => {\n                                return (\n                                    <div\n                                        key={`${JSON.stringify(helpline)}`}\n                                        className={\n                                            \n                                            'fade-in md:w-auto w-full shadow px-4 py-2 text-base mx-2 my-2 md:flex-basis-250'\n                                        }\n                                        style={{animationDelay: (30 * j) + 'ms'}}\n                                    >\n                                        <div className=\"font-bold\">\n                                            {helpline.name}\n                                        </div>\n                                        <a\n                                            className=\"pr-2 underline text-blue-500\"\n                                            href={formatLinkType(\n                                                helpline.number,\n                                                helpline.type\n                                            )}\n                                        >\n                                            {helpline.number}\n                                        </a>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default Helpline;\n","export const STATE_CODES = {\n    AP: 'Andhra Pradesh',\n    AR: 'Arunachal Pradesh',\n    AS: 'Assam',\n    BR: 'Bihar',\n    CT: 'Chhattisgarh',\n    GA: 'Goa',\n    GJ: 'Gujarat',\n    HR: 'Haryana',\n    HP: 'Himachal Pradesh',\n    JH: 'Jharkhand',\n    KA: 'Karnataka',\n    KL: 'Kerala',\n    MP: 'Madhya Pradesh',\n    MH: 'Maharashtra',\n    MN: 'Manipur',\n    ML: 'Meghalaya',\n    MZ: 'Mizoram',\n    NL: 'Nagaland',\n    OR: 'Odisha',\n    PB: 'Punjab',\n    RJ: 'Rajasthan',\n    SK: 'Sikkim',\n    TN: 'Tamil Nadu',\n    TG: 'Telangana',\n    TR: 'Tripura',\n    UT: 'Uttarakhand',\n    UP: 'Uttar Pradesh',\n    WB: 'West Bengal',\n    AN: 'Andaman and Nicobar',\n    CH: 'Chandigarh',\n    DN: 'Dadra and Nagar Haveli',\n    DD: 'Daman and Diu',\n    DL: 'Delhi',\n    JK: 'Jammu and Kashmir',\n    LA: 'Ladakh',\n    LD: 'Lakshadweep',\n    PY: 'Puducherry',\n};\n","import React, {useEffect, useRef, useState} from 'react';\nimport DisplayCard from './display-card';\nimport axios from 'axios';\nimport Table from './table';\nimport Map from './Map';\nimport {Link, useHistory, useParams} from 'react-router-dom';\nimport {STATE_CODES} from '../constants/state-code';\nimport {POPULATION, PUPULATION_SOURCE} from '../constants/population.js';\nimport {getFormattedTestingData} from '../utils/format-test';\nimport TrendGraph from './trend-chart';\nimport {clone, IS_MOBILE_DEVICE, timeDifference} from '../utils/common-utils';\nimport Chart from './Chart';\n\nconst d3 = window.d3;\n\nfunction State({}) {\n    const [fetched, setFetched] = useState(false);\n    const [tableData, setTableData] = useState({rows: [], columns: []});\n    const [mapInitData, setMapInitData] = useState({});\n    const [testingData, setTestingData] = useState({});\n    const [spinner, setSpinner] = useState(true);\n    const childRef = useRef();\n\n    const {stateCode} = useParams();\n    const history = useHistory();\n\n    const stateName = STATE_CODES[stateCode];\n    const statesKeys = Object.keys(STATE_CODES);\n\n    // if (childRef.current) {\n    //     setInterval(function () {\n    //         childRef.current.updateDisplayCardCounts(Math.random());\n    //     }, 1000);\n    // }\n\n    const getCards = (total = {}, today = {}) => {\n        return [\n            {\n                name: 'Confirmed',\n                value: total.confirmed,\n                delta: today.confirmed,\n                colorClass: 'red',\n            },\n            {\n                name: 'Active',\n                value: total.active,\n                delta: today.active,\n                colorClass: 'orange',\n            },\n            {\n                name: 'Recovered',\n                value: total.recovered,\n                delta: today.recovered,\n                colorClass: 'green',\n            },\n            {\n                name: 'Dead',\n                value: total.dead,\n                delta: today.dead,\n                colorClass: 'gray',\n            },\n        ];\n    };\n\n    const [displayCards, setDisplayCards] = useState(getCards());\n    const [districtData, setDistrictData] = useState([]);\n    const [dailyChart, setDailyChart] = useState(null);\n    const [caseHistory, setCaseHistory] = useState(null);\n    const [chartStore, updateChartStore] = useState({});\n    const [percentChart, setPercentChart] = useState({});\n    const [updatedTime, setUpdatedTime] = useState();\n    const [zones, setZones] = useState();\n\n    useEffect(() => {\n        setFetched(false);\n        getData();\n    }, [stateCode]);\n\n    const getData = async () => {\n        try {\n            let [\n                {data: district_data},\n                {data: state_data},\n                {data: dailyChart},\n                {data: percentChartJson},\n                {data: zones},\n            ] = await Promise.all([\n                axios.get('https://api.track-corona.in/district_v2.json'),\n                axios.get('https://api.track-corona.in/reports_v2.json'),\n                axios.get('/charts/daily.json'),\n                axios.get('/charts/percent-chart.json'),\n                axios.get('/data/zones.json'),\n            ]);\n\n            // hide spinner\n            setSpinner(false);\n\n            let districtInfo = district_data[stateCode];\n            let stateInfo = state_data.states[stateCode];\n            let {testing_data} = stateInfo;\n            let state_population = POPULATION[stateCode];\n\n            var formatTime = d3.timeFormat('%B %d, %I:%M%p IST');\n            setUpdatedTime(districtInfo.updatedTime ? formatTime(new Date(districtInfo.updatedTime)) : '-');\n\n            let testingData = getFormattedTestingData(testing_data, state_population, districtInfo.state);\n            setTestingData(testingData);\n\n            setDisplayCards(getCards(stateInfo, stateInfo.today));\n            setDistrictData(districtInfo.districts);\n\n            let mapInitData = {\n                confirmed: districtInfo.confirmed,\n                active: districtInfo.active,\n                recovered: districtInfo.recovered,\n                dead: districtInfo.dead,\n                name: districtInfo.state,\n                today: districtInfo.today,\n            };\n            setMapInitData(mapInitData);\n\n            setTableData({\n                rows: districtInfo.districts,\n                columns: [\n                    {name: 'district', accessor: 'district'},\n                    {\n                        name: IS_MOBILE_DEVICE ? 'cnfmd' : 'confirmed',\n                        accessor: 'confirmed',\n                        colorClass: 'red',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'actv' : 'active',\n                        accessor: 'active',\n                        colorClass: 'orange',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'Rcvrd' : 'recovered',\n                        accessor: 'recovered',\n                        colorClass: 'green',\n                    },\n                    {\n                        name: 'dead',\n                        accessor: 'dead',\n                        colorClass: 'gray',\n                    },\n                ],\n            });\n\n            setDailyChart(dailyChart);\n            if (stateInfo.history) {\n                setCaseHistory(stateInfo.history);\n            }\n\n            {\n                percentChartJson.seriesdata.chartdata[0] = {\n                    type: 'pie',\n                    data: [\n                        ['Active', stateInfo.active],\n                        ['Recovered', stateInfo.recovered],\n                        ['Dead', stateInfo.dead],\n                    ],\n                };\n                if (stateInfo.confirmed > 0) {\n                    setPercentChart(percentChartJson);\n                }\n            }\n\n            setZones(zones[stateCode]);\n\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const changeStatePage = (event) => {\n        history.push('/state/' + event.target.value);\n    };\n\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    return (\n        <div className=\"container\">\n            {spinner && (\n                <div className=\"flex items-center justify-center fixed h-screen w-full z-10\" style={{left: 0, top: 0}}>\n                    <div className=\"lds-dual-ring\"></div>\n                </div>\n            )}\n            {fetched && (\n                <div className=\"opacity-0 my-6 fade-in\">\n                    <div className=\"flex flex-wrap justify-center\">\n                        <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                            <div className=\"w-full md:w-40 font-bold cursor-pointer flex pb-6 text-xs text-gray-600 items-center\">\n                                <Link to={'/'}>Home</Link> <span className=\"px-1\">/</span>\n                                <select\n                                    onChange={changeStatePage}\n                                    defaultValue={stateCode}\n                                    name=\"states\"\n                                    className=\"bg-gray-200 font-bold appearance-none py-1 px-2 state-select\"\n                                >\n                                    {statesKeys.map((key) => {\n                                        return (\n                                            <option value={key} key={key}>\n                                                {STATE_CODES[key]}\n                                            </option>\n                                        );\n                                    })}\n                                </select>\n                            </div>\n\n                            <div className=\"my-6\">\n                                <h1 className=\"font-extra-bold text-primary text-3xl\">{stateName}</h1>\n                                <div className=\"text-sm text-gray-700 font-bold\">Last updated on {updatedTime}</div>\n                            </div>\n\n                            <div className=\"w-full fade-in\">\n                                <DisplayCard ref={childRef} cards={displayCards} count={2000} />\n                            </div>\n                            <div className={`w-full my-6 ${fetched ? 'fade-in anim-delay-1' : ''}`}>\n                                <Table rows={tableData.rows} columns={tableData.columns} />\n                            </div>\n                        </div>\n                        <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                            <div className=\"\">\n                                <div className=\"flex justify-between fade-in anim-delay-2\">\n                                    <div className=\"text-blue-600 items-center justify-center p-2\">\n                                        <div className=\"text-xs py-1\">\n                                            Tested <span className=\"font-bold\">{testingData.label}</span>\n                                        </div>\n                                        <div className=\"text-xl font-bold\">{testingData.tested}</div>\n                                        {testingData.date}\n                                    </div>\n                                    <div className=\"text-blue-600 items-center justify-center text-right p-2\">\n                                        <div className=\"text-xs py-1\">\n                                            Population{' '}\n                                            <a\n                                                rel=\"noopener\"\n                                                target=\"_blank\"\n                                                className=\"bg-blue-100\"\n                                                href={PUPULATION_SOURCE}\n                                            >\n                                                2019\n                                            </a>\n                                        </div>\n                                        <div className=\"text-sm font-bold\">{testingData.population}</div>\n                                        <div className=\"text-sm font-bold\">\n                                            {testingData.test_per_million} tests / million people\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"fade-in opacity-0  anim-delay-2 py-4\">\n                                    <Map\n                                        initCardData={mapInitData}\n                                        stateCode={stateCode}\n                                        seriesPoints={districtData}\n                                        joinBy={'district'}\n                                        cards={['confirmed', 'active', 'recovered', 'dead']}\n                                        zones={zones}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"flex flex-wrap justify-center\">\n                        <div className=\"w-full md:w-40 md:mx-10 state-bar border my-6\">\n                            {dailyChart && <TrendGraph chartJson={dailyChart} history={caseHistory} />}\n                        </div>\n\n                        <div className=\"w-full md:w-40 md:mx-10 border my-6\" style={{height: '400px'}}>\n                            <Chart seriesData={percentChart} name=\"percent\" callback={chartCallback} />\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default State;\n","import {useEffect} from 'react';\nimport {useLocation} from 'react-router-dom';\n\nexport default function ScrollToTop() {\n    const {pathname} = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return null;\n}\n","import React from 'react';\nimport {\n    BrowserRouter,\n    Route,\n    Redirect,\n    Switch,\n} from 'react-router-dom';\n\nimport Navbar from './components/navbar';\nimport Home from './components/home';\nimport Helpline from './components/helplines';\nimport State from './components/state';\nimport './styles/styles.css';\nimport ScrollToTop from \"./utils/scroll-top\";\n\nfunction App() {\n    const pages = [\n        {\n            pageLink: '/',\n            view: Home,\n            displayName: 'Home',\n            animationDelayForNavbar: 0.2,\n            showInNavbar: true,\n        },\n        {\n            pageLink: '/helplines',\n            view: Helpline,\n            displayName: 'Helplines',\n            animationDelayForNavbar: 0.6,\n            showInNavbar: true,\n        },\n        {\n            pageLink: '/state/:stateCode',\n            view: State,\n            displayName: 'State',\n            animationDelayForNavbar: 0.8,\n            showInNavbar: false,\n        },\n    ];\n\n    return (\n        <div className=\"App\">\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <ScrollToTop />\n                <Route\n                    render={({location}) => (\n                        <div className=\"Almighty-Router\">\n                            <Navbar pages={pages} />\n                            <Switch location={location}>\n                                {pages.map((page, index) => {\n                                    return (\n                                        <Route\n                                            exact\n                                            path={page.pageLink}\n                                            render={({match}) => (\n                                                <page.view\n                                                    key={\n                                                        match.params\n                                                            .stateCode || index\n                                                    }\n                                                />\n                                            )}\n                                            key={index}\n                                        />\n                                    );\n                                })}\n                                <Redirect to=\"/\" />\n                            </Switch>\n                        </div>\n                    )}\n                />\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}