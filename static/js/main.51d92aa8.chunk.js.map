{"version":3,"sources":["components/navbar.jsx","components/arrow.js","utils/common-utils.js","components/display-card.jsx","components/table.jsx","utils/sort.js","components/text.js","components/Map.js","constants/population.js","utils/format-test.js","components/Chart.js","charts/daily.js","components/trend-chart.js","components/meta-card.js","components/news-card.js","components/race-bar/useKeyframes.js","components/race-bar/AxisTop.js","components/race-bar/RacingAxisTop.js","components/race-bar/Bar.js","components/race-bar/RacingBarGroup.js","constants/colors.js","components/race-bar/RacingBarChart.js","constants/state-code.js","components/home.jsx","components/helplines.jsx","components/state.jsx","utils/scroll-top.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","pages","useState","className","exact","to","src","alt","map","page","i","showInNavbar","pageLink","key","activeClassName","path","animationDelay","animationDelayForNavbar","window","location","pathname","style","displayName","Arrow","up","rotate","arrow","transform","marginTop","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","points","toCapitalize","string","charAt","toUpperCase","slice","toFixedNumber","number","decimal","tenToD","Math","pow","round","Number","EPSILON","toFixed","timeDifference","current","previous","elapsed","max","fixRelative","num","str","t0","msPerMinute","msPerHour","msPerDay","clone","json","JSON","parse","stringify","IS_MOBILE_DEVICE","innerWidth","IS_SINGLE_COLUMN","shareTheApp","message","document","title","url","href","undefined","navigator","share","text","then","catch","error","shareUri","encodeURI","left","screen","w","top","h","open","shareURL","value","precision","multiplier","getStyle","el","prop","convertToInt","min","offsetWidth","scrollWidth","offsetHeight","scrollHeight","getComputedStyle","getPropertyValue","parseFloat","numberFormatLocal","toLocaleString","DisplayCard","forwardRef","ref","count","cc","cards","styles","callback","setCards","name","activeCard","setActiveCard","useImperativeHandle","updateDisplayCardCounts","card","bg100","bg200","shadow","flexAuto","bg","colorClass","autoWidth","onClick","updateActiveCard","delta","Table","props","columns","rows","filter","row","confirmed","setValues","useEffect","sortRows","event","thisElement","currentTarget","dataset","asc","ascending","sorted","sort","a","b","NaN","descending","column","data-prop","accessor","index","j","columnName","todayCount","extraClass","today","district","link","isUnknown","stateCode","colorMap","active","recovered","dead","tested","getCards","total","list","item","MapText","state","initCardData","child","React","createRef","data","this","setState","Component","d3","Map","handleMapHover","update","selected","mapType","rawPoints","seriesPoints","joinBy","zones","codeLower","toLowerCase","scopeCode","totalSummery","mapExtents","d","colors","object_map","forEach","zoneMap","Promise","all","axios","get","toposjon","mapData","$ZC","mapCollections","availableNames","objects","source","geometries","name_ascii","properties","push","zone","includes","console","log","myDiv","classList","add","scope","seriesdata","chartdata","legend","colorBand","stops","last","tapCallback","clickCallback","mapAction","point","data_callback","percent","container","attr","allowDefault","defaultEvent","chart","plot","plotoptions","geoheatmap","events","mousemove","mouseout","tap","click","maps","userdata","selectAll","classed","select","ranges","enabled","metadata","axes","clr","strokeColor","eventHandler","mapEvents","clearHighlightedPoints","redraw","target","indexOf","bind","c","changeMapType","onTouchStart","colorFinder","chartInstance","POPULATION","DL","HR","KL","HP","PB","GA","TG","UT","CH","LD","DN","GJ","CT","DD","AN","TN","MH","KA","OR","WB","PY","AP","JH","TR","MP","MZ","UP","RJ","SK","BR","MN","AR","JK","LA","NL","ML","AS","PUPULATION_SOURCE","parseTime","timeParse","formatTime","timeFormat","getFormattedTestingData","testing_data","totalPopulation","label","dateString","date","rel","populationNumeric","testedNumeric","population","test_per_million","Chart","seriesData","charts","updateCallback","dailyTrend","history","xKey","keys","cumulative","series","s","obj","prev","makeCumulative","TrendGraph","chartJson","useRef","chartStore","updateChartStore","timeFrame","setTimeFrame","setCumulative","trendTime","month","seriesNames","getTrendSeries","dailySeries","minRange","updateTimeFrame","frame","length","daily","seriesname","xaxis","canvas","show","checked","scaleState","setScaleState","cumulativeMode","setCumulativeMode","Fragment","FormControlLabel","control","Switch","size","onChange","color","disabled","scaleMode","yaxis","scaleType","type","NaNCheck","isNaN","MetaCard","report","tests","confirmedPerMillion","activePercent","recoveredPercent","deathPercent","testPerMillion","confirmedCumulative","growRatePerWeek","growthDateRange","lastWeek","yesterday","split","info","description","cardColor","reportLabel","Tooltip","placement","enterTouchDelay","regex","RegExp","join","overflow","wordBreak","NewsCard","articles","article","relativeTime","Date","publishedAt","match","iconDiv","icon","backgroundImage","urlToImage","lazy","makeKeyframes","numOfSlice","findData","dataByDateAndName","dataPoint","nextGroup","set","e","buildFindData","nameSet","Set","nameList","dateSet","frames","reduce","result","idx","next","prevTimestamp","getTime","diff","sliceDate","sliceData","others","prevValue","nextDataPoint","sliceValue","AxisTop","domainMax","xMax","numTicks","floor","xScaleForAxis","scaleLinear","domain","range","scale","tickLabelProps","textAnchor","dy","fontSize","AnimatedAxisTop","animated","RacingAxisTop","prevDomainMax","springProps","useSpring","from","Bar","x","y","opacity","dominantBaseline","AnimatedBar","RacingBarGroup","frameData","xScale","yScale","colorScale","useTransition","initial","leave","enter","unique","bandwidth","interpolate","v","COLOR_ARRAY1","COLOR_ARRAY3","RacingBarChart","parentRef","keyframes","categories","onStart","onStop","frameIdx","animationKey","playing","setAnimation","updateFrameRef","setTimeout","prevFrameIdx","isLastFrame","nextFrameIdx","chartDimension","setChartDimension","margin","scaleOrdinal","barGroupRef","axisRef","replay","clearTimeout","start","animation","stop","prevPlayingRef","useLayoutEffect","currentDate","values","yMax","useMemo","scaleBand","Array","_","padding","dateObj","dateInYear","getMonth","String","getDate","padStart","getFullYear","Group","defaultProps","right","bottom","STATE_CODES","Home","fetched","setFetched","setData","tableData","setTableData","mapInitData","setMapInitData","testingData","setTestingData","metaCardPopulation","setMetaCardPopulation","stateDataMapped","setStateDataMapped","dailyChart","setDailyChart","stateStackedChart","setStateStackedChart","deathTrendChart","setDeathTrendChart","deathTrendTotalChart","setDeathTrendTotalChart","recoveryTrendChart","setRecoveryTrendChart","growthRateChart","setGrowthRateChart","stateCases","setStateCases","wordcloudChart","setWordcloudChart","percentChart","setPercentChart","useHistory","childRef","lastUpdated","setLastUpdated","caseHistory","setCaseHistory","spinner","setSpinner","setArticles","setKeyFrames","displayCards","setDisplayCards","stateData","setStateData","getData","reports","indiaHistory","india","stateHistory","stateBar","percentChartJson","news","updatedTime","states","hasOwnProperty","stateTestHistory","sum","Object","testing_data_imcr","t","deathRateByRecovery","deathRateByTotal","recoveryRateByTotal","stateBarSeries","barSeriesNames","stateBarStacked","lineSeriesNames","stateBarSeriesLine","subtitle","bar","stacked","yaxiscolumnorder","lineSeriesNames1","recoverySeriesLine","march1","stateCasesChart","stateCasesChartLog","threshold","tickCount","ticklabel","alignMode","datatype","columnname","dataindex","numeric","axisformat","prefix","wordcloudSeries","wordCloudChart","wordcloud","minSize","legendHighlightEffect","selectedSeries","entries","entry","flat","callbackMap","goToStatePage","find","mapInstance","mouse","node","latLong","geo","utils","projection","invert","rendererArrangedReveresd","getPoint","chartCallback","getMapAndTable","ontouchstart","stateCodes","chartRef","forceUpdate","Helmet","content","Button","endIcon","id","marginLeft","IconButton","aria-label","headlines","Helpline","helplines","setHelplines","getHelplines","helpline","State","useParams","stateName","statesKeys","districtData","setDistrictData","setUpdatedTime","setZones","district_data","state_data","zonesV2","districtInfo","stateInfo","state_population","districts","totalKnownConfirmed","totalKnownRecovered","totalKnownDeaths","unknowns","zoneV2","defaultValue","ScrollToTop","useLocation","scrollTo","App","view","alternateName","image","basename","process","render","params","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.51d92aa8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst navLinkProps = (path, animationDelay) => ({\n    className: `${window.location.pathname === path ? 'focused' : ''}`,\n    style: {\n        animationDelay: `${animationDelay}s`,\n    },\n});\n\nfunction Navbar({pages}) {\n    const [expand, setExpand] = useState(false);\n    return (\n        <nav className=\"flex items-center flex-wrap bg-white text-primary py-2\">\n            <div className=\"container py-2 px-2 items-center font-bold text-lg\">\n                <div className=\"w-full flex items-center justify-between -my-2\">\n                    <NavLink exact={true} to='/' className=\"flex items-center cursor-pointer lg:flex\">\n                        <img\n                            src=\"/images/covid.svg\"\n                            alt=\"logo\"\n                            className=\"h-10 w-auto mr-3\"\n                        />\n                        <div className=\"text-xl font-bold text-black text-primary\">\n                            COVID-19 India\n                            <span className=\"text-red-600 uppercase live-txt blink\">\n                                Live\n                            </span>\n                        </div>\n                    </NavLink>\n                    <div className=\"flex ml-auto mr-1\">\n                        {pages.map((page, i) => {\n                            if (page.showInNavbar === true) {\n                                return (\n                                    <NavLink\n                                        exact={true}\n                                        to={page.pageLink}\n                                        key={i}\n                                        className={\n                                            'mx-1 px-3 py-4 hidden lg:block nav-link'\n                                        }\n                                        activeClassName={\n                                            'relative nav-link-active'\n                                        }\n                                    >\n                                        <span\n                                            {...navLinkProps(\n                                                page.pageLink,\n                                                page.animationDelayForNavbar\n                                            )}\n                                        >\n                                            {page.displayName}\n                                        </span>\n                                    </NavLink>\n                                );\n                            }\n                            return null;\n                        })}\n                    </div>\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from \"react\";\n\n/**\n *\n * @return {string}\n * @constructor\n */\nfunction Arrow({up, rotate = 0}) {\n    let arrow = up ? '5 12 12 5 19 12' : '5 12 12 19 19 12';\n    let transform = {};\n    if (rotate) {\n        transform.transform = `rotate(${rotate}deg)`;\n    }\n    return (\n        <svg\n            style={{marginTop: '-0.14rem', ...transform}}\n            className=\"inline-block\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"10\"\n            height=\"10\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"3\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\" />\n            <polyline points={arrow} />\n        </svg>\n    );\n}\n\nexport default Arrow;\n","/**\n *\n * @param xs\n * @param key\n * @return {*}\n */\nexport function groupBy(xs, key) {\n    return xs.reduce(function (rv, x) {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n}\n\nexport function defined(obj) {\n    return obj !== undefined;\n}\n\nexport function toCapitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n *\n * @param number\n * @param decimal\n * @return {number}\n */\nexport function toFixedNumber(number, decimal) {\n    var tenToD = Math.pow(10, decimal);\n    return +(Math.round((number + Number.EPSILON) * tenToD) / tenToD).toFixed(decimal);\n}\n\n/**\n *\n * @param current\n * @param previous\n * @return {string}\n */\nexport function timeDifference(current, previous) {\n    var msPerMinute = 60 * 1000;\n    var msPerHour = msPerMinute * 60;\n    var msPerDay = msPerHour * 24;\n    var msPerMonth = msPerDay * 30;\n    var msPerYear = msPerDay * 365;\n    var elapsed = Math.max(0, current - previous),\n        r,\n        fixRelative = (num, str) => {\n            let t0 = num > 1 ? 's' : '';\n            if (str === 'day' && num === 1) {\n                return 'Yesterday';\n            }\n            return `${num} ${str}${t0} ago`;\n        };\n\n    if (elapsed < msPerMinute) {\n        return `${Math.round(elapsed / 1000)} seconds ago`;\n    } else if (elapsed < msPerHour) {\n        r = Math.round(elapsed / msPerMinute);\n        return fixRelative(r, 'minute');\n    } else if (elapsed < msPerDay) {\n        return fixRelative(Math.round(elapsed / msPerHour), 'hour');\n    } else if (elapsed < msPerMonth) {\n        return fixRelative(Math.round(elapsed / msPerDay), 'day');\n    } else if (elapsed < msPerYear) {\n        return fixRelative(Math.round(elapsed / msPerMonth), 'month');\n    } else {\n        return fixRelative(Math.round(elapsed / msPerYear), 'year');\n    }\n}\n\n/**\n *\n * @param json\n * @return {any}\n */\nexport function clone(json) {\n    return JSON.parse(JSON.stringify(json));\n}\n\nexport const IS_MOBILE_DEVICE = window.innerWidth < 769;\nexport const IS_SINGLE_COLUMN = window.innerWidth < 1620;\n\n/**\n *\n * @param url\n * @param message\n * @return {Window}\n */\nfunction shareURL(url, message) {\n    const shareUri = `https://www.addtoany.com/share#url=${encodeURI(url)}&title=${encodeURI(message)}`;\n    const h = 500;\n    const w = 500;\n    const left = window.screen.width / 2 - w / 2;\n    const top = window.screen.height / 2 - h / 2;\n    return window.open(\n        shareUri,\n        document.title,\n        'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' +\n            w +\n            ', height=' +\n            h +\n            ', top=' +\n            top +\n            ', left=' +\n            left\n    );\n}\n\nexport function shareTheApp() {\n    const message = document.title,\n        url = window.location.href;\n\n    if (navigator.share !== undefined) {\n        navigator\n            .share({\n                title: message,\n                text: message,\n                url: url,\n            })\n            .then()\n            .catch((error) => {});\n    } else {\n        shareURL(url, message);\n    }\n}\n\nexport function round(value, precision) {\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(value * multiplier) / multiplier;\n}\n\nexport function isTouchDevice() {\n    return window.ontouchstart !== undefined;\n}\n\n/**\n *\n * @param el\n * @param prop\n * @param convertToInt\n * @return {CSSStyleDeclaration|string|number}\n */\nexport function getStyle(el, prop, convertToInt = true) {\n    var style;\n\n    // For width and height, return the actual inner pixel size\n    if (prop === 'width') {\n        return Math.min(el.offsetWidth, el.scrollWidth) - getStyle(el, 'padding-left') - getStyle(el, 'padding-right');\n    } else if (prop === 'height') {\n        return (\n            Math.min(el.offsetHeight, el.scrollHeight) - getStyle(el, 'padding-top') - getStyle(el, 'padding-bottom')\n        );\n    }\n\n    // Otherwise, get the computed style\n    style = window.getComputedStyle(el);\n\n    if (style) {\n        style = style.getPropertyValue(prop);\n        if (convertToInt) {\n            style = parseFloat(style);\n        }\n    }\n    return style;\n}\n\nexport function numberFormatLocal(number) {\n    if (typeof number === 'number') {\n        return number.toLocaleString('en-IN');\n    }\n    return number;\n}\n","import React, {forwardRef, useImperativeHandle, useState} from 'react';\nimport Arrow from './arrow';\nimport { numberFormatLocal } from \"../utils/common-utils\";\n\nconst DisplayCard = forwardRef(({count, cards: cc, styles = {}, callback}, ref) => {\n    let [cards, setCards] = useState(cc);\n    let [activeCard, setActiveCard] = useState(cards[0].name);\n\n    useImperativeHandle(ref, () => ({\n        updateDisplayCardCounts(cards) {\n            setCards(cards);\n        },\n    }));\n\n    function updateActiveCard(card) {\n        setActiveCard(card.name);\n        setCards([...cards]);\n    }\n\n    return (\n        <div className=\"flex flex-row justify-center my-5 justify-between\">\n            {cards.map((card, i) => {\n                let bg100, bg200, shadow, flexAuto;\n\n                if (styles.bg !== false || card.name === activeCard) {\n                    bg100 = `bg-${card.colorClass}-100`;\n                    bg200 = `bg-${card.colorClass}-200`;\n                }\n\n                if (styles.shadow !== false) {\n                    shadow = 'shadow';\n                }\n\n                if (styles.autoWidth !== false) {\n                    flexAuto = 'flex-auto';\n                }\n\n                callback = callback || (() => {});\n\n                return (\n                    <div\n                        onClick={() => {\n                            updateActiveCard(card, i);\n                            callback(card, i);\n                        }}\n                        key={i}\n                        className={`${\n                            i ? 'ml-2' : ''\n                        } w-24 flex ${flexAuto} flex-col rounded overflow-hidden cursor-pointer ${shadow} text-center text-${\n                            card.colorClass\n                        }-600`}\n                    >\n                        <div className={`pt-2 flex flex-auto flex-col items-center justify-center ${bg100} font-bold`}>\n                            {\n                                <span className=\"text-xs\">\n                                    {card.delta ? <Arrow up={card.delta >= 0} /> : ''}\n                                    {numberFormatLocal(card.delta)}\n                                </span>\n                            }\n                            <span className=\"text-xl py-1\">{numberFormatLocal(card.value)}</span>\n                        </div>\n                        <div className={`py-2 w-full ${bg200} text-sm font-semibold`}>\n                            <span className=\"capitalize\">{card.name}</span>\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n});\n\nexport default DisplayCard;\n","import React, {useEffect, useState} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {ascending, descending} from '../utils/sort';\nimport Arrow from './arrow';\nimport {numberFormatLocal} from '../utils/common-utils';\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction Table(props) {\n    let [{rows, columns}, setValues] = useState({\n        columns: props.columns,\n        rows: props.rows.filter((row) => row.confirmed > 0),\n    });\n\n    rows = rows.filter((row) => row.confirmed > 0);\n\n    useEffect(() => {\n        setValues({\n            columns: props.columns.slice(0),\n            rows: props.rows.slice(0),\n        });\n    }, [props]);\n\n    const sortRows = function (event) {\n        let thisElement = event.currentTarget,\n            {prop} = thisElement.dataset;\n\n        let asc = (thisElement.ascending = !thisElement.ascending);\n        let sorted = rows.slice(0).sort(function (a, b) {\n            return asc ? descending(a[prop], b[prop]) : ascending(a[prop], b[prop]);\n        });\n        setValues({\n            rows: sorted,\n            columns,\n        });\n    };\n\n    return (\n        <table className=\"w-full\">\n            <tbody className=\"text-xs leading-tight border-b-2 cursor-pointer\">\n                <tr>\n                    {columns.map((column) => (\n                        <th\n                            className=\"capitalize border px-2 py-2 sort-by sticky bg-white\"\n                            key={column.name}\n                            onClick={sortRows}\n                            data-prop={column.accessor}\n                            title=\"Click to sort\"\n                        >\n                            {column.name}\n                        </th>\n                    ))}\n                </tr>\n            </tbody>\n            <tbody className=\"\">\n                {rows.map((row, index) => {\n                    return (\n                        <tr key={index}>\n                            {columns.map((column, j) => {\n                                let columnName = column.accessor,\n                                    colorClass = column.colorClass,\n                                    todayCount = 0,\n                                    count = row[columnName],\n                                    extraClass = '';\n\n                                if (row.today) {\n                                    todayCount = row.today[columnName];\n                                }\n\n                                if (row.district === 'Unknown') {\n                                    extraClass = `bg-${colorClass}-200 text-${colorClass}-600`;\n                                }\n\n                                //\n                                if (props.link && j === 0 && !row.isUnknown) {\n                                    count = (\n                                        <Link to={`/state/${row.stateCode}`}>\n                                            {count}\n                                            <span className=\"ml-1 text-gray-600\">\n                                                <Arrow rotate={-90} />\n                                            </span>\n                                        </Link>\n                                    );\n                                } else {\n                                    count = numberFormatLocal(count);\n                                }\n\n                                return (\n                                    <td\n                                        key={j}\n                                        className={`${\n                                            j === 0 ? 'bg-gray-200 font-bold' : 'text-right'\n                                        }  text-2xs border px-2 py-2 ${extraClass}`}\n                                    >\n                                        <span>\n                                            {j > 0 && todayCount ? (\n                                                <span className={`text-${colorClass}-600 inline-block font-bold`}>\n                                                    <Arrow up={todayCount > 0} />\n                                                    {numberFormatLocal(todayCount)}\n                                                </span>\n                                            ) : (\n                                                ''\n                                            )}\n                                        </span>\n                                        <span className=\"text-xs ml-1\">{count}</span>\n                                    </td>\n                                );\n                            })}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </table>\n    );\n}\n\nexport default Table;\n","/**\n *\n * @param a\n * @param b\n * @return {number}\n */\nfunction ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\n/**\n *\n * @param a\n * @param b\n * @return {number}\n */\nfunction descending(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n\nexport {ascending, descending};\n","import React from \"react\";\nimport DisplayCard from \"./display-card\";\n\nlet colorMap = {\n    confirmed: 'red',\n    active: 'orange',\n    recovered: 'green',\n    dead: 'gray',\n    tested: 'blue',\n};\n\nconst getCards = (total = {}, today = {}, list) => {\n    return list.map((item) => {\n        return {\n            name: item,\n            value: total[item],\n            delta: today[item],\n            colorClass: colorMap[item],\n        };\n    });\n};\n\nclass MapText extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = {...props.initCardData, cards: props.cards};\n        this.child = React.createRef();\n    }\n\n    update(data, today) {\n        this.setState(data);\n        let cards = getCards(data, today, this.props.cards);\n        this.child.current.updateDisplayCardCounts(cards);\n    }\n\n    render() {\n        let cards = getCards(this.state, this.state.today, this.props.cards);\n        let {name} = this.state;\n\n        return (\n            <div>\n                <h2 className=\"font-extra-bold text-xl text-primary my-2\">\n                    {name}\n                </h2>\n                <DisplayCard\n                    styles={{bg: false, autoWidth: false}}\n                    cards={cards}\n                    ref={this.child}\n                    callback={this.props.callback}\n                />\n            </div>\n        );\n    }\n}\nexport default MapText;\n","import React from \"react\";\nimport axios from \"axios\";\nimport MapText from \"./text\";\n\nconst d3 = window.d3;\n\nclass Map extends React.Component {\n    constructor(props) {\n        super(props);\n        this.child = React.createRef();\n        this.selected = props.cards[0];\n        this.mapType = 'affected';\n    }\n\n    handleMapHover = (data, today) => {\n        this.child.current.update(data, today);\n    };\n\n    async componentDidMount() {\n        let {stateCode, seriesPoints: rawPoints, joinBy, zones} = this.props,\n            codeLower = stateCode.toLowerCase(),\n            scopeCode = `countries-ind-${codeLower}-2`,\n            seriesPoints = [],\n            totalSummery = this.props.initCardData;\n\n        this.mapExtents = {\n            confirmed: {\n                count: d3.max(rawPoints, (d) => d.confirmed),\n                colors: ['#fff4ec', '#ff1100'],\n            },\n            active: {\n                count: d3.max(rawPoints, (d) => d.active),\n                colors: ['#fff4ec', '#f36f40'],\n            },\n            recovered: {\n                count: d3.max(rawPoints, (d) => d.recovered),\n                colors: ['#f4fcee', '#007e1a'],\n            },\n            dead: {\n                count: d3.max(rawPoints, (d) => d.dead),\n                colors: ['#fcfbfc', '#2f2f2f'],\n            },\n        };\n\n        // create a object map and then asign to the series poitns\n        let object_map = {};\n        rawPoints.forEach((row) => {\n            object_map[row[joinBy]] = row;\n        });\n\n        let zoneMap = {};\n        if (zones) {\n            zones.forEach((row) => {\n                zoneMap[row[0]] = row[1];\n            });\n        }\n\n        const [{data: toposjon}, {data: mapData}] = await Promise.all([\n            axios.get(`/maps/${stateCode}.topojson`),\n            axios.get('/charts/map.json'),\n        ]);\n\n        window.$ZC.mapCollections[scopeCode] = toposjon;\n\n        // create data for all available district\n        let availableNames = [];\n        seriesPoints = toposjon.objects.source.geometries.map(({properties: {name_ascii}}) => {\n            let confirmed = 0,\n                active = 0,\n                recovered = 0,\n                dead = 0;\n\n            if (object_map[name_ascii]) {\n                ({confirmed, active, recovered, dead} = object_map[name_ascii]);\n            }\n            availableNames.push(name_ascii);\n            let zone = null;\n            if (zones) {\n                zone = zoneMap[name_ascii];\n            }\n            return [name_ascii, confirmed, active, recovered, dead, zone];\n        });\n\n        // list the non matched names\n        rawPoints.forEach((row) => {\n            if (!availableNames.includes(row[joinBy])) {\n                console.log('map mitchmatch', row[joinBy]);\n            }\n        });\n\n        console.log('*****************************');\n\n        if (zones) {\n            zones.forEach((district) => {\n                if (!availableNames.includes(district[0])) {\n                    console.log('zone mitchmatch', district[0]);\n                }\n            });\n        }\n\n        if (this.myDiv) {\n            this.myDiv.classList.add('fade-in');\n            mapData.map.scope = scopeCode;\n            mapData.seriesdata.chartdata[0].data = [seriesPoints];\n\n            mapData.legend.colors = [...this.mapExtents.confirmed.colors];\n            mapData.legend.colorBand.stops = [0, this.mapExtents.confirmed.count];\n\n            let last = null,\n                {callback, tapCallback, clickCallback} = this.props;\n\n            const mapAction = (error, data) => {\n                let [name, confirmed, active, recovered, dead] = data.point,\n                    today = {recovered: 0, confirmed: 0, active: 0, dead: 0};\n\n                if (object_map[name]) {\n                    today = object_map[name].today;\n                }\n\n                let data_callback = {\n                    name,\n                    confirmed,\n                    active,\n                    recovered,\n                    dead,\n                };\n\n                if (name !== last) {\n                    let total = totalSummery[this.selected] || 0.001,\n                        current = data_callback[this.selected] || 0,\n                        percent = parseFloat(100 * (current / total)).toFixed(2);\n\n                    // add title\n                    this.map.container.attr('title', `${percent}% ${this.selected} from ${data_callback.name}`);\n\n                    this.handleMapHover(data_callback, today);\n                    last = name;\n                }\n\n                if (callback) {\n                    callback(data_callback, today);\n                }\n                window.d3.event.allowDefault = true;\n            };\n\n            let defaultEvent = () => (window.d3.event.allowDefault = true);\n\n            mapData.chart.plot.plotoptions.geoheatmap.events = {\n                mousemove: mapAction,\n                mouseout: () => {\n                    this.map.container.attr('title', null);\n                    window.d3.event.allowDefault = true;\n                },\n                tap: (error, data) => {\n                    mapAction(error, data);\n                    if (tapCallback) {\n                        tapCallback(error, data, this.map);\n                    }\n                    window.d3.event.allowDefault = true;\n                },\n                click: clickCallback || defaultEvent,\n            };\n\n            this.map = window.$ZC.maps(this.myDiv, mapData);\n        }\n    }\n\n    callback(card, i) {\n        let colorMap = ['#e84b36', '#f88658', '#007e1a', '#2f2f2f'];\n\n        this.map.userdata.legend.colors = [...this.mapExtents[card.name].colors];\n        this.map.userdata.legend.colorBand.stops = [0, this.mapExtents[card.name].count];\n        this.selected = card.name;\n\n        // select the default button\n        d3.selectAll('button').classed('text-primary', false);\n        d3.select('button[name=default]').classed('text-primary', true);\n\n        this.map.userdata.legend.colorBand.ranges = null;\n        this.map.userdata.legend.filter.enabled = false;\n        this.map.userdata.metadata.axes.clr = [i + 1];\n        this.map.userdata.chart.plot.plotoptions.geoheatmap.strokeColor = colorMap[i];\n        this.map.eventHandler.mapEvents.clearHighlightedPoints();\n        this.map.redraw();\n    }\n\n    changeMapType(event) {\n        d3.selectAll('button').classed('text-primary', false);\n        event.target.classList.add('text-primary');\n\n        if (event.target.name === 'zone') {\n            this.mapType = 'zone';\n            this.map.userdata.legend.colors = ['#EF5350', '#FFA726', '#26A69A'];\n            this.map.userdata.legend.colorBand.ranges = [['Red Zone'], ['Orange Zone'], ['Green Zone']];\n            this.map.userdata.chart.plot.plotoptions.geoheatmap.strokeColor = '#333';\n            this.map.userdata.legend.filter.enabled = true;\n            this.map.userdata.metadata.axes.clr = [5];\n            this.map.eventHandler.mapEvents.clearHighlightedPoints();\n            this.map.redraw();\n        } else {\n            this.callback({name: this.selected}, this.props.cards.indexOf(this.selected));\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <MapText\n                    ref={this.child}\n                    initCardData={this.props.initCardData}\n                    cards={this.props.cards}\n                    callback={this.callback.bind(this)}\n                />\n                <div className=\"live-map my-6\" ref={(c) => (this.myDiv = c)}></div>\n                {this.props.zones && (\n                    <div className=\"my-4 text-sm\">\n                        <button\n                            className=\"bg-gray-300 px-4 py-3 font-bold text-primary\"\n                            name=\"default\"\n                            onClick={this.changeMapType.bind(this)}\n                            onTouchStart={this.changeMapType.bind(this)}\n                        >\n                            Affected Areas\n                        </button>\n                        <button\n                            className=\"bg-gray-300 px-4 py-3 font-bold ml-2\"\n                            name=\"zone\"\n                            onClick={this.changeMapType.bind(this)}\n                            onTouchStart={this.changeMapType.bind(this)}\n                        >\n                            Zones\n                        </button>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nwindow.colorFinder = function (chartInstance, index, data) {\n    let colorIndex = chartInstance.userdata.metadata.axes.clr[0];\n\n    if (data[colorIndex] === 0) {\n        return 'white';\n    }\n};\n\nexport default Map;\n","export const POPULATION = {\n    DL: 18498192,\n    HR: 27793351,\n    KL: 35461849,\n    HP: 7384022,\n    PB: 29875481,\n    GA: 1564349,\n    TG: 38919054,\n    UT: 11140566,\n    CH: 1142479,\n    LD: 72172,\n    DN: 384058,\n    GJ: 64801901,\n    CT: 28989789,\n    DD: 223165,\n    AN: 411278,\n    TN: 77177540,\n    MH: 121924973,\n    KA: 66834193,\n    OR: 45861035,\n    WB: 98662146,\n    PY: 1394026,\n    AP: 53390841,\n    JH: 37933898,\n    TR: 4112223,\n    MP: 83849671,\n    MZ: 1222134,\n    UP: 233378519,\n    RJ: 79584255,\n    SK: 680721,\n    BR: 122256981,\n    MN: 3048861,\n    AR: 1548776,\n    JK: 13468313,\n    LA: 279924,\n    NL: 2218634,\n    ML: 3320226,\n    AS: 35080827,\n};\n\nexport const PUPULATION_SOURCE =\n    'https://uidai.gov.in/images/state-wise-aadhaar-saturation.pdf';\n\nexport const POPULATION_SOURCE_ARCHIVED =\n    'https://web.archive.org/web/20200229034831/https://uidai.gov.in/images/state-wise-aadhaar-saturation.pdf';\n","import React from 'react';\nimport {numberFormatLocal} from './common-utils';\n\nconst d3 = window.d3;\nvar parseTime = d3.timeParse('%d/%m/%Y');\nvar formatTime = d3.timeFormat('%B %d');\n\n/**\n *\n * @param testing_data\n * @param totalPopulation\n * @param label\n * @return {{date: *, test_per_million: string, tested: string, label: string, population: string}}\n */\n\nexport function getFormattedTestingData(testing_data, totalPopulation, label) {\n    let dateString = '';\n\n    dateString = (\n        <div className=\"text-xs\">\n            {label === 'Total' ? 'As per latest IMCR ' : `Till ${formatTime(parseTime(testing_data.date))} as per `}\n            <a href={testing_data.source} rel=\"noopener\" className=\"bg-blue-100\" target=\"_blank\">\n                {label === 'Total' ? 'Report' : 'source'}\n            </a>\n        </div>\n    );\n\n    return {\n        populationNumeric: totalPopulation,\n        testedNumeric: testing_data.tested,\n        tested: numberFormatLocal(testing_data.tested),\n        date: dateString,\n        population: numberFormatLocal(totalPopulation),\n        test_per_million: numberFormatLocal(Math.round((testing_data.tested / totalPopulation) * 1000000)),\n        label: ` - ${label}`,\n    };\n}\n","import React from \"react\";\n\nclass Chart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.child = React.createRef();\n    }\n\n    componentDidMount() {\n        let {seriesData, name, callback} = this.props;\n\n        if (this.myDiv) {\n            let chart = this.chart = window.$ZC.charts(this.myDiv, seriesData);\n            if (callback) {\n                callback(chart, name);\n            }\n        }\n    }\n    \n    componentDidUpdate() {\n        if (this.props.updateCallback) {\n            this.props.updateCallback(this.chart, this.props.name)\n        }\n    }\n\n    render() {\n        return <div className=\"h-full\" ref={(c) => (this.myDiv = c)}></div>;\n    }\n}\n\nexport default Chart;\n","function makeCumulative(obj, key) {\n    let prev = 0;\n    obj.forEach((row) => {\n        row[key] += prev;\n        prev = row[key];\n    });\n}\n\nfunction dailyTrend(history, xKey, keys, cumulative, count) {\n    let series = keys.map((key) => {\n        return history.map((row, i) => {\n            if (xKey === '$index') {\n                return [i, row[key]];\n            }\n            return [row[xKey], row[key]];\n        });\n    });\n\n    if (cumulative) {\n        series.forEach((s) => {\n            makeCumulative(s, 1);\n        });\n    }\n\n    if (count) {\n        series = series.map((s) => s.slice(-count));\n    }\n\n    return series;\n}\n\nexport {dailyTrend, makeCumulative};\n","import React, { useRef, useState } from \"react\";\nimport Chart from \"./Chart\";\nimport { dailyTrend } from \"../charts/daily\";\nimport { toCapitalize } from \"../utils/common-utils\";\n\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction TrendGraph(props) {\n    let {chartJson, history} = props;\n\n    const ref = useRef();\n    const [chartStore, updateChartStore] = useState({});\n    const [dailyChartMode, setDailyChartMode] = useState('cumulative');\n\n    const [timeFrame, setTimeFrame] = useState('all');\n    const [cumulative, setCumulative] = useState(true);\n\n    let trendTime = {'1week': 7, '2week': 14, month: 30},\n        seriesNames = ['confirmed', 'active', 'recovered', 'dead'];\n\n    /**\n     *\n     * @param chart\n     * @param name\n     */\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    function updateCallback() {\n        let chart = chartStore.daily,\n            scaleMode = scaleState.checked ? 'log' : 'linear',\n            cumulative = cumulativeMode.checked === false;\n\n        chart.userdata.chart.axes.yaxis[0].scaleType = scaleMode;\n        let {series, minRange} = getTrendSeries(cumulative, trendTime[timeFrame]);\n\n        series.forEach((s, i) => {\n            chart.userdata.seriesdata.chartdata[i].data = s;\n        });\n        chart.userdata.chart.axes.xaxis.minRange = minRange;\n        chart.redraw();\n    }\n\n    function getTrendSeries(cumulative, count) {\n        // create the graph data\n        let seriesNames = ['confirmed', 'active', 'recovered', 'dead'];\n        let dailySeries = dailyTrend(history, 'date', seriesNames, cumulative, count);\n        return {\n            series: dailySeries,\n            minRange: dailySeries[0][0][0],\n        };\n    }\n\n    /**\n     *\n     * @param event\n     */\n    function updateDailyChartScaleMode(event) {\n        let checked = event.target.checked;\n        setScaleState({...scaleState, [event.target.name]: checked});\n        setCumulativeMode({...cumulativeMode, checked: false});\n    }\n\n    /**\n     *\n     * @param event\n     */\n    function updateDailyChartCumulative(event) {\n        let cumulative = event.target.checked === false;\n        setCumulative(cumulative);\n\n        setCumulativeMode({...cumulativeMode, checked: !cumulative});\n        setScaleState({...scaleState, checked: false});\n    }\n\n    function updateTimeFrame(frame) {\n        setTimeFrame(frame);\n    }\n\n    if (history.length && !chartStore.daily) {\n        let {series, minRange} = getTrendSeries(true, trendTime[timeFrame]);\n        series.forEach((series, i) => {\n            chartJson.seriesdata.chartdata[i] = {data: series, seriesname: toCapitalize(seriesNames[i])};\n        });\n        chartJson.chart.axes.xaxis.minRange = minRange;\n        chartJson.canvas.title.show = false;\n    }\n\n    const [scaleState, setScaleState] = React.useState({checked: false});\n    const [cumulativeMode, setCumulativeMode] = React.useState({checked: false});\n\n    return (\n        <React.Fragment>\n            <h2 className=\"ml-3 mt-4\">Daily Trend</h2>\n            <div className=\"ml-3 flex mt-2\">\n                <div className=\"flex items-center \">\n                    <span className=\"mr-2\">Scale</span>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                size=\"small\"\n                                checked={scaleState.checked}\n                                onChange={updateDailyChartScaleMode}\n                                name=\"checked\"\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Logarithmic\"\n                    />\n                </div>\n                <div className=\"flex items-center \">\n                    <span className=\"mr-2\">Mode</span>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                disabled={scaleState.checked}\n                                size=\"small\"\n                                checked={cumulativeMode.checked}\n                                onChange={updateDailyChartCumulative}\n                                name=\"checked\"\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Daily\"\n                    />\n                </div>\n            </div>\n            <div className=\"trend-graph\">\n                <Chart seriesData={chartJson} name=\"daily\" callback={chartCallback} updateCallback={updateCallback} />\n            </div>\n            <div className=\"flex flex-auto z-10 my-4 items-center justify-end\">\n                <div className=\"button-group text-sm mr-4\">\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('all')}\n                        className={`${\n                            timeFrame === 'all' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        Beginning\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('month')}\n                        className={`${\n                            timeFrame === 'month' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        Month\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('2week')}\n                        className={`${\n                            timeFrame === '2week' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        2 Weeks\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('1week')}\n                        className={`${\n                            timeFrame === '1week' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        1 Week\n                    </button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default TrendGraph;\n","import React from \"react\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport { PUPULATION_SOURCE } from \"../constants/population\";\nimport { numberFormatLocal, round } from \"../utils/common-utils\";\n\n/**\n *\n * @return {*}\n * @constructor\n */\n\nconst NaNCheck = (d) => {\n    if (isNaN(d)) {\n        return 0;\n    }\n    return numberFormatLocal(d);\n};\n\nfunction MetaCard({report, tests, history}) {\n    let {populationNumeric: population} = tests;\n\n    let confirmedPerMillion = NaNCheck(round((report.confirmed / population) * 1000000));\n    let activePercent = NaNCheck(round((report.active / report.confirmed) * 100, 2));\n    let recoveredPercent = NaNCheck(round((report.recovered / report.confirmed) * 100, 2));\n    let deathPercent = NaNCheck(round((report.dead / report.confirmed) * 100, 2));\n    let testPerMillion = NaNCheck(round((tests.testedNumeric / population) * 1000000));\n\n    // add a sum for total confirmed\n    let last = 0;\n    history.forEach((row) => {\n        row.confirmedCumulative = row.confirmed + last;\n        last = row.confirmedCumulative;\n    });\n\n    let growRatePerWeek = 0,\n        growthDateRange = 0;\n\n    if (history.length) {\n        let lastWeek = history[history.length - 8],\n            yesterday = history[history.length - 2];\n\n        if (history.length < 8) {\n            lastWeek = history[0];\n        }\n\n        let growthRate =\n            ((yesterday.confirmedCumulative - lastWeek.confirmedCumulative) / lastWeek.confirmedCumulative) * 100;\n        growRatePerWeek = round(growthRate / 7);\n        growthDateRange = `${lastWeek.date.split(',')[0]} - ${yesterday.date.split(',')[0]}`;\n    }\n    // const doublingRate = growthRate > 0 ? 70 / round(growthRate, 2) : 0;\n\n    let cards = [\n        {\n            title: 'Confirmed Per Million',\n            info: '(confirmed / state population) * 1 Million',\n            report: confirmedPerMillion,\n            description: `~${round(confirmedPerMillion)} out of every 1 million people in ${\n                report.name\n            } have tested positive for the virus.`,\n            cardColor: 'red',\n        },\n        {\n            title: 'Active',\n            info: '(active / confirmed) * 100',\n            report: activePercent,\n            description: `For every 100 confirmed cases, ~${round(activePercent)} are currently infected.`,\n            cardColor: 'orange',\n        },\n        {\n            title: 'Recovery Rate',\n            info: '(recovered / confirmed) * 100',\n            report: recoveredPercent,\n            description: `For every 100 confirmed cases, ~${round(recoveredPercent)} have recovered from the virus.`,\n            cardColor: 'green',\n        },\n        {\n            title: 'Mortality Rate',\n            info: '(deaths / confirmed) * 100',\n            report: deathPercent,\n            description: `For every 100 confirmed cases, ~${round(\n                deathPercent\n            )} have unfortunately passed away from the virus.`,\n            cardColor: 'gray',\n        },\n        {\n            title: 'Average Growth Rate',\n            info: '(((yesterdayData - sevenDayBeforeData) / sevenDayBeforeData) * 100) / 7',\n            report: `${growRatePerWeek}%`,\n            reportLabel: growthDateRange,\n            description: `In the last one week, the number of new infections has grown by an average of ${growRatePerWeek}% every day.`,\n            cardColor: 'brown',\n        },\n        {\n            title: 'Tests Per Million',\n            info: '(total tests / total population) * 1 Million',\n            report: `~${testPerMillion}`,\n            description: `For every 1 million people in ${report.name}, ~${testPerMillion} people were tested.`,\n            cardColor: 'blue',\n        },\n    ];\n\n    return (\n        <React.Fragment>\n            <div className=\"flex justify-between my-4\">\n                <div className=\"text-gray-700 font-bold\">\n                    <h2 className=\"text-sm\">\n                        Population{' '}\n                        <a rel=\"noopener\" target=\"_blank\" className=\"text-blue-600\" href={PUPULATION_SOURCE}>\n                            2019\n                        </a>\n                    </h2>\n                    <h3 className=\"my-0 mt-1 text-2xl font-extra-bold\">{tests.population}</h3>\n                </div>\n            </div>\n            <div className=\"meta-card my-4\">\n                {cards.map((card, i) => {\n                    return (\n                        <div\n                            className={`meta-item px-6 py-6 bg-${card.cardColor}-100 text-${card.cardColor}-400 font-bold rounded shadow`}\n                            key={i}\n                        >\n                            <div className=\"meta-item-top flex items-center justify-between\">\n                                <h4 className=\"my-0 text-base\">{card.title}</h4>\n                                <span>\n                                    <Tooltip\n                                        title={<div className=\"text-sm py-2 global-style\">{card.info}</div>}\n                                        arrow\n                                        placement=\"top\"\n                                        enterTouchDelay={50}\n                                    >\n                                        <InfoIcon size=\"small\" />\n                                    </Tooltip>\n                                </span>\n                            </div>\n                            <div className=\"my-2\">\n                                <h1 className={`text-${card.cardColor}-600 text-2xl font-extra-bold`}>{card.report}</h1>\n                                <span className=\"text-xs\">{card.reportLabel}</span>\n                            </div>\n                            <p className=\"text-sm\">{card.description}</p>\n                        </div>\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default MetaCard;\n","import React from \"react\";\nimport { timeDifference } from \"../utils/common-utils\";\n\nconst icons = [\n        'bangaloremirror',\n        'firstspot',\n        'indiatoday',\n        'livemint',\n        'ndtv',\n        'news18',\n        'thehindu',\n        'zeenews',\n        'tribuneindia',\n        'hindustantimes',\n        'indiatvnews',\n        'timesofindia',\n        'firstpost',\n        'telanganatoday',\n        'cnbc',\n        'economictimes',\n        'moneycontrol',\n        'youtube',\n        'businessinsider',\n        'indianexpress',\n        'gadgetsnow',\n        'mumbaimirror',\n        'thenewsminute',\n        'republicworld',\n        'cnn',\n        'khaleejtimes',\n    ],\n    regex = new RegExp(icons.join('|')),\n    styles = {overflow: 'hidden', wordBreak: 'break-word'};\n\nfunction NewsCard({articles}) {\n    return (\n        <React.Fragment>\n            {articles.map((article, i) => {\n                let relativeTime = timeDifference(new Date(), new Date(article.publishedAt));\n                let match = article.url.match(regex),\n                    iconDiv = '',\n                    source = '';\n\n                if (match && match.length) {\n                    let icon = `images/news-favicon/${match[0]}.png`;\n                    iconDiv = (\n                        <div className=\"news-favicon bg-no-repeat mb-2\" style={{backgroundImage: `url(${icon})`}}></div>\n                    );\n                } else {\n                    source = (\n                        <div className=\"text-sm break-words mt-2\" style={styles}>\n                            <b>Source:</b> {article.source.name}\n                        </div>\n                    );\n                }\n\n                if (!article.urlToImage || article.urlToImage.match('^http://')) {\n                    return '';\n                }\n\n                return (\n                    <div className=\"article rounded border my-4\" key={i}>\n                        <a\n                            href={article.url}\n                            target=\"_blank\"\n                            rel=\"noopener\"\n                            className=\"article p-4 border-gray-400 flex w-full relative mb-2\"\n                        >\n                            <div\n                                className=\"image-preview bg-cover bg-center bg-no-repeat\"\n                                lazy=\"loaded\"\n                                style\n                                style={{backgroundImage: `url(${article.urlToImage})`}}\n                            ></div>\n\n                            <div className=\"content w-full text-black\">\n                                {iconDiv}\n                                <div\n                                    className=\"text-base font-semibold leading-normal break-words lg:text-base mb-3\"\n                                    style={styles}\n                                >\n                                    {article.title}\n                                </div>\n                                <div className=\"leading-snug break-words text-gray-700 text-xs\" style={styles}>\n                                    {article.description}\n                                </div>\n                                {source}\n                                <div className=\"source-date\">{relativeTime}</div>\n                            </div>\n                        </a>\n                    </div>\n                );\n            })}\n        </React.Fragment>\n    );\n}\n\nexport default NewsCard;\n","import React from \"react\";\n\nconst buildFindData = (data) => {\n    const dataByDateAndName = new Map();\n    data.forEach((dataPoint) => {\n        const {date, name} = dataPoint;\n        if (!dataByDateAndName.get(date)) {\n            dataByDateAndName.set(date, {[name]: dataPoint});\n        } else {\n            const nextGroup = {\n                ...dataByDateAndName.get(date),\n                [name]: dataPoint,\n            };\n            dataByDateAndName.set(date, nextGroup);\n        }\n    });\n    const finder = ({date, name}) => {\n        try {\n            return dataByDateAndName.get(date)[name];\n        } catch (e) {\n            return null;\n        }\n    };\n    return finder;\n};\n\nconst makeKeyframes = (data, numOfSlice) => {\n    const findData = buildFindData(data);\n    const nameSet = new Set(data.map(({name}) => name));\n\n    const nameList = [...nameSet];\n    const dateSet = new Set(data.map(({date}) => date));\n    const dateList = [...dateSet];\n\n    const frames = dateList.map((date) => ({\n        date,\n        data: nameList.map((name) => {\n            const dataPoint = findData({date, name});\n            return {\n                ...dataPoint,\n                value: dataPoint ? dataPoint.value : 0,\n            };\n        }),\n    }));\n\n    const keyframes = frames\n        .reduce((result, frame, idx) => {\n            const prev = frame;\n            const next = idx !== frames.length - 1 ? frames[idx + 1] : null;\n            if (!next) {\n                result.push({...frame, date: new Date(frame.date)});\n            } else {\n                const prevTimestamp = new Date(prev.date).getTime();\n                const nextTimestamp = new Date(next.date).getTime();\n                const diff = nextTimestamp - prevTimestamp;\n                for (let i = 0; i < numOfSlice; i++) {\n                    const sliceDate = new Date(prevTimestamp + (diff * i) / numOfSlice);\n                    const sliceData = frame.data.map(({name, value, ...others}) => {\n                        const prevValue = value;\n                        const nextDataPoint = findData({date: next.date, name});\n                        const nextValue = nextDataPoint ? nextDataPoint.value : 0;\n                        const sliceValue = prevValue + ((nextValue - prevValue) * i) / numOfSlice;\n                        return {\n                            name,\n                            value: sliceValue,\n                            ...others,\n                        };\n                    });\n                    result.push({\n                        date: sliceDate,\n                        data: sliceData,\n                    });\n                }\n            }\n            return result;\n        }, [])\n        .map(({date, data}) => {\n            return {\n                date,\n                data: data.sort((a, b) => b.value - a.value),\n            };\n        });\n    return keyframes;\n};\n\nexport {makeKeyframes};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { scaleLinear } from \"@vx/scale\";\nimport { AxisTop as VxAxisTop } from \"@vx/axis\";\n\nconst AxisTop = (props) => {\n    const {domainMax, xMax} = props;\n    const numTicks = xMax > 500 ? 5 : Math.floor(xMax / 100);\n    const xScaleForAxis = scaleLinear({\n        domain: [0, domainMax],\n        range: [0, xMax],\n    });\n    return (\n        <VxAxisTop\n            top={0}\n            left={0}\n            scale={xScaleForAxis}\n            tickLabelProps={() => ({textAnchor: 'middle', dy: '-0.25em', fontSize: 12})}\n            numTicks={numTicks}\n        />\n    );\n};\n\nAxisTop.propTypes = {\n    domainMax: PropTypes.number.isRequired,\n    xMax: PropTypes.number.isRequired,\n};\n\nexport default AxisTop;\n","import React, { forwardRef, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { animated, useSpring } from \"react-spring\";\nimport AxisTop from \"./AxisTop\";\n\nconst AnimatedAxisTop = animated(AxisTop);\n\nconst RacingAxisTop = forwardRef(({domainMax, xMax}, ref) => {\n    const prevDomainMaxRef = useRef(domainMax);\n    const prevDomainMax = prevDomainMaxRef.current;\n    const springProps = useSpring({\n        from: {domainMax: prevDomainMax},\n        to: {domainMax},\n        ref,\n    });\n    return <AnimatedAxisTop xMax={xMax} {...springProps} />;\n});\n\nRacingAxisTop.propTypes = {\n    domainMax: PropTypes.number.isRequired,\n    xMax: PropTypes.number.isRequired,\n};\n\nexport default RacingAxisTop;\n","import React from \"react\";\n\nconst Bar = ({color, x, y, width, height, name, value}) => {\n    return (\n        <g transform={`translate(${x} ${y})`}>\n            <rect x={0} y={0} width={width} height={height} fill={color} style={{opacity: 0.8}} />\n            <text dominantBaseline=\"middle\" x={width + 5} y={height / 2} textAnchor=\"start\" className='text-xs'>\n                {value}\n            </text>\n            <text dominantBaseline=\"middle\" x={ - 5} y={height / 2} textAnchor=\"end\" fontSize={10} className='text-2xs font-bold'>\n                {name}\n            </text>\n        </g>\n    );\n};\n\nexport default Bar;\n","import React, { forwardRef } from \"react\";\nimport { animated, useTransition } from \"react-spring\";\nimport Bar from \"./Bar\";\n\nconst AnimatedBar = animated(Bar);\n\nconst RacingBarGroup = forwardRef(({frameData, xScale, yScale, colorScale}, ref) => {\n    const transitions = useTransition(\n        frameData.map(({name, value}, idx) => ({\n            y: yScale(idx),\n            width: xScale(value),\n            value,\n            name,\n        })),\n        (d) => d.name,\n        {\n            initial: (d) => d,\n            from: {y: yScale.range()[1] + 50, width: 0, value: 0},\n            leave: {y: yScale.range()[1] + 50, width: 0, value: 0},\n            enter: (d) => d,\n            update: (d) => d,\n            unique: true,\n            ref,\n        }\n    );\n\n    return transitions.map(({item, props}) => {\n        const {y, value, width} = props;\n        const {name} = item;\n        return (\n            <AnimatedBar\n                x={xScale(0)}\n                y={y}\n                width={width}\n                height={yScale.bandwidth()}\n                color={colorScale(name)}\n                value={value.interpolate((v) => v.toFixed())}\n                name={name}\n                key={name}\n            />\n        );\n    });\n});\n\nexport default RacingBarGroup;\n","export const COLOR_ARRAY1 = [\n    '#f44336',\n    '#E91E63',\n    '#9C27B0',\n    '#673AB7',\n    '#3F51B5',\n    '#2196F3',\n    '#03A9F4',\n    '#00BCD4',\n    '#009688',\n    '#4CAF50',\n    '#8BC34A',\n    '#CDDC39',\n    '#FFEB3B',\n    '#FFC107',\n    '#FF9800',\n    '#FF5722',\n    '#795548',\n    '#9E9E9E',\n    '#607D8B',\n];\n\nexport const COLOR_ARRAY2 = [\n    '#00b8aa',\n    '#374649',\n    '#fd615d',\n    '#f2c80e',\n    '#5f6a6d',\n    '#8ad4eb',\n    '#a66999',\n    '#795548',\n    '#455A64',\n    '#9C27B0',\n];\n\nexport const COLOR_ARRAY3 = [\n    '#d32f2f',\n    '#C2185B',\n    '#7B1FA2',\n    '#512DA8',\n    '#303F9F',\n    '#1976D2',\n    '#0288D1',\n    '#0097A7',\n    '#00796B',\n    '#388E3C',\n    '#689F38',\n    '#AFB42B',\n    '#FBC02D',\n    '#FFA000',\n    '#F57C00',\n    '#E64A19',\n    '#5D4037',\n    '#616161',\n    '#455A64',\n    ...COLOR_ARRAY2,\n];\n","import React, { useEffect, useImperativeHandle, useLayoutEffect, useMemo, useRef, useState } from \"react\";\nimport { scaleBand, scaleLinear, scaleOrdinal } from \"@vx/scale\";\nimport { Group } from \"@vx/group\";\nimport RacingAxisTop from \"./RacingAxisTop\";\nimport RacingBarGroup from \"./RacingBarGroup\";\nimport { getStyle } from \"../../utils/common-utils\";\nimport { COLOR_ARRAY3 } from \"../../constants/colors\";\n\nconst RacingBarChart = React.forwardRef(({parentRef, keyframes, categories, onStart, onStop}, ref) => {\n    const [{frameIdx, animationKey, playing}, setAnimation] = useState({\n        frameIdx: 0,\n        animationKey: 0,\n        playing: false,\n    });\n    const updateFrameRef = useRef();\n    // when replay, increment the key to rerender the chart.\n    useEffect(() => {\n        if (!updateFrameRef.current && playing) {\n            updateFrameRef.current = setTimeout(() => {\n                setAnimation(({frameIdx: prevFrameIdx, playing, ...others}) => {\n                    const isLastFrame = prevFrameIdx === keyframes.length - 1;\n                    const nextFrameIdx = isLastFrame ? prevFrameIdx : prevFrameIdx + 1;\n                    return {\n                        ...others,\n                        frameIdx: playing ? nextFrameIdx : prevFrameIdx,\n                        playing: !!(playing && !isLastFrame),\n                    };\n                });\n                updateFrameRef.current = null;\n            }, 250);\n        }\n    });\n\n    const [chartDimension, setChartDimension] = useState({width: 0, height: 0});\n\n    useEffect(() => {\n        if (parentRef.current) {\n            setChartDimension({\n                width: getStyle(parentRef.current, 'width'),\n                height: getStyle(parentRef.current, 'height'),\n            });\n        }\n    }, [parentRef]);\n\n    let numOfBars = 10,\n        width = chartDimension.width,\n        height = chartDimension.height,\n        margin = {\n            top: 30,\n            right: 60,\n            bottom: 10,\n            left: 110,\n        },\n        colorScale = scaleOrdinal(COLOR_ARRAY3).domain(categories).range(COLOR_ARRAY3);\n\n    const barGroupRef = useRef();\n    const axisRef = useRef();\n    useImperativeHandle(ref, () => ({\n        replay: () => {\n            clearTimeout(updateFrameRef.current);\n            updateFrameRef.current = null;\n            setAnimation(({animationKey, ...others}) => ({\n                ...others,\n                frameIdx: 0,\n                animationKey: animationKey + 1,\n                playing: true,\n            }));\n        },\n        start: () => {\n            setAnimation((animation) => ({\n                ...animation,\n                playing: true,\n            }));\n        },\n        stop: () => {\n            setAnimation((animation) => ({\n                ...animation,\n                playing: false,\n            }));\n            barGroupRef.current.stop();\n            axisRef.current.stop();\n        },\n        playing,\n    }));\n    const prevPlayingRef = useRef(playing);\n\n    useEffect(() => {\n        if (prevPlayingRef.current !== playing) {\n            if (playing) {\n                onStart();\n            } else {\n                onStop();\n            }\n        }\n        prevPlayingRef.current = playing;\n    }, [onStart, onStop, playing]);\n\n    useLayoutEffect(() => {\n        if (barGroupRef.current) {\n            if (playing) {\n                barGroupRef.current.start();\n                axisRef.current.start();\n            }\n        }\n    });\n    const frame = keyframes[frameIdx];\n    const {date: currentDate, data: frameData} = frame;\n    const values = frameData.map(({value}) => value);\n    const xMax = width - margin.left - margin.right;\n    const yMax = height - margin.top - margin.bottom;\n    const domainMax = Math.max(...values);\n    const xScale = scaleLinear({\n        domain: [0, domainMax],\n        range: [0, xMax],\n    });\n    const yScale = useMemo(\n        () =>\n            scaleBand({\n                domain: Array(numOfBars)\n                    .fill(0)\n                    .map((_, idx) => idx),\n                range: [0, yMax],\n                padding: 0.1,\n            }),\n        [numOfBars, yMax]\n    );\n\n    const monthNames = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ];\n    let dateObj = currentDate;\n    let month = monthNames[dateObj.getMonth()];\n    let day = String(dateObj.getDate()).padStart(2, '0');\n    let year = dateObj.getFullYear();\n\n    let dateInYear = month + '\\n' + day + ',' + year;\n\n    return (\n        parentRef.current && (\n            <svg width={width} height={height} className='race-bar-svg'>\n                <Group top={margin.top} left={margin.left} key={animationKey}>\n                    <RacingBarGroup\n                        frameData={frameData.slice(0, numOfBars)}\n                        xScale={xScale}\n                        yScale={yScale}\n                        colorScale={colorScale}\n                        ref={barGroupRef}\n                    />\n                    <text textAnchor=\"end\" x={xMax + margin.right - 10} y={yMax} className='md:text-2xl text-xl'>\n                        {dateInYear}\n                    </text>\n                    <line x1={0} y1={0} x2={0} y2={yMax} stroke=\"black\" />\n                    <RacingAxisTop domainMax={domainMax} xMax={xMax} ref={axisRef} />\n                </Group>\n            </svg>\n        )\n    );\n});\n\nRacingBarChart.defaultProps = {\n    width: 600,\n    height: 450,\n    margin: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 100,\n    },\n};\n\nexport default RacingBarChart;\n","export const STATE_CODES = {\n    AP: 'Andhra Pradesh',\n    AR: 'Arunachal Pradesh',\n    AS: 'Assam',\n    BR: 'Bihar',\n    CT: 'Chhattisgarh',\n    GA: 'Goa',\n    GJ: 'Gujarat',\n    HR: 'Haryana',\n    HP: 'Himachal Pradesh',\n    JH: 'Jharkhand',\n    KA: 'Karnataka',\n    KL: 'Kerala',\n    MP: 'Madhya Pradesh',\n    MH: 'Maharashtra',\n    MN: 'Manipur',\n    ML: 'Meghalaya',\n    MZ: 'Mizoram',\n    NL: 'Nagaland',\n    OR: 'Odisha',\n    PB: 'Punjab',\n    RJ: 'Rajasthan',\n    SK: 'Sikkim',\n    TN: 'Tamil Nadu',\n    TG: 'Telangana',\n    TR: 'Tripura',\n    UT: 'Uttarakhand',\n    UP: 'Uttar Pradesh',\n    WB: 'West Bengal',\n    AN: 'Andaman and Nicobar',\n    CH: 'Chandigarh',\n    DN: 'Dadra and Nagar Haveli',\n    DD: 'Daman and Diu',\n    DL: 'Delhi',\n    JK: 'Jammu and Kashmir',\n    LA: 'Ladakh',\n    LD: 'Lakshadweep',\n    PY: 'Puducherry',\n};\n","import React, {useEffect, useRef, useState} from 'react';\nimport DisplayCard from './display-card';\nimport axios from 'axios';\nimport Table from './table';\nimport Map from './Map';\nimport {POPULATION, PUPULATION_SOURCE} from '../constants/population';\nimport {getFormattedTestingData} from '../utils/format-test';\nimport Chart from './Chart';\nimport {dailyTrend} from '../charts/daily';\nimport {\n    clone,\n    IS_MOBILE_DEVICE,\n    IS_SINGLE_COLUMN,\n    isTouchDevice,\n    shareTheApp,\n    timeDifference,\n    toCapitalize,\n    toFixedNumber,\n} from '../utils/common-utils';\nimport TrendGraph from './trend-chart';\nimport {useHistory} from 'react-router-dom';\nimport {Helmet} from 'react-helmet';\nimport {Button} from '@material-ui/core';\nimport ShareIcon from '@material-ui/icons/Share';\nimport MetaCard from './meta-card';\nimport NewsCard from './news-card';\nimport {makeKeyframes} from './race-bar/useKeyframes';\nimport RacingBarChart from './race-bar/RacingBarChart';\nimport {STATE_CODES} from '../constants/state-code';\nimport {COLOR_ARRAY1} from '../constants/colors';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst d3 = window.d3;\nconst IS_DESKTOP = !IS_MOBILE_DEVICE;\n\nfunction Home({}) {\n    const [fetched, setFetched] = useState(false);\n    const [data, setData] = useState({});\n    const [tableData, setTableData] = useState({rows: [], columns: []});\n    const [mapInitData, setMapInitData] = useState({});\n    const [testingData, setTestingData] = useState({});\n    const [metaCardPopulation, setMetaCardPopulation] = useState({});\n    const [stateDataMapped, setStateDataMapped] = useState({});\n    const [dailyChart, setDailyChart] = useState(null);\n    const [stateStackedChart, setStateStackedChart] = useState({});\n    const [deathTrendChart, setDeathTrendChart] = useState({});\n    const [deathTrendTotalChart, setDeathTrendTotalChart] = useState({});\n    const [recoveryTrendChart, setRecoveryTrendChart] = useState({});\n    const [growthRateChart, setGrowthRateChart] = useState({});\n    const [stateCases, setStateCases] = useState({});\n    const [wordcloudChart, setWordcloudChart] = useState({});\n    const [percentChart, setPercentChart] = useState({});\n    const history = useHistory();\n    const childRef = useRef();\n    const [chartStore, updateChartStore] = useState({});\n    const [lastUpdated, setLastUpdated] = useState('-');\n    const [caseHistory, setCaseHistory] = useState({});\n    const [spinner, setSpinner] = useState(true);\n    const [articles, setArticles] = useState(true);\n    const [keyframes, setKeyFrames] = useState([]);\n\n    const getCards = (total = {}, today = {}) => {\n        return [\n            {\n                name: 'Confirmed',\n                value: total.confirmed,\n                delta: today.confirmed,\n                colorClass: 'red',\n            },\n            {\n                name: 'Active',\n                value: total.active,\n                delta: today.active,\n                colorClass: 'orange',\n            },\n            {\n                name: 'Recovered',\n                value: total.recovered,\n                delta: today.recovered,\n                colorClass: 'green',\n            },\n            {\n                name: 'Dead',\n                value: total.dead,\n                delta: today.dead,\n                colorClass: 'gray',\n            },\n        ];\n    };\n\n    const [displayCards, setDisplayCards] = useState(getCards());\n    const [stateData, setStateData] = useState([]);\n\n    useEffect(() => {\n        if (fetched === false) {\n            getData();\n        }\n    }, [fetched]);\n\n    const getData = async () => {\n        try {\n            let [\n                {data: reports},\n                {\n                    data: {india: indiaHistory, state: stateHistory},\n                },\n                {data: dailyChart},\n                {data: stateBar},\n                {data: percentChartJson},\n                {data: news},\n                {data: tests},\n            ] = await Promise.all([\n                axios.get('https://api.track-covid19.in/reports_v2.json'),\n                axios.get('https://api.track-covid19.in/history.json'),\n                axios.get('/charts/daily.json'),\n                axios.get('/charts/states.json'),\n                axios.get('/charts/percent-chart.json'),\n                axios.get('https://jsonstorage.net/api/items/72baa701-75d5-4069-89f3-573c4a4bb3e3'),\n                axios.get('https://api.track-covid19.in/tests.json'),\n            ]);\n\n            setSpinner(false);\n            setData(reports);\n            setCaseHistory({india: indiaHistory, state: stateHistory});\n            setArticles(news);\n\n            // time updated\n            {\n                // 10/05/2020 14:34:22\n                let parseTime = d3.timeParse('%d/%m/%Y %H:%M:%S');\n                let updatedTime = parseTime(reports.updatedTime);\n\n                setLastUpdated(\n                    `${timeDifference(new Date(), updatedTime)} - ${d3.timeFormat('%B %d, %I:%M %p')(\n                        new Date(updatedTime)\n                    )}`\n                );\n            }\n\n            // set the testing value temporary\n            for (var stateCode in reports.states) {\n                if (reports.states.hasOwnProperty(stateCode)) {\n                    if (tests.states[stateCode]) {\n                        let stateTestHistory = tests.states[stateCode];\n                        reports.states[stateCode].testing_data = stateTestHistory[stateTestHistory.length - 1];\n                    }\n                }\n            }\n\n            let totalPopulation = d3.sum(Object.values(POPULATION));\n\n            let testingData = getFormattedTestingData(reports.testing_data_imcr, totalPopulation, 'Total');\n            setTestingData(testingData);\n            setMetaCardPopulation({...testingData});\n\n            setDisplayCards(getCards(reports, reports.today));\n\n            let mapInitData = {\n                confirmed: reports.confirmed,\n                active: reports.active,\n                recovered: reports.recovered,\n                dead: reports.dead,\n                name: 'India',\n                today: reports.today,\n            };\n            setMapInitData(mapInitData);\n\n            let tableData = Object.values(reports.states); //.filter(row => row.confirmed > 0);\n            setStateData(tableData);\n\n            // s\n            let t = {};\n            tableData.forEach((state) => {\n                t[state.name] = state;\n            });\n            setStateDataMapped(t);\n\n            setTableData({\n                rows: tableData,\n                columns: [\n                    {name: 'state/UT', accessor: 'name'},\n                    {\n                        name: IS_MOBILE_DEVICE ? 'cnfmd' : 'confirmed',\n                        accessor: 'confirmed',\n                        colorClass: 'red',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'actv' : 'active',\n                        accessor: 'active',\n                        colorClass: 'orange',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'Rcvrd' : 'recovered',\n                        accessor: 'recovered',\n                        colorClass: 'green',\n                    },\n                    {\n                        name: 'dead',\n                        accessor: 'dead',\n                        colorClass: 'gray',\n                    },\n                ],\n            });\n\n            // daily trend\n            setDailyChart(dailyChart);\n\n            // sort the st\n\n            let states = Object.values(reports.states).filter(\n                (state) => state.confirmed > 50 && state.stateCode !== 'UN'\n            );\n\n            // set the factors\n            states.forEach((state) => {\n                state.deathRateByRecovery = toFixedNumber((state.dead / (state.recovered + state.dead)) * 100, 2);\n                state.deathRateByTotal = toFixedNumber((state.dead / state.confirmed) * 100, 2);\n                state.recoveryRateByTotal = toFixedNumber((state.recovered / state.confirmed) * 100, 2);\n            });\n\n            // *************************************************************************** //\n\n            // stacked chart\n            states.sort(function (a, b) {\n                return d3.descending(a.confirmed, b.confirmed);\n            });\n\n            let barSeriesNames = ['confirmed', 'recovered', 'dead'],\n                stateBarSeries = dailyTrend(states, 'name', barSeriesNames),\n                stateBarStacked = clone(stateBar);\n\n            stateBarSeries.forEach((series, i) => {\n                stateBarStacked.seriesdata.chartdata[i] = {data: series, seriesname: toCapitalize(barSeriesNames[i])};\n            });\n            setStateStackedChart(stateBarStacked);\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.deathRateByRecovery, b.deathRateByRecovery);\n                });\n\n                let lineSeriesColumns = ['confirmed', 'recovered', 'dead', 'deathRateByRecovery'],\n                    lineSeriesNames = ['confirmed', 'recovered', 'dead', 'Death Ratio'],\n                    stateBarSeriesLine = dailyTrend(states, 'name', lineSeriesColumns),\n                    deathTrendChart = clone(stateBar);\n\n                deathTrendChart.canvas.title.text = 'Death Ratio By Total Recoveries';\n                deathTrendChart.canvas.subtitle = {text: 'Death Ratio = Deaths / (Deaths + Recoveries)', show: true};\n                deathTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                deathTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                stateBarSeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames[i]),\n                    };\n                    if (i === stateBarSeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = 'rgb(171, 16, 23)';\n                    }\n                    deathTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setDeathTrendChart(deathTrendChart);\n            }\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.deathRateByTotal, b.deathRateByTotal);\n                });\n\n                let lineSeriesColumns = ['confirmed', 'recovered', 'dead', 'deathRateByTotal'],\n                    lineSeriesNames = ['confirmed', 'recovered', 'dead', 'death rate'],\n                    stateBarSeriesLine = dailyTrend(states, 'name', lineSeriesColumns),\n                    deathTrendChart = clone(stateBar);\n\n                deathTrendChart.canvas.title.text = 'Death Ratio By Total Confirmed';\n                deathTrendChart.canvas.subtitle = {text: 'Death Ratio = Deaths / (Deaths + Recoveries)', show: false};\n                deathTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                deathTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                stateBarSeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames[i]),\n                    };\n                    if (i === stateBarSeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = 'rgb(171, 16, 23)';\n                    }\n                    deathTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setDeathTrendTotalChart(deathTrendChart);\n            }\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.recoveryRateByTotal, b.recoveryRateByTotal);\n                });\n\n                let lineSeriesColumns1 = ['confirmed', 'recovered', 'dead', 'recoveryRateByTotal'],\n                    lineSeriesNames1 = ['confirmed', 'recovered', 'dead', 'recovery rate'],\n                    recoverySeriesLine = dailyTrend(states, 'name', lineSeriesColumns1),\n                    recoveryTrendChart = clone(stateBar);\n\n                recoveryTrendChart.canvas.title.text = 'Recovery Ratio By Total Infected';\n                recoveryTrendChart.canvas.subtitle = {text: 'States With  > 50 Confirmed Cases', show: true};\n                recoveryTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                recoveryTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                recoverySeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames1[i]),\n                    };\n                    if (i === recoverySeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = '#00897B';\n                    }\n                    recoveryTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setRecoveryTrendChart(recoveryTrendChart);\n            }\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.confirmed, b.confirmed);\n                });\n\n                var parseTime = d3.timeParse('%b %d, %Y');\n                let march1 = new Date(2020, 1, 29);\n\n                let data = states.slice(0, 15).map((state) => {\n                    let history = stateHistory[state.stateCode].filter((row) => {\n                        return parseTime(row.date) > march1;\n                    });\n\n                    let data = dailyTrend(history, 'date', ['confirmed'], true)[0];\n\n                    return {\n                        seriesname: state.name,\n                        type: 'line',\n                        data: data,\n                    };\n                });\n                let stateCasesChart = clone(dailyChart);\n                stateCasesChart.legend.colors = COLOR_ARRAY1;\n                stateCasesChart.canvas.title.text = 'Total Confirmed Cases By States';\n                data.forEach((s, i) => {\n                    stateCasesChart.seriesdata.chartdata[i] = s;\n                });\n                setStateCases(stateCasesChart);\n            }\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.confirmed, b.confirmed);\n                });\n\n                let data = states.slice(0, 20).map((state) => {\n                    let data = dailyTrend(stateHistory[state.stateCode], '$index', ['confirmed'], true)[0];\n                    return {\n                        seriesname: state.name,\n                        type: 'line',\n                        data: data,\n                    };\n                });\n\n                let stateCasesChartLog = clone(dailyChart);\n                stateCasesChartLog.legend.colors = COLOR_ARRAY1;\n                data.forEach((s, i) => {\n                    stateCasesChartLog.seriesdata.chartdata[i] = s;\n                });\n                stateCasesChartLog.chart.axes.xaxis.threshold = {};\n                stateCasesChartLog.chart.axes.xaxis.tickCount = 5;\n                stateCasesChartLog.chart.axes.xaxis.label = {\n                    text: 'No. Of Days Since 1st Confirmed Case',\n                };\n                stateCasesChartLog.chart.axes.xaxis.ticklabel.alignMode = 'rotate(45)';\n                stateCasesChartLog.metadata.columns[0] = {\n                    datatype: 'numeric',\n                    columnname: 'Day',\n                    dataindex: 0,\n                    numeric: {\n                        axisformat: {\n                            prefix: 'Day ',\n                        },\n                    },\n                };\n                stateCasesChartLog.chart.axes.yaxis[0].scaleType = 'log';\n                stateCasesChartLog.legend.colors = COLOR_ARRAY1;\n                stateCasesChartLog.canvas.title.text = 'Statewise Growth trend';\n                stateCasesChartLog.canvas.subtitle = {text: 'Top 20 States', show: true};\n\n                setGrowthRateChart(stateCasesChartLog);\n            }\n\n            {\n                let wordcloudSeries = dailyTrend(Object.values(reports.states), 'name', ['confirmed']),\n                    wordCloudChart = clone(stateBar);\n\n                wordCloudChart.canvas.title.text = 'Word Cloud of Affected States and UTs';\n                wordCloudChart.chart.axes.yaxis[0].label.text = 'Total';\n                wordCloudChart.seriesdata.chartdata[0] = {\n                    type: 'wordcloud',\n                    data: wordcloudSeries,\n                    seriesname: 'Confirmed',\n                };\n                wordCloudChart.legend.colors = ['#E91E63'];\n                wordCloudChart.legend.enabled = false;\n                wordCloudChart.chart.plot.plotoptions.wordcloud = {\n                    minSize: '2.5%',\n                    legendHighlightEffect: {\n                        selectedSeries: 'invert',\n                    },\n                };\n                setWordcloudChart(wordCloudChart);\n            }\n\n            {\n                percentChartJson.seriesdata.chartdata[0] = {\n                    type: 'pie',\n                    data: [\n                        ['Active', reports.active],\n                        ['Recovered', reports.recovered],\n                        ['dead', reports.dead],\n                    ],\n                };\n                setPercentChart(percentChartJson);\n            }\n\n            {\n                // build rave bar data\n                Object.entries(stateHistory).forEach(([key, value]) => {\n                    let last = 0;\n                    value.forEach((entry) => {\n                        entry.name = STATE_CODES[key];\n                        entry.value = entry.confirmed + last;\n                        last = entry.value;\n                    });\n                });\n\n                let all = Object.values(stateHistory)\n                    .flat()\n                    .filter((d) => d.name !== undefined);\n\n                all.sort(function (a, b) {\n                    return d3.ascending(new Date(a.date), new Date(b.date));\n                });\n                all = all.slice(90, all.length);\n                const keyframes = makeKeyframes(all, 3);\n                setKeyFrames(keyframes);\n            }\n\n            //\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    function callbackMap(point) {\n        // setStateDataMapped\n        let state = stateDataMapped[point.name],\n            totalPopulation = POPULATION[state.stateCode];\n        let testingData = getFormattedTestingData(state.testing_data, totalPopulation, state.name);\n        setTestingData(testingData);\n    }\n\n    function goToStatePage(event, {point}) {\n        let stateCode = tableData.rows.find((row) => row.name === point[0]).stateCode;\n        history.push('/state/' + stateCode);\n    }\n\n    let last = null;\n    function tapCallback(event, data, mapInstance) {\n        // console.log(data.point[0])\n        // fix for tapping same data twice\n        let mouse = d3.mouse(mapInstance.container.node());\n        let latLong = mapInstance.geo.utils.projection.invert(mouse);\n        let point = mapInstance.rendererArrangedReveresd[0].getPoint(latLong, mouse, 0);\n\n        if (data.point[0] === last && point) {\n            return goToStatePage(event, data);\n        }\n\n        last = data.point[0];\n        window.d3.event.allowDefault = true;\n    }\n\n    /**\n     *\n     * @param chart\n     * @param name\n     */\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    function animationDelay(i) {\n        return {animationDelay: i * 200 + 'ms'};\n    }\n\n    function getMapAndTable() {\n        return (\n            <React.Fragment>\n                <div className=\"font-bold my-8 text-center text-gray-700 opacity-0 fade-in\" style={animationDelay(2)}>\n                    <h1 className=\"text-2xl font-extra-bold\">Live Covid-19 Case Map - India</h1>\n                    <h2 className=\"text-xs\">\n                        {isTouchDevice() ? 'Tap/Double Tap' : 'Hover/Click'} on the map for more information\n                    </h2>\n                </div>\n                <div className=\"flex justify-between fade-in my-6\" style={animationDelay(2)}>\n                    <div className=\"text-blue-600 items-center justify-center\">\n                        <div className=\"text-xs py-1\">\n                            Tested <span className=\"font-bold\">{testingData.label}</span>\n                        </div>\n                        <div className=\"text-xl font-bold\">{testingData.tested}</div>\n                        {testingData.date}\n                    </div>\n                    <div className=\"text-blue-600 items-center justify-center text-right\">\n                        <div className=\"text-xs py-1\">\n                            Population{' '}\n                            <a rel=\"noopener\" target=\"_blank\" className=\"bg-blue-100\" href={PUPULATION_SOURCE}>\n                                2019\n                            </a>\n                        </div>\n                        <div className=\"text-sm font-bold\">{testingData.population}</div>\n                        <div className=\"text-sm font-bold\">{testingData.test_per_million} tests / million people</div>\n                    </div>\n                </div>\n\n                <div className=\"fade-in\" style={animationDelay(4)}>\n                    <Map\n                        initCardData={mapInitData}\n                        seriesPoints={stateData}\n                        stateCode={'IND'}\n                        joinBy={'name'}\n                        data={tableData}\n                        cards={['confirmed', 'active', 'recovered', 'dead']}\n                        callback={callbackMap}\n                        clickCallback={goToStatePage}\n                        tapCallback={tapCallback}\n                    />\n                </div>\n\n                <div className=\"w-full my-6 fade-in\" style={animationDelay(6)}>\n                    {fetched && <Table rows={tableData.rows} columns={tableData.columns} link={true} />}\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    //*****************************\n\n    // race bar chart handle\n    let stateCodes = Object.values(STATE_CODES);\n    const chartRef = React.useRef();\n    const handleReplay = () => {\n        chartRef.current.replay();\n    };\n    const handleStart = () => {\n        chartRef.current.start();\n    };\n    const handleStop = () => {\n        chartRef.current.stop();\n    };\n    const playing = chartRef.current ? chartRef.current.playing : false;\n    const [_, forceUpdate] = useState();\n    let parentRef = useRef(null);\n\n    return (\n        <React.Fragment>\n            <Helmet>\n                <title>Coronavirus Outbreak in India - track-covid19.in</title>\n                <meta name=\"title\" content=\"Coronavirus Outbreak in India}: Latest Map and Case Count\" />\n                <meta\n                    name=\"description\"\n                    content={`Live statistics of Coronavirus (COVID-19) in India. Track the confirmed cases, recovered patients, and death toll of India due to the COVID-19 coronavirus.`}\n                />\n            </Helmet>\n            <div className=\"container\">\n                {spinner && (\n                    <div\n                        className=\"flex items-center justify-center fixed h-screen w-full z-10\"\n                        style={{left: 0, top: 0}}\n                    >\n                        <div className=\"lds-dual-ring\"></div>\n                    </div>\n                )}\n                {fetched && (\n                    <div className=\"opacity-0 my-8 fade-in\">\n                        <div className=\"flex flex-wrap justify-center\">\n                            <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                                <div className=\"flex justify-between text-primary font-bold items-center my-2\">\n                                    <div className=\"flex\">\n                                        <Button\n                                            onClick={shareTheApp}\n                                            color=\"primary\"\n                                            className=\"bg-primary\"\n                                            endIcon={<ShareIcon />}\n                                        >\n                                            Share\n                                        </Button>\n                                    </div>\n                                    <div className=\"text-right text-xs mb-2\">\n                                        <h2 className=\"\">Last Updated</h2>\n                                        <h2 id=\"lastUpdated\" className=\"capitalize\">\n                                            {lastUpdated}\n                                        </h2>\n                                    </div>\n                                </div>\n\n                                <div className=\"w-full fade-in mb-4\" style={animationDelay(1)}>\n                                    <DisplayCard ref={childRef} cards={displayCards} count={2000} />\n                                </div>\n\n                                <div className=\"w-full fade-in mb-4 border\" style={animationDelay(2)}>\n                                    <TrendGraph chartJson={dailyChart} history={caseHistory.india} />\n                                </div>\n\n                                {IS_SINGLE_COLUMN && getMapAndTable()}\n\n                                <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(4)}>\n                                    <Chart seriesData={stateCases} name=\"state_cases\" callback={chartCallback} />\n                                </div>\n\n                                <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(5)}>\n                                    <Chart seriesData={growthRateChart} name=\"growth\" callback={chartCallback} />\n                                </div>\n\n                                <div\n                                    className=\"w-full fade-in md:w-40 mb-4 percent-chart border\"\n                                    style={animationDelay(6)}\n                                >\n                                    <Chart seriesData={percentChart} name=\"percent\" callback={chartCallback} />\n                                </div>\n\n                                <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(7)}>\n                                    <Chart seriesData={wordcloudChart} name=\"wordcloud\" callback={chartCallback} />\n                                </div>\n\n                                <div className=\"w-full fade-in mb-4 border\" style={animationDelay(2)}>\n                                    <h2 className=\"ml-3 mt-4\">Animation Of Top 10 States By Total Confirmed Cases</h2>\n                                    <h2 className=\"ml-3 my-0 text-sm text-gray-400 mb-2 subtitle-color\">\n                                        Click the play button to animate the chart\n                                    </h2>\n                                    <div className=\"race-bar\" ref={parentRef}>\n                                        <RacingBarChart\n                                            keyframes={keyframes}\n                                            onStart={() => forceUpdate(true)}\n                                            onStop={() => forceUpdate(false)}\n                                            ref={chartRef}\n                                            parentRef={parentRef}\n                                            categories={stateCodes}\n                                        />\n                                    </div>\n                                    <div style={{marginLeft: 100}} className=\"my-2\">\n                                        <IconButton aria-label=\"replay\" size=\"small\" onClick={handleReplay}>\n                                            <ReplayIcon />\n                                        </IconButton>\n                                        <IconButton onClick={playing ? handleStop : handleStart} size=\"small\">\n                                            {playing ? <PauseIcon /> : <PlayArrowIcon />}\n                                        </IconButton>\n                                    </div>\n                                </div>\n\n                                <div className=\"w-full fade-in\" style={animationDelay(3)}>\n                                    <MetaCard\n                                        history={caseHistory.india}\n                                        tests={metaCardPopulation}\n                                        report={{...mapInitData}}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"w-full md:w-40 md:mx-10\">\n                                {!IS_SINGLE_COLUMN && getMapAndTable()}\n\n                                <div className=\"w-full md:w-40 mb-4 state-bar border fade-in\" style={animationDelay(9)}>\n                                    <Chart seriesData={stateStackedChart} name=\"stacked\" callback={chartCallback} />\n                                </div>\n\n                                <div\n                                    className=\"w-full md:w-40 mb-4 state-bar border fade-in\"\n                                    style={animationDelay(11)}\n                                >\n                                    <Chart\n                                        seriesData={recoveryTrendChart}\n                                        name=\"recovery_trend\"\n                                        callback={chartCallback}\n                                    />\n                                </div>\n\n                                <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(8)}>\n                                    <Chart\n                                        seriesData={deathTrendTotalChart}\n                                        name=\"recovery_trend\"\n                                        callback={chartCallback}\n                                    />\n                                </div>\n\n                                <div\n                                    className=\"w-full md:w-40 mb-4 state-bar border fade-in\"\n                                    style={animationDelay(10)}\n                                >\n                                    <Chart seriesData={deathTrendChart} name=\"death_trend\" callback={chartCallback} />\n                                </div>\n                            </div>\n                            <div className=\"w-full md:w-40 md:mx-10 my-8\">\n                                <h2 className=\"border-l-2 border-primary text-primary font-bold p-2 uppercase text-xl\">\n                                    Top Headlines\n                                </h2>\n                                <NewsCard articles={articles.headlines.articles} />\n                            </div>\n                            <div className=\"w-full md:w-40 md:mx-10 my-8\">\n                                <h2 className=\"border-l-2 border-primary text-primary font-bold p-2 uppercase text-xl\">\n                                    Top News\n                                </h2>\n                                <NewsCard articles={articles.news.articles} />\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Helmet } from \"react-helmet\";\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction Helpline({}) {\n    const [fetched, setFetched] = useState(false);\n    const [helplines, setHelplines] = useState(false);\n\n    useEffect(() => {\n        if (fetched === false) {\n            getHelplines();\n        }\n    }, [fetched]);\n\n    const getHelplines = async () => {\n        try {\n            const [{data: helplines}] = await Promise.all([axios.get('data/helplines.json')]);\n            setHelplines(helplines);\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    /**\n     *\n     * @param value\n     * @param type\n     * @return {string|*}\n     */\n    const formatLinkType = (value, type) => {\n        if (type === 'phone') {\n            return `tel:${value}`;\n        } else if (type === 'whatsapp') {\n            return `whatsapp://send?phone=${value}`;\n        } else if (type === 'email') {\n            return `mailto:${type}`;\n        }\n        return value;\n    };\n\n    return (\n        <React.Fragment>\n            <Helmet>\n                <title>Helplines for Coronavirus Queries - track-covid19.in</title>\n                <meta name=\"title\" content=\"Helplines for Coronavirus Queries - track-covid19.in\" />\n            </Helmet>\n            <div className={'container px-4'} id=\"help-lines\">\n                {Object.keys(helplines).map((key, i) => {\n                    return (\n                        <div key={i}>\n                            <div className=\"fade-in border-l-2 border-primary text-primary font-bold p-2 uppercase my-2\">\n                                <span className=\"ml-1\">{key}</span>\n                            </div>\n                            <div className={'flex flex-wrap -mx-2'}>\n                                {helplines[key].map((helpline, j) => {\n                                    return (\n                                        <div\n                                            key={`${JSON.stringify(helpline)}`}\n                                            className={\n                                                'fade-in md:w-auto w-full shadow px-4 py-2 text-base mx-2 my-2 md:flex-basis-250'\n                                            }\n                                            style={{animationDelay: 30 * j + 'ms'}}\n                                        >\n                                            <div className=\"font-bold\">{helpline.name}</div>\n                                            <a\n                                                className=\"pr-2 underline text-blue-500\"\n                                                href={formatLinkType(helpline.number, helpline.type)}\n                                            >\n                                                {helpline.number}\n                                            </a>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Helpline;\n","import React, {useEffect, useRef, useState} from 'react';\nimport DisplayCard from './display-card';\nimport axios from 'axios';\nimport Table from './table';\nimport Map from './Map';\nimport {Link, useHistory, useParams} from 'react-router-dom';\nimport {STATE_CODES} from '../constants/state-code';\nimport {POPULATION, PUPULATION_SOURCE} from '../constants/population.js';\nimport {getFormattedTestingData} from '../utils/format-test';\nimport TrendGraph from './trend-chart';\nimport {IS_MOBILE_DEVICE, shareTheApp, timeDifference} from '../utils/common-utils';\nimport Chart from './Chart';\nimport {Helmet} from 'react-helmet';\nimport {Button} from '@material-ui/core';\nimport ShareIcon from '@material-ui/icons/Share';\nimport MetaCard from './meta-card';\n\nconst d3 = window.d3;\n\nfunction State({}) {\n    const [fetched, setFetched] = useState(false);\n    const [tableData, setTableData] = useState({rows: [], columns: []});\n    const [mapInitData, setMapInitData] = useState({});\n    const [testingData, setTestingData] = useState({});\n    const [spinner, setSpinner] = useState(true);\n    const childRef = useRef();\n\n    const {stateCode} = useParams();\n    const history = useHistory();\n\n    const stateName = STATE_CODES[stateCode];\n    const statesKeys = Object.keys(STATE_CODES);\n\n    // if (childRef.current) {\n    //     setInterval(function () {\n    //         childRef.current.updateDisplayCardCounts(Math.random());\n    //     }, 1000);\n    // }\n\n    const getCards = (total = {}, today = {}) => {\n        return [\n            {\n                name: 'Confirmed',\n                value: total.confirmed,\n                delta: today.confirmed,\n                colorClass: 'red',\n            },\n            {\n                name: 'Active',\n                value: total.active,\n                delta: today.active,\n                colorClass: 'orange',\n            },\n            {\n                name: 'Recovered',\n                value: total.recovered,\n                delta: today.recovered,\n                colorClass: 'green',\n            },\n            {\n                name: 'Dead',\n                value: total.dead,\n                delta: today.dead,\n                colorClass: 'gray',\n            },\n        ];\n    };\n\n    const [displayCards, setDisplayCards] = useState(getCards());\n    const [districtData, setDistrictData] = useState([]);\n    const [dailyChart, setDailyChart] = useState(null);\n    const [caseHistory, setCaseHistory] = useState(null);\n    const [chartStore, updateChartStore] = useState({});\n    const [percentChart, setPercentChart] = useState({});\n    const [updatedTime, setUpdatedTime] = useState();\n    const [zones, setZones] = useState();\n\n    useEffect(() => {\n        setFetched(false);\n        getData();\n    }, [stateCode]);\n\n    const getData = async () => {\n        try {\n            let [\n                {data: district_data},\n                {data: state_data},\n                {\n                    data: {state: history},\n                },\n                {data: zonesV2},\n                {data: dailyChart},\n                {data: percentChartJson},\n                {data: tests},\n            ] = await Promise.all([\n                axios.get('https://api.track-covid19.in/district_v2.json'),\n                axios.get('https://api.track-covid19.in/reports_v2.json'),\n                axios.get('https://api.track-covid19.in/history.json'),\n                axios.get('https://api.track-covid19.in/zones.json'),\n                axios.get('/charts/daily.json'),\n                axios.get('/charts/percent-chart.json'),\n                axios.get('https://api.track-covid19.in/tests.json'),\n            ]);\n\n            // hide spinner\n            setSpinner(false);\n\n            let districtInfo = district_data[stateCode];\n            let stateInfo = state_data.states[stateCode];\n            let stateTestHistory = tests.states[stateCode],\n                testing_data = stateInfo.testing_data;\n\n            if (stateTestHistory) {\n                testing_data = stateTestHistory[stateTestHistory.length - 1];\n            }\n\n            let state_population = POPULATION[stateCode];\n\n            var formatTime = d3.timeFormat('%B %d, %I:%M%p IST');\n            let parseTime = d3.timeParse('%d/%m/%Y %H:%M:%S');\n            let updatedTime = parseTime(stateInfo.updatedTime);\n            setUpdatedTime(`${timeDifference(new Date(), updatedTime)} - ${formatTime(new Date(updatedTime))}`);\n\n            let testingData = getFormattedTestingData(testing_data, state_population, districtInfo.state);\n            setTestingData(testingData);\n\n            // fix the negative deaths and\n            districtInfo.districts.forEach((district) => {\n                let {today} = district;\n                if (today) {\n                    today.confirmed = Math.max(0, today.confirmed);\n                    today.recovered = Math.max(0, today.recovered);\n                    today.dead = Math.max(0, today.dead);\n                    today.active = today.confirmed - today.recovered - today.dead;\n                }\n            });\n\n            // find out the unknowns\n            {\n                let districts = districtInfo.districts.filter((d) => d.district !== 'Unknown');\n                let totalKnownConfirmed = d3.sum(districts, (district) => district.confirmed),\n                    totalKnownRecovered = d3.sum(districts, (district) => district.recovered),\n                    totalKnownDeaths = d3.sum(districts, (district) => district.dead);\n\n                let unknowns = {\n                    district: 'Unknown',\n                    confirmed: stateInfo.confirmed - totalKnownConfirmed,\n                    recovered: stateInfo.recovered - totalKnownRecovered,\n                    dead: stateInfo.dead - totalKnownDeaths,\n                };\n                unknowns.active = unknowns.confirmed - unknowns.recovered - unknowns.dead;\n                districts.push(unknowns);\n                districtInfo.districts = districts;\n            }\n\n            {\n                let {today} = stateInfo;\n                if (today) {\n                    today.confirmed = Math.max(0, today.confirmed);\n                    today.recovered = Math.max(0, today.recovered);\n                    today.dead = Math.max(0, today.dead);\n                    today.active = today.confirmed - today.recovered - today.dead;\n                }\n            }\n\n            setDisplayCards(getCards(stateInfo, stateInfo.today));\n            setDistrictData(districtInfo.districts);\n\n            let mapInitData = {\n                confirmed: stateInfo.confirmed,\n                active: stateInfo.active,\n                recovered: stateInfo.recovered,\n                dead: stateInfo.dead,\n                name: stateInfo.name,\n                today: stateInfo.today,\n            };\n            setMapInitData(mapInitData);\n\n            setTableData({\n                rows: districtInfo.districts,\n                columns: [\n                    {name: 'district', accessor: 'district'},\n                    {\n                        name: IS_MOBILE_DEVICE ? 'cnfmd' : 'confirmed',\n                        accessor: 'confirmed',\n                        colorClass: 'red',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'actv' : 'active',\n                        accessor: 'active',\n                        colorClass: 'orange',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'Rcvrd' : 'recovered',\n                        accessor: 'recovered',\n                        colorClass: 'green',\n                    },\n                    {\n                        name: 'dead',\n                        accessor: 'dead',\n                        colorClass: 'gray',\n                    },\n                ],\n            });\n\n            setDailyChart(dailyChart);\n            if (history[stateCode]) {\n                setCaseHistory(history[stateCode]);\n            }\n\n            {\n                percentChartJson.seriesdata.chartdata[0] = {\n                    type: 'pie',\n                    data: [\n                        ['Active', stateInfo.active],\n                        ['Recovered', stateInfo.recovered],\n                        ['Dead', stateInfo.dead],\n                    ],\n                };\n                if (stateInfo.confirmed > 0) {\n                    setPercentChart(percentChartJson);\n                }\n            }\n\n            let zoneV2 = zonesV2[stateCode].map((row) => [row.district, `${row.zone} Zone`]);\n\n            setZones(zoneV2);\n\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const changeStatePage = (event) => {\n        history.push('/state/' + event.target.value);\n    };\n\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    return (\n        <React.Fragment>\n            <Helmet>\n                <title>Coronavirus Outbreak in {STATE_CODES[stateCode]} - track-covid19.in</title>\n                <meta\n                    name=\"title\"\n                    content={`Coronavirus Outbreak in ${STATE_CODES[stateCode]}: Latest Map and Case Count`}\n                />\n                <meta\n                    name=\"description\"\n                    content={`Live statistics of Coronavirus (COVID-19) in ${STATE_CODES[stateCode]} - India. Track the confirmed cases, recovered patients, and death toll of India due to the COVID-19 coronavirus.`}\n                />\n            </Helmet>\n            <div className=\"container\">\n                {spinner && (\n                    <div\n                        className=\"flex items-center justify-center fixed h-screen w-full z-10\"\n                        style={{left: 0, top: 0}}\n                    >\n                        <div className=\"lds-dual-ring\"></div>\n                    </div>\n                )}\n                {fetched && (\n                    <div className=\"opacity-0 my-6 fade-in\">\n                        <div className=\"flex flex-wrap justify-center\">\n                            <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                                <div className=\"w-full md:w-40 font-bold cursor-pointer flex pb-6 text-xs text-gray-600 items-center\">\n                                    <Link to={'/'}>Home</Link> <span className=\"px-1\">/</span>\n                                    <select\n                                        onChange={changeStatePage}\n                                        defaultValue={stateCode}\n                                        name=\"states\"\n                                        className=\"bg-gray-200 font-bold appearance-none py-1 px-2 state-select\"\n                                    >\n                                        {statesKeys.map((key) => {\n                                            return (\n                                                <option value={key} key={key}>\n                                                    {STATE_CODES[key]}\n                                                </option>\n                                            );\n                                        })}\n                                    </select>\n                                </div>\n\n                                <div className=\"flex justify-between text-primary font-bold items-center my-6\">\n                                    <div>\n                                        <h1 className=\"font-extra-bold text-primary text-3xl\">{stateName}</h1>\n                                        <div className=\"text-xs text-gray-700 font-bold\">\n                                            <h2 className=\"\">Last Updated</h2>\n                                            <h2 id=\"lastUpdated\" className=\"capitalize\">\n                                                {updatedTime}\n                                            </h2>\n                                        </div>\n                                    </div>\n                                    <div>\n                                        <Button\n                                            onClick={shareTheApp}\n                                            color=\"primary\"\n                                            className=\"bg-primary\"\n                                            endIcon={<ShareIcon />}\n                                        >\n                                            Share\n                                        </Button>\n                                    </div>\n                                </div>\n                                <div className=\"w-full fade-in\">\n                                    <DisplayCard ref={childRef} cards={displayCards} count={2000} />\n                                </div>\n                                <div className={`w-full my-6 ${fetched ? 'fade-in anim-delay-1' : ''}`}>\n                                    <Table rows={tableData.rows} columns={tableData.columns} />\n                                </div>\n                            </div>\n                            <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                                <div className=\"\">\n                                    <div className=\"flex justify-between fade-in anim-delay-2\">\n                                        <div className=\"text-blue-600 items-center justify-center p-2\">\n                                            <div className=\"text-xs py-1\">Tested</div>\n                                            <div className=\"text-xl font-bold\">{testingData.tested}</div>\n                                            {testingData.date}\n                                        </div>\n                                        <div className=\"text-blue-600 items-center justify-center text-right p-2\">\n                                            <div className=\"text-xs py-1\">\n                                                Population{' '}\n                                                <a\n                                                    rel=\"noopener\"\n                                                    target=\"_blank\"\n                                                    className=\"bg-blue-100\"\n                                                    href={PUPULATION_SOURCE}\n                                                >\n                                                    2019\n                                                </a>\n                                            </div>\n                                            <div className=\"text-sm font-bold\">{testingData.population}</div>\n                                            <div className=\"text-sm font-bold\">\n                                                {testingData.test_per_million} tests / million people\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"fade-in opacity-0  anim-delay-2 py-4\">\n                                        <Map\n                                            initCardData={mapInitData}\n                                            stateCode={stateCode}\n                                            seriesPoints={districtData}\n                                            joinBy={'district'}\n                                            cards={['confirmed', 'active', 'recovered', 'dead']}\n                                            zones={zones}\n                                        />\n                                    </div>\n                                    <div className=\"w-full fade-in\">\n                                        <MetaCard history={caseHistory} tests={testingData} report={mapInitData} />\n                                    </div>\n\n                                    <div className=\"w-full border my-6\">\n                                        {dailyChart && <TrendGraph chartJson={dailyChart} history={caseHistory} />}\n                                    </div>\n\n                                    <div className=\"w-full border my-6\" style={{height: '400px'}}>\n                                        <Chart seriesData={percentChart} name=\"percent\" callback={chartCallback} />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default State;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n    const {pathname} = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return null;\n}\n","import React from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\n\nimport Navbar from \"./components/navbar\";\nimport Home from \"./components/home\";\nimport Helpline from \"./components/helplines\";\nimport State from \"./components/state\";\nimport \"./styles/styles.css\";\nimport ScrollToTop from \"./utils/scroll-top\";\nimport { Helmet } from \"react-helmet\";\nimport Analytics from \"react-router-ga\";\n\nfunction App() {\n    const pages = [\n        {\n            pageLink: '/',\n            view: Home,\n            displayName: 'Home',\n            showInNavbar: true,\n        },\n        {\n            pageLink: '/helplines',\n            view: Helpline,\n            displayName: 'Helplines',\n            showInNavbar: true,\n        },\n        {\n            pageLink: '/state/:stateCode',\n            view: State,\n            displayName: 'State',\n            showInNavbar: false,\n        },\n    ];\n\n    const schemaMarkup = {\n        '@context': 'http://schema.org/',\n        '@type': 'NGO',\n        name: 'Coronavirus Outbreak in India: Latest Map and Case Count',\n        alternateName: 'COVID-19 Tracker',\n        url: 'https://track-covid-19.in',\n        image: 'https://www.track-covid19.in/thumbnail.png',\n    };\n\n    return (\n        <div className=\"App\">\n            <Helmet>\n                <script type=\"application/ld+json\">{JSON.stringify(schemaMarkup)}</script>\n            </Helmet>\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <ScrollToTop />\n                <Analytics id=\"UA-163302592-1\">\n                    <Route\n                        render={({location}) => (\n                            <div className=\"Routing\">\n                                <Navbar pages={pages} />\n                                <Switch location={location}>\n                                    {pages.map((page, index) => {\n                                        return (\n                                            <Route\n                                                exact\n                                                path={page.pageLink}\n                                                render={({match}) => (\n                                                    <page.view key={match.params.stateCode || index} />\n                                                )}\n                                                key={index}\n                                            />\n                                        );\n                                    })}\n                                    <Redirect to=\"/\" />\n                                </Switch>\n                            </div>\n                        )}\n                    />\n                </Analytics>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}