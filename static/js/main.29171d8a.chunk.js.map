{"version":3,"sources":["components/navbar.jsx","components/arrow.js","components/display-card.jsx","components/table.jsx","utils/sort.js","components/text.js","components/Map.js","constants/population.js","utils/format-test.js","components/Chart.js","charts/daily.js","utils/common-utils.js","components/trend-chart.js","components/meta-card.js","components/news-card.js","components/home.jsx","constants/state-code.js","components/helplines.jsx","components/state.jsx","utils/scroll-top.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","pages","useState","className","exact","to","src","alt","map","page","i","showInNavbar","pageLink","key","activeClassName","path","animationDelay","animationDelayForNavbar","window","location","pathname","style","displayName","Arrow","up","rotate","arrow","transform","marginTop","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","points","DisplayCard","forwardRef","ref","count","cc","cards","styles","callback","setCards","name","activeCard","setActiveCard","updateActiveCard","card","useImperativeHandle","updateDisplayCardCounts","bg100","bg200","shadow","flexAuto","bg","colorClass","autoWidth","onClick","onTouchStart","delta","value","Table","props","columns","rows","filter","row","confirmed","setValues","useEffect","slice","sortRows","event","thisElement","currentTarget","prop","dataset","asc","ascending","sorted","sort","a","b","NaN","descending","column","data-prop","accessor","title","index","j","columnName","todayCount","extraClass","today","district","link","stateCode","colorMap","active","recovered","dead","tested","getCards","total","list","item","MapText","state","initCardData","child","React","createRef","data","this","setState","current","Component","d3","Map","handleMapHover","update","selected","mapType","rawPoints","seriesPoints","joinBy","zones","codeLower","toLowerCase","scopeCode","totalSummery","mapExtents","max","d","colors","object_map","forEach","zoneMap","Promise","all","axios","get","toposjon","mapData","$ZC","mapCollections","availableNames","objects","source","geometries","name_ascii","properties","push","zone","includes","console","log","myDiv","classList","add","scope","seriesdata","chartdata","legend","colorBand","stops","last","tapCallback","clickCallback","mapAction","error","point","data_callback","percent","parseFloat","toFixed","container","attr","allowDefault","defaultEvent","chart","plot","plotoptions","geoheatmap","events","mousemove","mouseout","tap","click","maps","userdata","selectAll","classed","select","ranges","enabled","metadata","axes","clr","strokeColor","eventHandler","mapEvents","clearHighlightedPoints","redraw","target","indexOf","bind","c","changeMapType","colorFinder","chartInstance","POPULATION","DL","HR","KL","HP","PB","GA","TG","UT","CH","LD","DN","GJ","CT","DD","AN","TN","MH","KA","OR","WB","PY","AP","JH","TR","MP","MZ","UP","RJ","SK","BR","MN","AR","JK","LA","NL","ML","AS","PUPULATION_SOURCE","parseTime","timeParse","formatTime","timeFormat","getFormattedTestingData","testing_data","totalPopulation","label","dateString","date","href","rel","populationNumeric","testedNumeric","toLocaleString","population","test_per_million","Math","round","Chart","seriesData","charts","updateCallback","dailyTrend","history","xKey","keys","cumulative","series","s","obj","prev","makeCumulative","toCapitalize","string","charAt","toUpperCase","toFixedNumber","number","decimal","tenToD","pow","Number","EPSILON","timeDifference","previous","elapsed","fixRelative","num","str","t0","msPerMinute","msPerHour","msPerDay","clone","json","JSON","parse","stringify","IS_MOBILE_DEVICE","innerWidth","IS_SINGLE_COLUMN","shareTheApp","message","document","url","undefined","navigator","share","text","then","catch","shareUri","encodeURI","left","screen","w","top","h","open","shareURL","precision","multiplier","TrendGraph","chartJson","useRef","chartStore","updateChartStore","timeFrame","setTimeFrame","setCumulative","trendTime","month","seriesNames","getTrendSeries","dailySeries","minRange","updateTimeFrame","frame","length","daily","seriesname","xaxis","canvas","show","checked","scaleState","setScaleState","cumulativeMode","setCumulativeMode","Fragment","FormControlLabel","control","Switch","size","onChange","color","disabled","scaleMode","yaxis","scaleType","type","NaNCheck","isNaN","MetaCard","report","tests","confirmedPerMillion","activePercent","recoveredPercent","deathPercent","testPerMillion","confirmedCumulative","growRatePerWeek","growthDateRange","lastWeek","yesterday","split","info","description","cardColor","reportLabel","Tooltip","placement","enterTouchDelay","regex","RegExp","join","overflow","wordBreak","NewsCard","articles","article","relativeTime","Date","publishedAt","match","iconDiv","icon","backgroundImage","urlToImage","lazy","Home","fetched","setFetched","setData","tableData","setTableData","mapInitData","setMapInitData","testingData","setTestingData","metaCardPopulation","setMetaCardPopulation","stateDataMapped","setStateDataMapped","dailyChart","setDailyChart","stateStackedChart","setStateStackedChart","deathTrendChart","setDeathTrendChart","deathTrendTotalChart","setDeathTrendTotalChart","recoveryTrendChart","setRecoveryTrendChart","growthRateChart","setGrowthRateChart","stateCases","setStateCases","wordcloudChart","setWordcloudChart","percentChart","setPercentChart","useHistory","childRef","lastUpdated","setLastUpdated","caseHistory","setCaseHistory","spinner","setSpinner","setArticles","displayCards","setDisplayCards","stateData","setStateData","getData","reports","indiaHistory","india","stateHistory","stateBar","percentChartJson","news","updatedTime","sum","Object","values","testing_data_imcr","states","t","deathRateByRecovery","deathRateByTotal","recoveryRateByTotal","stateBarSeries","barSeriesNames","stateBarStacked","lineSeriesNames","stateBarSeriesLine","subtitle","bar","stacked","yaxiscolumnorder","lineSeriesNames1","recoverySeriesLine","march1","stateCasesChart","stateCasesChartLog","threshold","tickCount","ticklabel","alignMode","datatype","columnname","dataindex","numeric","axisformat","prefix","wordcloudSeries","wordCloudChart","wordcloud","minSize","legendHighlightEffect","selectedSeries","callbackMap","goToStatePage","find","mapInstance","mouse","node","latLong","geo","utils","projection","invert","rendererArrangedReveresd","getPoint","chartCallback","getMapAndTable","ontouchstart","Helmet","content","Button","endIcon","id","headlines","STATE_CODES","Helpline","helplines","setHelplines","getHelplines","helpline","State","useParams","stateName","statesKeys","districtData","setDistrictData","setUpdatedTime","setZones","district_data","state_data","zonesV2","districtInfo","stateInfo","state_population","districts","totalKnownConfirmed","totalKnownRecovered","totalKnownDeaths","zoneV2","defaultValue","ScrollToTop","useLocation","scrollTo","App","view","alternateName","image","basename","process","render","params","Boolean","hostname","ReactDOM","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29171d8a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst navLinkProps = (path, animationDelay) => ({\n    className: `${window.location.pathname === path ? 'focused' : ''}`,\n    style: {\n        animationDelay: `${animationDelay}s`,\n    },\n});\n\nfunction Navbar({pages}) {\n    const [expand, setExpand] = useState(false);\n    return (\n        <nav className=\"flex items-center flex-wrap bg-white text-primary py-2\">\n            <div className=\"container py-2 px-2 items-center font-bold text-lg\">\n                <div className=\"w-full flex items-center justify-between -my-2\">\n                    <NavLink exact={true} to='/' className=\"flex items-center cursor-pointer lg:flex\">\n                        <img\n                            src=\"/images/covid.svg\"\n                            alt=\"logo\"\n                            className=\"h-10 w-auto mr-3\"\n                        />\n                        <div className=\"text-xl font-bold text-black text-primary\">\n                            COVID-19 India\n                            <span className=\"text-red-600 uppercase live-txt blink\">\n                                Live\n                            </span>\n                        </div>\n                    </NavLink>\n                    <div className=\"flex ml-auto mr-1\">\n                        {pages.map((page, i) => {\n                            if (page.showInNavbar === true) {\n                                return (\n                                    <NavLink\n                                        exact={true}\n                                        to={page.pageLink}\n                                        key={i}\n                                        className={\n                                            'mx-1 px-3 py-4 hidden lg:block nav-link'\n                                        }\n                                        activeClassName={\n                                            'relative nav-link-active'\n                                        }\n                                    >\n                                        <span\n                                            {...navLinkProps(\n                                                page.pageLink,\n                                                page.animationDelayForNavbar\n                                            )}\n                                        >\n                                            {page.displayName}\n                                        </span>\n                                    </NavLink>\n                                );\n                            }\n                            return null;\n                        })}\n                    </div>\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from 'react';\n\n/**\n *\n * @return {string}\n * @constructor\n */\nfunction Arrow({up, rotate = 0}) {\n    let arrow = up ? '5 12 12 5 19 12' : '5 12 12 19 19 12';\n    let transform = {};\n    if (rotate) {\n        transform.transform = `rotate(${rotate}deg)`;\n    }\n    return (\n        <svg\n            style={{marginTop: '-0.14rem', ...transform}}\n            className=\"inline-block\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"10\"\n            height=\"10\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"3\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\" />\n            <polyline points={arrow} />\n        </svg>\n    );\n}\n\nexport default Arrow;\n","import React, {forwardRef, useImperativeHandle, useState} from 'react';\nimport Arrow from './arrow';\n\nconst DisplayCard = forwardRef(({count, cards: cc, styles = {}, callback}, ref) => {\n    let [cards, setCards] = useState(cc);\n    let [activeCard, setActiveCard] = useState(cards[0].name);\n\n    useImperativeHandle(ref, () => ({\n        updateDisplayCardCounts(cards) {\n            setCards(cards);\n        },\n    }));\n\n    function updateActiveCard(card) {\n        setActiveCard(card.name);\n        setCards([...cards]);\n    }\n\n    return (\n        <div className=\"flex flex-row justify-center my-5 justify-between\">\n            {cards.map((card, i) => {\n                let bg100, bg200, shadow, flexAuto;\n\n\n                if (styles.bg !== false || card.name === activeCard) {\n                    bg100 = `bg-${card.colorClass}-100`;\n                    bg200 = `bg-${card.colorClass}-200`;\n                }\n\n                if (styles.shadow !== false) {\n                    shadow = 'shadow';\n                }\n\n                if (styles.autoWidth !== false) {\n                    flexAuto = 'flex-auto';\n                }\n\n                callback = callback || (() => {});\n\n                return (\n                    <div\n                        onClick={() => {\n                            updateActiveCard(card, i);\n                            callback(card, i);\n                        }}\n                        onTouchStart={() => {\n                            updateActiveCard(card, i);\n                            callback(card, i);\n                        }}\n                        key={i}\n                        className={`${\n                            i ? 'ml-2' : ''\n                        } w-24 flex ${flexAuto} flex-col rounded overflow-hidden cursor-pointer ${shadow} text-center text-${\n                            card.colorClass\n                        }-600`}\n                    >\n                        <div className={`pt-2 flex flex-auto flex-col items-center justify-center ${bg100} font-bold`}>\n                            {\n                                <span className=\"text-xs\">\n                                    {card.delta ? <Arrow up={card.delta >= 0} /> : ''}\n                                    {card.delta}\n                                </span>\n                            }\n                            <span className=\"text-xl lg:text-2xl py-1\">{card.value + ''}</span>\n                        </div>\n                        <div className={`py-2 w-full ${bg200} text-sm font-semibold`}>\n                            <span className=\"capitalize\">{card.name}</span>\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n});\n\nexport default DisplayCard;\n","import React, {useEffect, useState} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {ascending, descending} from '../utils/sort';\nimport Arrow from './arrow';\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction Table(props) {\n    let [{rows, columns}, setValues] = useState({\n        columns: props.columns,\n        rows: props.rows.filter((row) => row.confirmed > 0),\n    });\n\n    rows = rows.filter((row) => row.confirmed > 0);\n\n    useEffect(() => {\n        setValues({\n            columns: props.columns.slice(0),\n            rows: props.rows.slice(0),\n        });\n    }, [props]);\n\n    const sortRows = function (event) {\n        let thisElement = event.currentTarget,\n            {prop} = thisElement.dataset;\n\n        let asc = (thisElement.ascending = !thisElement.ascending);\n        let sorted = rows.slice(0).sort(function (a, b) {\n            return asc ? descending(a[prop], b[prop]) : ascending(a[prop], b[prop]);\n        });\n        setValues({\n            rows: sorted,\n            columns,\n        });\n    };\n\n    return (\n        <table className=\"w-full\">\n            <tbody className=\"text-xs leading-tight border-b-2 cursor-pointer\">\n                <tr>\n                    {columns.map((column) => (\n                        <th\n                            className=\"capitalize border px-2 py-2 sort-by sticky bg-white\"\n                            key={column.name}\n                            onClick={sortRows}\n                            data-prop={column.accessor}\n                            title=\"Click to sort\"\n                        >\n                            {column.name}\n                        </th>\n                    ))}\n                </tr>\n            </tbody>\n            <tbody className=\"font-bold\">\n                {rows.map((row, index) => {\n                    return (\n                        <tr key={index}>\n                            {columns.map((column, j) => {\n                                let columnName = column.accessor,\n                                    colorClass = column.colorClass,\n                                    todayCount = 0,\n                                    count = row[columnName],\n                                    extraClass = '';\n\n                                if (row.today) {\n                                    todayCount = row.today[columnName];\n                                }\n\n                                if (row.district === 'Unknown') {\n                                    extraClass = `bg-${colorClass}-200 text-${colorClass}-600`;\n                                }\n\n                                //\n                                if (props.link && j === 0) {\n                                    count = (\n                                        <Link to={`/state/${row.stateCode}`}>\n                                            {count}\n                                            <span className=\"ml-1 text-gray-600\">\n                                                <Arrow rotate={-90} />\n                                            </span>\n                                        </Link>\n                                    );\n                                }\n\n                                return (\n                                    <td\n                                        key={j}\n                                        className={`${\n                                            j === 0 ? 'bg-gray-200' : 'text-right'\n                                        }  text-2xs border px-2 py-2 ${extraClass}`}\n                                    >\n                                        <span>\n                                            {j > 0 && todayCount ? (\n                                                <span className={`text-${colorClass}-600 inline-block`}>\n                                                    <Arrow up={todayCount > 0} />\n                                                    {todayCount}\n                                                </span>\n                                            ) : (\n                                                ''\n                                            )}\n                                        </span>\n                                        <span className=\"text-xs ml-1\">{count}</span>\n                                    </td>\n                                );\n                            })}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </table>\n    );\n}\n\nexport default Table;\n","/**\n *\n * @param a\n * @param b\n * @return {number}\n */\nfunction ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\n/**\n *\n * @param a\n * @param b\n * @return {number}\n */\nfunction descending(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n\nexport {ascending, descending};\n","import React from \"react\";\nimport DisplayCard from \"./display-card\";\n\nlet colorMap = {\n    confirmed: 'red',\n    active: 'orange',\n    recovered: 'green',\n    dead: 'gray',\n    tested: 'blue',\n};\n\nconst getCards = (total = {}, today = {}, list) => {\n    return list.map((item) => {\n        return {\n            name: item,\n            value: total[item],\n            delta: today[item],\n            colorClass: colorMap[item],\n        };\n    });\n};\n\nclass MapText extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = {...props.initCardData, cards: props.cards};\n        this.child = React.createRef();\n    }\n\n    update(data, today) {\n        this.setState(data);\n        let cards = getCards(data, today, this.props.cards);\n        this.child.current.updateDisplayCardCounts(cards);\n    }\n\n    render() {\n        let cards = getCards(this.state, this.state.today, this.props.cards);\n        let {name} = this.state;\n\n        return (\n            <div>\n                <h2 className=\"font-extra-bold text-xl text-primary my-2\">\n                    {name}\n                </h2>\n                <DisplayCard\n                    styles={{bg: false, autoWidth: false}}\n                    cards={cards}\n                    ref={this.child}\n                    callback={this.props.callback}\n                />\n            </div>\n        );\n    }\n}\nexport default MapText;\n","import React from 'react';\nimport axios from 'axios';\nimport MapText from './text';\nconst d3 = window.d3;\n\nclass Map extends React.Component {\n    constructor(props) {\n        super(props);\n        this.child = React.createRef();\n        this.selected = props.cards[0];\n        this.mapType = 'affected';\n    }\n\n    handleMapHover = (data, today) => {\n        this.child.current.update(data, today);\n    };\n\n    async componentDidMount() {\n        let {stateCode, seriesPoints: rawPoints, joinBy, zones} = this.props,\n            codeLower = stateCode.toLowerCase(),\n            scopeCode = `countries-ind-${codeLower}-2`,\n            seriesPoints = [],\n            totalSummery = this.props.initCardData;\n\n        this.mapExtents = {\n            confirmed: {\n                count: d3.max(rawPoints, (d) => d.confirmed),\n                colors: ['#fff4ec', '#ff1100'],\n            },\n            active: {\n                count: d3.max(rawPoints, (d) => d.active),\n                colors: ['#fff4ec', '#f36f40'],\n            },\n            recovered: {\n                count: d3.max(rawPoints, (d) => d.recovered),\n                colors: ['#f4fcee', '#007e1a'],\n            },\n            dead: {\n                count: d3.max(rawPoints, (d) => d.dead),\n                colors: ['#fcfbfc', '#2f2f2f'],\n            },\n        };\n\n        // create a object map and then asign to the series poitns\n        let object_map = {};\n        rawPoints.forEach((row) => {\n            object_map[row[joinBy]] = row;\n        });\n\n        let zoneMap = {};\n        if (zones) {\n            zones.forEach((row) => {\n                zoneMap[row[0]] = row[1];\n            });\n        }\n\n        const [{data: toposjon}, {data: mapData}] = await Promise.all([\n            axios.get(`/maps/${stateCode}.topojson`),\n            axios.get('/charts/map.json'),\n        ]);\n\n        window.$ZC.mapCollections[scopeCode] = toposjon;\n\n        // create data for all available district\n        let availableNames = [];\n        seriesPoints = toposjon.objects.source.geometries.map(({properties: {name_ascii}}) => {\n            let confirmed = 0,\n                active = 0,\n                recovered = 0,\n                dead = 0;\n\n            if (object_map[name_ascii]) {\n                ({confirmed, active, recovered, dead} = object_map[name_ascii]);\n            }\n            availableNames.push(name_ascii);\n            let zone = null;\n            if (zones) {\n                zone = zoneMap[name_ascii];\n            }\n            return [name_ascii, confirmed, active, recovered, dead, zone];\n        });\n\n        // list the non matched names\n        rawPoints.forEach((row) => {\n            if (!availableNames.includes(row[joinBy])) {\n                console.log('map mitchmatch', row[joinBy]);\n            }\n        });\n\n        console.log('*****************************');\n\n        if (zones) {\n            zones.forEach((district) => {\n                if (!availableNames.includes(district[0])) {\n                    console.log('zone mitchmatch', district[0]);\n                }\n            });\n        }\n\n        if (this.myDiv) {\n            this.myDiv.classList.add('fade-in');\n            mapData.map.scope = scopeCode;\n            mapData.seriesdata.chartdata[0].data = [seriesPoints];\n\n            mapData.legend.colors = [...this.mapExtents.confirmed.colors];\n            mapData.legend.colorBand.stops = [0, this.mapExtents.confirmed.count];\n\n            let last = null,\n                {callback, tapCallback, clickCallback} = this.props;\n\n            const mapAction = (error, data) => {\n                let [name, confirmed, active, recovered, dead] = data.point,\n                    today = {recovered: 0, confirmed: 0, active: 0, dead: 0};\n\n                if (object_map[name]) {\n                    today = object_map[name].today;\n                }\n\n                let data_callback = {\n                    name,\n                    confirmed,\n                    active,\n                    recovered,\n                    dead,\n                };\n\n                if (name !== last) {\n                    let total = totalSummery[this.selected] || 0.001,\n                        current = data_callback[this.selected] || 0,\n                        percent = parseFloat(100 * (current / total)).toFixed(2);\n\n                    // add title\n                    this.map.container.attr('title', `${percent}% ${this.selected} from ${data_callback.name}`);\n\n                    this.handleMapHover(data_callback, today);\n                    last = name;\n                }\n\n                if (callback) {\n                    callback(data_callback, today);\n                }\n                window.d3.event.allowDefault = true;\n            };\n\n            let defaultEvent = () => (window.d3.event.allowDefault = true);\n\n            mapData.chart.plot.plotoptions.geoheatmap.events = {\n                mousemove: mapAction,\n                mouseout: () => {\n                    this.map.container.attr('title', null);\n                    window.d3.event.allowDefault = true;\n                },\n                tap: (error, data) => {\n                    mapAction(error, data);\n                    if (tapCallback) {\n                        tapCallback(error, data, this.map);\n                    }\n                    window.d3.event.allowDefault = true;\n                },\n                click: clickCallback || defaultEvent,\n            };\n\n            this.map = window.$ZC.maps(this.myDiv, mapData);\n        }\n    }\n\n    callback(card, i) {\n        let colorMap = ['#e84b36', '#f88658', '#007e1a', '#2f2f2f'];\n\n        this.map.userdata.legend.colors = [...this.mapExtents[card.name].colors];\n        this.map.userdata.legend.colorBand.stops = [0, this.mapExtents[card.name].count];\n        this.selected = card.name;\n\n        // select the default button\n        d3.selectAll('button').classed('text-primary', false);\n        d3.select('button[name=default]').classed('text-primary', true);\n\n        this.map.userdata.legend.colorBand.ranges = null;\n        this.map.userdata.legend.filter.enabled = false;\n        this.map.userdata.metadata.axes.clr = [i + 1];\n        this.map.userdata.chart.plot.plotoptions.geoheatmap.strokeColor = colorMap[i];\n        this.map.eventHandler.mapEvents.clearHighlightedPoints();\n        this.map.redraw();\n    }\n\n    changeMapType(event) {\n        d3.selectAll('button').classed('text-primary', false);\n        event.target.classList.add('text-primary');\n\n        if (event.target.name === 'zone') {\n            this.mapType = 'zone';\n            this.map.userdata.legend.colors = ['#EF5350', '#FFA726', '#26A69A'];\n            this.map.userdata.legend.colorBand.ranges = [['Red Zone'], ['Orange Zone'], ['Green Zone']];\n            this.map.userdata.chart.plot.plotoptions.geoheatmap.strokeColor = '#333';\n            this.map.userdata.legend.filter.enabled = true;\n            this.map.userdata.metadata.axes.clr = [5];\n            this.map.eventHandler.mapEvents.clearHighlightedPoints();\n            this.map.redraw();\n        } else {\n            this.callback({name: this.selected}, this.props.cards.indexOf(this.selected));\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <MapText\n                    ref={this.child}\n                    initCardData={this.props.initCardData}\n                    cards={this.props.cards}\n                    callback={this.callback.bind(this)}\n                />\n                <div className=\"live-map my-6\" ref={(c) => (this.myDiv = c)}></div>\n                {this.props.zones && (\n                    <div className=\"my-4 text-sm\">\n                        <button\n                            className=\"bg-gray-300 px-4 py-3 font-bold text-primary\"\n                            name=\"default\"\n                            onClick={this.changeMapType.bind(this)}\n                            onTouchStart={this.changeMapType.bind(this)}\n                        >\n                            Affected Areas\n                        </button>\n                        <button\n                            className=\"bg-gray-300 px-4 py-3 font-bold ml-2\"\n                            name=\"zone\"\n                            onClick={this.changeMapType.bind(this)}\n                            onTouchStart={this.changeMapType.bind(this)}\n                        >\n                            Zones\n                        </button>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nwindow.colorFinder = function (chartInstance, index, data) {\n    let colorIndex = chartInstance.userdata.metadata.axes.clr[0];\n\n    if (data[colorIndex] === 0) {\n        return 'white';\n    }\n};\n\nexport default Map;\n","export const POPULATION = {\n    DL: 18498192,\n    HR: 27793351,\n    KL: 35461849,\n    HP: 7384022,\n    PB: 29875481,\n    GA: 1564349,\n    TG: 38919054,\n    UT: 11140566,\n    CH: 1142479,\n    LD: 72172,\n    DN: 384058,\n    GJ: 64801901,\n    CT: 28989789,\n    DD: 223165,\n    AN: 411278,\n    TN: 77177540,\n    MH: 121924973,\n    KA: 66834193,\n    OR: 45861035,\n    WB: 98662146,\n    PY: 1394026,\n    AP: 53390841,\n    JH: 37933898,\n    TR: 4112223,\n    MP: 83849671,\n    MZ: 1222134,\n    UP: 233378519,\n    RJ: 79584255,\n    SK: 680721,\n    BR: 122256981,\n    MN: 3048861,\n    AR: 1548776,\n    JK: 13468313,\n    LA: 279924,\n    NL: 2218634,\n    ML: 3320226,\n    AS: 35080827,\n};\n\nexport const PUPULATION_SOURCE =\n    'https://uidai.gov.in/images/state-wise-aadhaar-saturation.pdf';\n\nexport const POPULATION_SOURCE_ARCHIVED =\n    'https://web.archive.org/web/20200229034831/https://uidai.gov.in/images/state-wise-aadhaar-saturation.pdf';\n","import React from 'react';\nconst d3 = window.d3;\nvar parseTime = d3.timeParse('%d/%m/%Y');\nvar formatTime = d3.timeFormat('%B %d');\n\n/**\n *\n * @param testing_data\n * @param totalPopulation\n * @param label\n * @return {{date: *, test_per_million: string, tested: string, label: string, population: string}}\n */\n\nexport function getFormattedTestingData(testing_data, totalPopulation, label) {\n    let dateString = '';\n\n    dateString = (\n        <div className=\"text-xs\">\n            {label === 'Total' ? 'As per latest IMCR ' : `Till ${formatTime(parseTime(testing_data.date))} as per `}\n            <a href={testing_data.source} rel=\"noopener\" className=\"bg-blue-100\" target=\"_blank\">\n                {label === 'Total' ? 'Report' : 'source'}\n            </a>\n        </div>\n    );\n\n    return {\n        populationNumeric: totalPopulation,\n        testedNumeric: testing_data.tested,\n        tested: testing_data.tested.toLocaleString(),\n        date: dateString,\n        population: totalPopulation.toLocaleString(),\n        test_per_million: Math.round((testing_data.tested / totalPopulation) * 1000000).toLocaleString(),\n        label: ` - ${label}`,\n    };\n}\n","import React from 'react';\n\nclass Chart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.child = React.createRef();\n    }\n\n    componentDidMount() {\n        let {seriesData, name, callback} = this.props;\n\n        if (this.myDiv) {\n            let chart = this.chart = window.$ZC.charts(this.myDiv, seriesData);\n            if (callback) {\n                callback(chart, name);\n            }\n        }\n    }\n    \n    componentDidUpdate() {\n        if (this.props.updateCallback) {\n            this.props.updateCallback(this.chart, this.props.name)\n        }\n    }\n\n    render() {\n        return <div className=\"h-full\" ref={(c) => (this.myDiv = c)}></div>;\n    }\n}\n\nexport default Chart;\n","function makeCumulative(obj, key) {\n    let prev = 0;\n    obj.forEach((row) => {\n        row[key] += prev;\n        prev = row[key];\n    });\n}\n\nfunction dailyTrend(history, xKey, keys, cumulative, count) {\n    let series = keys.map((key) => {\n        return history.map((row, i) => {\n            if (xKey === '$index') {\n                return [i, row[key]];\n            }\n            return [row[xKey], row[key]];\n        });\n    });\n\n    if (cumulative) {\n        series.forEach((s) => {\n            makeCumulative(s, 1);\n        });\n    }\n\n    if (count) {\n        series = series.map((s) => s.slice(-count));\n    }\n\n    return series;\n}\n\nexport {dailyTrend, makeCumulative};\n","/**\n *\n * @param xs\n * @param key\n * @return {*}\n */\nexport function groupBy(xs, key) {\n    return xs.reduce(function (rv, x) {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n}\n\nexport function defined(obj) {\n    return obj !== undefined;\n}\n\nexport function toCapitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n *\n * @param number\n * @param decimal\n * @return {number}\n */\nexport function toFixedNumber(number, decimal) {\n    var tenToD = Math.pow(10, decimal);\n    return +(Math.round((number + Number.EPSILON) * tenToD) / tenToD).toFixed(decimal);\n}\n\n/**\n *\n * @param current\n * @param previous\n * @return {string}\n */\nexport function timeDifference(current, previous) {\n    var msPerMinute = 60 * 1000;\n    var msPerHour = msPerMinute * 60;\n    var msPerDay = msPerHour * 24;\n    var msPerMonth = msPerDay * 30;\n    var msPerYear = msPerDay * 365;\n    var elapsed = Math.max(0, current - previous),\n        r,\n        fixRelative = (num, str) => {\n            let t0 = num > 1 ? 's' : '';\n            if (str === 'day' && num === 1) {\n                return 'Yesterday';\n            }\n            return `${num} ${str}${t0} ago`;\n        };\n\n    if (elapsed < msPerMinute) {\n        return `${Math.round(elapsed / 1000)} seconds ago`;\n    } else if (elapsed < msPerHour) {\n        r = Math.round(elapsed / msPerMinute);\n        return fixRelative(r, 'minute');\n    } else if (elapsed < msPerDay) {\n        return fixRelative(Math.round(elapsed / msPerHour), 'hour');\n    } else if (elapsed < msPerMonth) {\n        return fixRelative(Math.round(elapsed / msPerDay), 'day');\n    } else if (elapsed < msPerYear) {\n        return fixRelative(Math.round(elapsed / msPerMonth), 'month');\n    } else {\n        return fixRelative(Math.round(elapsed / msPerYear), 'year');\n    }\n}\n\n/**\n *\n * @param json\n * @return {any}\n */\nexport function clone(json) {\n    return JSON.parse(JSON.stringify(json));\n}\n\nexport const IS_MOBILE_DEVICE = window.innerWidth < 769;\nexport const IS_SINGLE_COLUMN = window.innerWidth < 1620;\n\n/**\n *\n * @param url\n * @param message\n * @return {Window}\n */\nfunction shareURL(url, message) {\n    const shareUri = `https://www.addtoany.com/share#url=${encodeURI(url)}&title=${encodeURI(message)}`;\n    const h = 500;\n    const w = 500;\n    const left = window.screen.width / 2 - w / 2;\n    const top = window.screen.height / 2 - h / 2;\n    return window.open(\n        shareUri,\n        document.title,\n        'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' +\n            w +\n            ', height=' +\n            h +\n            ', top=' +\n            top +\n            ', left=' +\n            left\n    );\n}\n\nexport function shareTheApp() {\n    const message = document.title,\n        url = window.location.href;\n\n    if (navigator.share !== undefined) {\n        navigator\n            .share({\n                title: message,\n                text: message,\n                url: url,\n            })\n            .then()\n            .catch((error) => {});\n    } else {\n        shareURL(url, message);\n    }\n}\n\nexport function round(value, precision) {\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(value * multiplier) / multiplier;\n}\n\nexport function isTouchDevice() {\n    return window.ontouchstart !== undefined;\n}\n","import React, {useEffect, useState, useRef} from 'react';\nimport Chart from './Chart';\nimport {dailyTrend} from '../charts/daily';\nimport {toCapitalize} from '../utils/common-utils';\n\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction TrendGraph(props) {\n    let {chartJson, history} = props;\n\n    const ref = useRef();\n    const [chartStore, updateChartStore] = useState({});\n    const [dailyChartMode, setDailyChartMode] = useState('cumulative');\n\n    const [timeFrame, setTimeFrame] = useState('month');\n    const [cumulative, setCumulative] = useState(true);\n\n    let trendTime = {'1week': 7, '2week': 14, month: 30},\n        seriesNames = ['confirmed', 'active', 'recovered', 'dead'];\n\n    /**\n     *\n     * @param chart\n     * @param name\n     */\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    function updateCallback() {\n        let chart = chartStore.daily,\n            scaleMode = scaleState.checked ? 'log' : 'linear',\n            cumulative = cumulativeMode.checked === false;\n\n        chart.userdata.chart.axes.yaxis[0].scaleType = scaleMode;\n        let {series, minRange} = getTrendSeries(cumulative, trendTime[timeFrame]);\n\n        series.forEach((s, i) => {\n            chart.userdata.seriesdata.chartdata[i].data = s;\n        });\n        chart.userdata.chart.axes.xaxis.minRange = minRange;\n        chart.redraw();\n    }\n\n    function getTrendSeries(cumulative, count) {\n        // create the graph data\n        let seriesNames = ['confirmed', 'active', 'recovered', 'dead'];\n        let dailySeries = dailyTrend(history, 'date', seriesNames, cumulative, count);\n        return {\n            series: dailySeries,\n            minRange: dailySeries[0][0][0],\n        };\n    }\n\n    /**\n     *\n     * @param event\n     */\n    function updateDailyChartScaleMode(event) {\n        let checked = event.target.checked;\n        setScaleState({...scaleState, [event.target.name]: checked});\n        setCumulativeMode({...cumulativeMode, checked: false});\n    }\n\n    /**\n     *\n     * @param event\n     */\n    function updateDailyChartCumulative(event) {\n        let cumulative = event.target.checked === false;\n        setCumulative(cumulative);\n\n        setCumulativeMode({...cumulativeMode, checked: !cumulative});\n        setScaleState({...scaleState, checked: false});\n    }\n\n    function updateTimeFrame(frame) {\n        setTimeFrame(frame);\n    }\n\n    if (history.length && !chartStore.daily) {\n        let {series, minRange} = getTrendSeries(true, trendTime[timeFrame]);\n        series.forEach((series, i) => {\n            chartJson.seriesdata.chartdata[i] = {data: series, seriesname: toCapitalize(seriesNames[i])};\n        });\n        chartJson.chart.axes.xaxis.minRange = minRange;\n        chartJson.canvas.title.show = false;\n    }\n\n    const [scaleState, setScaleState] = React.useState({checked: false});\n    const [cumulativeMode, setCumulativeMode] = React.useState({checked: false});\n\n    return (\n        <React.Fragment>\n            <h2 className=\"ml-3 mt-4\">Daily Trend</h2>\n            <div className=\"ml-3 flex mt-2\">\n                <div className=\"flex items-center \">\n                    <span className=\"mr-2\">Scale</span>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                size=\"small\"\n                                checked={scaleState.checked}\n                                onChange={updateDailyChartScaleMode}\n                                name=\"checked\"\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Logarithmic\"\n                    />\n                </div>\n                <div className=\"flex items-center \">\n                    <span className=\"mr-2\">Mode</span>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                disabled={scaleState.checked}\n                                size=\"small\"\n                                checked={cumulativeMode.checked}\n                                onChange={updateDailyChartCumulative}\n                                name=\"checked\"\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Daily\"\n                    />\n                </div>\n            </div>\n            <div className=\"trend-graph\">\n                <Chart seriesData={chartJson} name=\"daily\" callback={chartCallback} updateCallback={updateCallback} />\n            </div>\n            <div className=\"flex flex-auto z-10 my-4 items-center justify-end\">\n                <div className=\"button-group text-sm mr-4\">\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('all')}\n                        className={`${\n                            timeFrame === 'all' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        Beginning\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('month')}\n                        className={`${\n                            timeFrame === 'month' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        Month\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('2week')}\n                        className={`${\n                            timeFrame === '2week' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        2 Weeks\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={() => updateTimeFrame('1week')}\n                        className={`${\n                            timeFrame === '1week' ? 'selected' : ''\n                        } text-2xs px-4 py-2 font-extra-bold no-outline`}\n                    >\n                        1 Week\n                    </button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default TrendGraph;\n","import React from 'react';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InfoIcon from '@material-ui/icons/Info';\nimport {PUPULATION_SOURCE} from '../constants/population';\nimport {round} from '../utils/common-utils';\n\n/**\n *\n * @return {*}\n * @constructor\n */\n\nconst NaNCheck = (d) => {\n    if (isNaN(d)) {\n        return 0;\n    }\n    return d;\n};\n\nfunction MetaCard({report, tests, history}) {\n    let {populationNumeric: population} = tests;\n\n    let confirmedPerMillion = NaNCheck(round((report.confirmed / population) * 1000000, 2));\n    let activePercent = NaNCheck(round((report.active / report.confirmed) * 100, 2));\n    let recoveredPercent = NaNCheck(round((report.recovered / report.confirmed) * 100, 2));\n    let deathPercent = NaNCheck(round((report.dead / report.confirmed) * 100, 2));\n    let testPerMillion = NaNCheck(round((tests.testedNumeric / population) * 1000000, 2));\n\n    // add a sum for total confirmed\n    let last = 0;\n    history.forEach((row) => {\n        row.confirmedCumulative = row.confirmed + last;\n        last = row.confirmedCumulative;\n    });\n\n    let growRatePerWeek = 0,\n        growthDateRange = 0;\n\n    if (history.length) {\n        let lastWeek = history[history.length - 8],\n            yesterday = history[history.length - 2];\n\n        if (history.length < 8) {\n            lastWeek = history[0];\n        }\n\n        let growthRate =\n            ((yesterday.confirmedCumulative - lastWeek.confirmedCumulative) / lastWeek.confirmedCumulative) * 100;\n        growRatePerWeek = round(growthRate / 7);\n        growthDateRange = `${lastWeek.date.split(',')[0]} - ${yesterday.date.split(',')[0]}`;\n    }\n    // const doublingRate = growthRate > 0 ? 70 / round(growthRate, 2) : 0;\n\n    let cards = [\n        {\n            title: 'Confirmed Per Million',\n            info: '(confirmed / state population) * 1 Million',\n            report: confirmedPerMillion,\n            description: `~${round(confirmedPerMillion)} out of every 1 million people in ${\n                report.name\n            } have tested positive for the virus.`,\n            cardColor: 'red',\n        },\n        {\n            title: 'Active',\n            info: '(active / confirmed) * 100',\n            report: activePercent,\n            description: `For every 100 confirmed cases, ~${round(activePercent)} are currently infected.`,\n            cardColor: 'orange',\n        },\n        {\n            title: 'Recovery Rate',\n            info: '(recovered / confirmed) * 100',\n            report: recoveredPercent,\n            description: `For every 100 confirmed cases, ~${round(recoveredPercent)} have recovered from the virus.`,\n            cardColor: 'green',\n        },\n        {\n            title: 'Mortality Rate',\n            info: '(deaths / confirmed) * 100',\n            report: deathPercent,\n            description: `For every 100 confirmed cases, ~${round(\n                deathPercent\n            )} have unfortunately passed away from the virus.`,\n            cardColor: 'gray',\n        },\n        {\n            title: 'Average Growth Rate',\n            info: '(((yesterdayData - sevenDayBeforeData) / sevenDayBeforeData) * 100) / 7',\n            report: `${growRatePerWeek}%`,\n            reportLabel: growthDateRange,\n            description: `In the last one week, the number of new infections has grown by an average of ${growRatePerWeek}% every day.`,\n            cardColor: 'brown',\n        },\n        {\n            title: 'Tests Per Million',\n            info: '(total tests / total population) * 1 Million',\n            report: `~${testPerMillion}`,\n            description: `For every 1 million people in ${report.name}, ~${round(testPerMillion)} people were tested.`,\n            cardColor: 'blue',\n        },\n    ];\n\n    return (\n        <React.Fragment>\n            <div className=\"flex justify-between my-4\">\n                <div className=\"text-gray-700 font-bold\">\n                    <h2 className=\"text-sm\">\n                        Population{' '}\n                        <a rel=\"noopener\" target=\"_blank\" className=\"text-blue-600\" href={PUPULATION_SOURCE}>\n                            2019\n                        </a>\n                    </h2>\n                    <h3 className=\"my-0 mt-1 text-2xl font-extra-bold\">{tests.population}</h3>\n                </div>\n            </div>\n            <div className=\"meta-card my-4\">\n                {cards.map((card, i) => {\n                    return (\n                        <div\n                            className={`meta-item px-6 py-6 bg-${card.cardColor}-100 text-${card.cardColor}-400 font-bold rounded shadow`}\n                            key={i}\n                        >\n                            <div className=\"meta-item-top flex items-center justify-between\">\n                                <h4 className=\"my-0 text-base\">{card.title}</h4>\n                                <span>\n                                    <Tooltip\n                                        title={<div className=\"text-sm py-2 global-style\">{card.info}</div>}\n                                        arrow\n                                        placement=\"top\"\n                                        enterTouchDelay={50}\n                                    >\n                                        <InfoIcon size=\"small\" />\n                                    </Tooltip>\n                                </span>\n                            </div>\n                            <div className=\"my-2\">\n                                <h1 className={`text-${card.cardColor}-600 text-2xl font-extra-bold`}>{card.report}</h1>\n                                <span className=\"text-xs\">{card.reportLabel}</span>\n                            </div>\n                            <p className=\"text-sm\">{card.description}</p>\n                        </div>\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default MetaCard;\n","import React from 'react';\nimport {timeDifference} from '../utils/common-utils';\nconst icons = [\n        'bangaloremirror',\n        'firstspot',\n        'indiatoday',\n        'livemint',\n        'ndtv',\n        'news18',\n        'thehindu',\n        'zeenews',\n        'tribuneindia',\n        'hindustantimes',\n        'indiatvnews',\n        'timesofindia',\n        'firstpost',\n        'telanganatoday',\n        'cnbc',\n        'economictimes',\n        'moneycontrol',\n        'youtube',\n        'businessinsider',\n        'indianexpress',\n        'gadgetsnow',\n        'mumbaimirror',\n        'thenewsminute',\n    ],\n    regex = new RegExp(icons.join('|')),\n    styles = {overflow: 'hidden', wordBreak: 'break-word'};\n\nfunction NewsCard({articles}) {\n    return (\n        <React.Fragment>\n            {articles.map((article, i) => {\n                let relativeTime = timeDifference(new Date(), new Date(article.publishedAt));\n                let match = article.url.match(regex),\n                    iconDiv = '',\n                    source = '';\n\n                if (match && match.length) {\n                    let icon = `images/news-favicon/${match[0]}.png`;\n                    iconDiv = (\n                        <div className=\"news-favicon bg-no-repeat mb-2\" style={{backgroundImage: `url(${icon})`}}></div>\n                    );\n                } else {\n                    source = (\n                        <div className=\"text-sm break-words mt-2\" style={styles}>\n                            <b>Source:</b> {article.source.name}\n                        </div>\n                    );\n                }\n\n                if (!article.urlToImage || article.urlToImage.match('^http://')) {\n                    return '';\n                }\n\n                return (\n                    <div className=\"article rounded border my-4\" key={i}>\n                        <a\n                            href={article.url}\n                            target=\"_blank\"\n                            rel=\"noopener\"\n                            className=\"article p-4 border-gray-400 flex w-full relative mb-2\"\n                        >\n                            <div\n                                className=\"image-preview bg-cover bg-center bg-no-repeat\"\n                                lazy=\"loaded\"\n                                style\n                                style={{backgroundImage: `url(${article.urlToImage})`}}\n                            ></div>\n\n                            <div className=\"content w-full text-black\">\n                                {iconDiv}\n                                <div\n                                    className=\"text-base font-semibold leading-normal break-words lg:text-base mb-3\"\n                                    style={styles}\n                                >\n                                    {article.title}\n                                </div>\n                                <div className=\"leading-snug break-words text-gray-700 text-xs\" style={styles}>\n                                    {article.description}\n                                </div>\n                                {source}\n                                <div className=\"source-date\">{relativeTime}</div>\n                            </div>\n                        </a>\n                    </div>\n                );\n            })}\n        </React.Fragment>\n    );\n}\n\nexport default NewsCard;\n","import React, {useEffect, useRef, useState} from 'react';\nimport DisplayCard from './display-card';\nimport axios from 'axios';\nimport Table from './table';\nimport Map from './Map';\nimport {POPULATION, PUPULATION_SOURCE} from '../constants/population';\nimport {getFormattedTestingData} from '../utils/format-test';\nimport Chart from './Chart';\nimport {dailyTrend} from '../charts/daily';\nimport {\n    clone,\n    IS_MOBILE_DEVICE,\n    IS_SINGLE_COLUMN,\n    isTouchDevice,\n    shareTheApp,\n    timeDifference,\n    toCapitalize,\n    toFixedNumber,\n} from '../utils/common-utils';\nimport TrendGraph from './trend-chart';\nimport {useHistory} from 'react-router-dom';\nimport {Helmet} from 'react-helmet';\nimport {Button} from '@material-ui/core';\nimport ShareIcon from '@material-ui/icons/Share';\nimport MetaCard from './meta-card';\nimport NewsCard from './news-card';\n\nconst d3 = window.d3;\nconst IS_DESKTOP = !IS_MOBILE_DEVICE;\n\nfunction Home({}) {\n    const [fetched, setFetched] = useState(false);\n    const [data, setData] = useState({});\n    const [tableData, setTableData] = useState({rows: [], columns: []});\n    const [mapInitData, setMapInitData] = useState({});\n    const [testingData, setTestingData] = useState({});\n    const [metaCardPopulation, setMetaCardPopulation] = useState({});\n    const [stateDataMapped, setStateDataMapped] = useState({});\n    const [dailyChart, setDailyChart] = useState(null);\n    const [stateStackedChart, setStateStackedChart] = useState({});\n    const [deathTrendChart, setDeathTrendChart] = useState({});\n    const [deathTrendTotalChart, setDeathTrendTotalChart] = useState({});\n    const [recoveryTrendChart, setRecoveryTrendChart] = useState({});\n    const [growthRateChart, setGrowthRateChart] = useState({});\n    const [stateCases, setStateCases] = useState({});\n    const [wordcloudChart, setWordcloudChart] = useState({});\n    const [percentChart, setPercentChart] = useState({});\n    const history = useHistory();\n    const childRef = useRef();\n    const [chartStore, updateChartStore] = useState({});\n    const [lastUpdated, setLastUpdated] = useState('-');\n    const [caseHistory, setCaseHistory] = useState({});\n    const [spinner, setSpinner] = useState(true);\n    const [articles, setArticles] = useState(true);\n\n    const getCards = (total = {}, today = {}) => {\n        return [\n            {\n                name: 'Confirmed',\n                value: total.confirmed,\n                delta: today.confirmed,\n                colorClass: 'red',\n            },\n            {\n                name: 'Active',\n                value: total.active,\n                delta: today.active,\n                colorClass: 'orange',\n            },\n            {\n                name: 'Recovered',\n                value: total.recovered,\n                delta: today.recovered,\n                colorClass: 'green',\n            },\n            {\n                name: 'Dead',\n                value: total.dead,\n                delta: today.dead,\n                colorClass: 'gray',\n            },\n        ];\n    };\n\n    const [displayCards, setDisplayCards] = useState(getCards());\n    const [stateData, setStateData] = useState([]);\n\n    useEffect(() => {\n        if (fetched === false) {\n            getData();\n        }\n    }, [fetched]);\n\n    const getData = async () => {\n        try {\n            let [\n                {data: reports},\n                {\n                    data: {india: indiaHistory, state: stateHistory},\n                },\n                {data: dailyChart},\n                {data: stateBar},\n                {data: percentChartJson},\n                {data: news},\n            ] = await Promise.all([\n                axios.get('https://api.track-covid19.in/reports_v2.json'),\n                axios.get('https://api.track-covid19.in/history.json'),\n                axios.get('/charts/daily.json'),\n                axios.get('/charts/states.json'),\n                axios.get('/charts/percent-chart.json'),\n                axios.get('https://jsonstorage.net/api/items/72baa701-75d5-4069-89f3-573c4a4bb3e3'),\n            ]);\n\n            setSpinner(false);\n            setData(reports);\n            setCaseHistory({india: indiaHistory, state: stateHistory});\n            setArticles(news);\n\n            // time updated\n            {\n                // 10/05/2020 14:34:22\n                let parseTime = d3.timeParse('%d/%m/%Y %H:%M:%S');\n                let updatedTime = parseTime(reports.updatedTime);\n\n                setLastUpdated(\n                    `${timeDifference(new Date(), updatedTime)} - ${d3.timeFormat('%B %d, %I:%M %p')(\n                        new Date(updatedTime)\n                    )}`\n                );\n            }\n\n            // let a = d3.timeFormat('%B %d, %I:%M %p')(new Date(reports.updatedTime));\n            // console.log(a);\n\n            let totalPopulation = d3.sum(Object.values(POPULATION));\n\n            let testingData = getFormattedTestingData(reports.testing_data_imcr, totalPopulation, 'Total');\n            setTestingData(testingData);\n            setMetaCardPopulation({...testingData});\n\n            setDisplayCards(getCards(reports, reports.today));\n\n            let mapInitData = {\n                confirmed: reports.confirmed,\n                active: reports.active,\n                recovered: reports.recovered,\n                dead: reports.dead,\n                name: 'India',\n                today: reports.today,\n            };\n            setMapInitData(mapInitData);\n\n            let tableData = Object.values(reports.states); //.filter(row => row.confirmed > 0);\n            setStateData(tableData);\n\n            // s\n            let t = {};\n            tableData.forEach((state) => {\n                t[state.name] = state;\n            });\n            setStateDataMapped(t);\n\n            setTableData({\n                rows: tableData,\n                columns: [\n                    {name: 'state/UT', accessor: 'name'},\n                    {\n                        name: IS_MOBILE_DEVICE ? 'cnfmd' : 'confirmed',\n                        accessor: 'confirmed',\n                        colorClass: 'red',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'actv' : 'active',\n                        accessor: 'active',\n                        colorClass: 'orange',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'Rcvrd' : 'recovered',\n                        accessor: 'recovered',\n                        colorClass: 'green',\n                    },\n                    {\n                        name: 'dead',\n                        accessor: 'dead',\n                        colorClass: 'gray',\n                    },\n                ],\n            });\n\n            // daily trend\n            setDailyChart(dailyChart);\n\n            // sort the st\n\n            let states = Object.values(reports.states).filter((state) => state.confirmed > 50);\n\n            // set the factors\n            states.forEach((state) => {\n                state.deathRateByRecovery = toFixedNumber((state.dead / (state.recovered + state.dead)) * 100, 2);\n                state.deathRateByTotal = toFixedNumber((state.dead / state.confirmed) * 100, 2);\n                state.recoveryRateByTotal = toFixedNumber((state.recovered / state.confirmed) * 100, 2);\n            });\n\n            // *************************************************************************** //\n\n            // stacked chart\n            states.sort(function (a, b) {\n                return d3.descending(a.confirmed, b.confirmed);\n            });\n\n            let barSeriesNames = ['confirmed', 'recovered', 'dead'],\n                stateBarSeries = dailyTrend(states, 'name', barSeriesNames),\n                stateBarStacked = clone(stateBar);\n\n            stateBarSeries.forEach((series, i) => {\n                stateBarStacked.seriesdata.chartdata[i] = {data: series, seriesname: toCapitalize(barSeriesNames[i])};\n            });\n            setStateStackedChart(stateBarStacked);\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.deathRateByRecovery, b.deathRateByRecovery);\n                });\n\n                let lineSeriesColumns = ['confirmed', 'recovered', 'dead', 'deathRateByRecovery'],\n                    lineSeriesNames = ['confirmed', 'recovered', 'dead', 'Death Ratio'],\n                    stateBarSeriesLine = dailyTrend(states, 'name', lineSeriesColumns),\n                    deathTrendChart = clone(stateBar);\n\n                deathTrendChart.canvas.title.text = 'Death Ratio By Total Recoveries';\n                deathTrendChart.canvas.subtitle = {text: 'Death Ratio = Deaths / (Deaths + Recoveries)', show: true};\n                deathTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                deathTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                stateBarSeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames[i]),\n                    };\n                    if (i === stateBarSeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = 'rgb(171, 16, 23)';\n                    }\n                    deathTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setDeathTrendChart(deathTrendChart);\n            }\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.deathRateByTotal, b.deathRateByTotal);\n                });\n\n                let lineSeriesColumns = ['confirmed', 'recovered', 'dead', 'deathRateByTotal'],\n                    lineSeriesNames = ['confirmed', 'recovered', 'dead', 'death rate'],\n                    stateBarSeriesLine = dailyTrend(states, 'name', lineSeriesColumns),\n                    deathTrendChart = clone(stateBar);\n\n                deathTrendChart.canvas.title.text = 'Death Ratio By Total Confirmed';\n                deathTrendChart.canvas.subtitle = {text: 'Death Ratio = Deaths / (Deaths + Recoveries)', show: false};\n                deathTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                deathTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                stateBarSeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames[i]),\n                    };\n                    if (i === stateBarSeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = 'rgb(171, 16, 23)';\n                    }\n                    deathTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setDeathTrendTotalChart(deathTrendChart);\n            }\n\n            // *************************************************************************** //\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.recoveryRateByTotal, b.recoveryRateByTotal);\n                });\n\n                let lineSeriesColumns1 = ['confirmed', 'recovered', 'dead', 'recoveryRateByTotal'],\n                    lineSeriesNames1 = ['confirmed', 'recovered', 'dead', 'recovery rate'],\n                    recoverySeriesLine = dailyTrend(states, 'name', lineSeriesColumns1),\n                    recoveryTrendChart = clone(stateBar);\n\n                recoveryTrendChart.canvas.title.text = 'Recovery Ratio By Total Infected';\n                recoveryTrendChart.canvas.subtitle = {text: 'States With  > 50 Confirmed Cases', show: true};\n                recoveryTrendChart.chart.plot.plotoptions.bar.stacked = false;\n                recoveryTrendChart.chart.axes.yaxis[0].label.text = 'Total';\n\n                recoverySeriesLine.forEach((series, i) => {\n                    let s = {\n                        data: series,\n                        seriesname: toCapitalize(lineSeriesNames1[i]),\n                    };\n                    if (i === recoverySeriesLine.length - 1) {\n                        s.type = 'line';\n                        s.yaxiscolumnorder = [1, 0];\n                        s.color = '#00897B';\n                    }\n                    recoveryTrendChart.seriesdata.chartdata[i] = s;\n                });\n                setRecoveryTrendChart(recoveryTrendChart);\n            }\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.confirmed, b.confirmed);\n                });\n\n                var parseTime = d3.timeParse('%b %d, %Y');\n                let march1 = new Date(2020, 1, 29);\n\n                let data = states.slice(0, 15).map((state) => {\n                    let history = stateHistory[state.stateCode].filter((row) => {\n                        return parseTime(row.date) > march1;\n                    });\n\n                    let data = dailyTrend(history, 'date', ['confirmed'], true)[0];\n\n                    return {\n                        seriesname: state.name,\n                        type: 'line',\n                        data: data,\n                    };\n                });\n                let stateCasesChart = clone(dailyChart);\n                stateCasesChart.canvas.title.text = 'Total Confirmed Cases By States';\n                data.forEach((s, i) => {\n                    stateCasesChart.seriesdata.chartdata[i] = s;\n                });\n                setStateCases(stateCasesChart);\n            }\n\n            {\n                states.sort(function (a, b) {\n                    return d3.descending(a.confirmed, b.confirmed);\n                });\n\n                let data = states.slice(0, 20).map((state) => {\n                    let data = dailyTrend(stateHistory[state.stateCode], '$index', ['confirmed'], true)[0];\n                    return {\n                        seriesname: state.name,\n                        type: 'line',\n                        data: data,\n                    };\n                });\n\n                let colors = [\n                    '#f44336',\n                    '#E91E63',\n                    '#9C27B0',\n                    '#673AB7',\n                    '#3F51B5',\n                    '#2196F3',\n                    '#03A9F4',\n                    '#00BCD4',\n                    '#009688',\n                    '#4CAF50',\n                    '#8BC34A',\n                    '#CDDC39',\n                    '#FFEB3B',\n                    '#FFC107',\n                    '#FF9800',\n                    '#FF5722',\n                    '#795548',\n                    '#9E9E9E',\n                    '#607D8B',\n                ];\n\n                let stateCasesChartLog = clone(dailyChart);\n                data.forEach((s, i) => {\n                    stateCasesChartLog.seriesdata.chartdata[i] = s;\n                });\n                stateCasesChartLog.chart.axes.xaxis.threshold = {};\n                stateCasesChartLog.chart.axes.xaxis.tickCount = 5;\n                stateCasesChartLog.chart.axes.xaxis.label = {\n                    text: 'No. Of Days Since 1st Confirmed Case',\n                };\n                stateCasesChartLog.chart.axes.xaxis.ticklabel.alignMode = 'rotate(45)';\n                stateCasesChartLog.metadata.columns[0] = {\n                    datatype: 'numeric',\n                    columnname: 'Day',\n                    dataindex: 0,\n                    numeric: {\n                        axisformat: {\n                            prefix: 'Day ',\n                        },\n                    },\n                };\n                stateCasesChartLog.chart.axes.yaxis[0].scaleType = 'log';\n                stateCasesChartLog.legend.colors = colors;\n                stateCasesChartLog.canvas.title.text = 'Statewise Growth trend';\n                stateCasesChartLog.canvas.subtitle = {text: 'Top 20 States', show: true};\n\n                setGrowthRateChart(stateCasesChartLog);\n            }\n\n            {\n                let wordcloudSeries = dailyTrend(Object.values(reports.states), 'name', ['confirmed']),\n                    wordCloudChart = clone(stateBar);\n\n                wordCloudChart.canvas.title.text = 'Word Cloud of Affected States and UTs';\n                wordCloudChart.chart.axes.yaxis[0].label.text = 'Total';\n                wordCloudChart.seriesdata.chartdata[0] = {\n                    type: 'wordcloud',\n                    data: wordcloudSeries,\n                    seriesname: 'Confirmed',\n                };\n                wordCloudChart.legend.colors = ['#E91E63'];\n                wordCloudChart.legend.enabled = false;\n                wordCloudChart.chart.plot.plotoptions.wordcloud = {\n                    minSize: '2.5%',\n                    legendHighlightEffect: {\n                        selectedSeries: 'invert',\n                    },\n                };\n                setWordcloudChart(wordCloudChart);\n            }\n\n            {\n                percentChartJson.seriesdata.chartdata[0] = {\n                    type: 'pie',\n                    data: [\n                        ['Active', reports.active],\n                        ['Recovered', reports.recovered],\n                        ['dead', reports.dead],\n                    ],\n                };\n                setPercentChart(percentChartJson);\n            }\n\n            //\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    function callbackMap(point) {\n        // setStateDataMapped\n        let state = stateDataMapped[point.name],\n            totalPopulation = POPULATION[state.stateCode];\n        let testingData = getFormattedTestingData(state.testing_data, totalPopulation, state.name);\n        setTestingData(testingData);\n    }\n\n    function goToStatePage(event, {point}) {\n        let stateCode = tableData.rows.find((row) => row.name === point[0]).stateCode;\n        history.push('/state/' + stateCode);\n    }\n\n    let last = null;\n    function tapCallback(event, data, mapInstance) {\n        // console.log(data.point[0])\n        // fix for tapping same data twice\n        let mouse = d3.mouse(mapInstance.container.node());\n        let latLong = mapInstance.geo.utils.projection.invert(mouse);\n        let point = mapInstance.rendererArrangedReveresd[0].getPoint(latLong, mouse, 0);\n\n        if (data.point[0] === last && point) {\n            return goToStatePage(event, data);\n        }\n\n        last = data.point[0];\n        window.d3.event.allowDefault = true;\n    }\n\n    /**\n     *\n     * @param chart\n     * @param name\n     */\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    function animationDelay(i) {\n        return {animationDelay: i * 200 + 'ms'};\n    }\n\n    function getMapAndTable() {\n        return (\n            <React.Fragment>\n                <div className=\"font-bold my-8 text-center text-gray-700 opacity-0 fade-in\" style={animationDelay(2)}>\n                    <h1 className=\"text-2xl font-extra-bold\">Live Covid-19 Case Map - India</h1>\n                    <h2 className=\"text-xs\">\n                        {isTouchDevice() ? 'Tap/Double Tap' : 'Hover/Click'} on the map for more information\n                    </h2>\n                </div>\n                <div className=\"flex justify-between fade-in my-6\" style={animationDelay(2)}>\n                    <div className=\"text-blue-600 items-center justify-center\">\n                        <div className=\"text-xs py-1\">\n                            Tested <span className=\"font-bold\">{testingData.label}</span>\n                        </div>\n                        <div className=\"text-xl font-bold\">{testingData.tested}</div>\n                        {testingData.date}\n                    </div>\n                    <div className=\"text-blue-600 items-center justify-center text-right\">\n                        <div className=\"text-xs py-1\">\n                            Population{' '}\n                            <a rel=\"noopener\" target=\"_blank\" className=\"bg-blue-100\" href={PUPULATION_SOURCE}>\n                                2019\n                            </a>\n                        </div>\n                        <div className=\"text-sm font-bold\">{testingData.population}</div>\n                        <div className=\"text-sm font-bold\">{testingData.test_per_million} tests / million people</div>\n                    </div>\n                </div>\n\n                <div className=\"fade-in\" style={animationDelay(4)}>\n                    <Map\n                        initCardData={mapInitData}\n                        seriesPoints={stateData}\n                        stateCode={'IND'}\n                        joinBy={'name'}\n                        data={tableData}\n                        cards={['confirmed', 'active', 'recovered', 'dead']}\n                        callback={callbackMap}\n                        clickCallback={goToStatePage}\n                        tapCallback={tapCallback}\n                    />\n                </div>\n\n                <div className=\"w-full my-6 fade-in\" style={animationDelay(6)}>\n                    {fetched && <Table rows={tableData.rows} columns={tableData.columns} link={true} />}\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Helmet>\n                <title>Coronavirus Outbreak in India - track-covid19.in</title>\n                <meta name=\"title\" content=\"Coronavirus Outbreak in India}: Latest Map and Case Count\" />\n                <meta\n                    name=\"description\"\n                    content={`Live statistics of Coronavirus (COVID-19) in India. Track the confirmed cases, recovered patients, and death toll of India due to the COVID-19 coronavirus.`}\n                />\n            </Helmet>\n            <div className=\"container\">\n                {spinner && (\n                    <div\n                        className=\"flex items-center justify-center fixed h-screen w-full z-10\"\n                        style={{left: 0, top: 0}}\n                    >\n                        <div className=\"lds-dual-ring\"></div>\n                    </div>\n                )}\n                {fetched && (\n                    <div className=\"opacity-0 my-8 fade-in\">\n                        <div className=\"flex flex-wrap justify-center\">\n                            <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                                <div className=\"flex justify-between text-primary font-bold items-center my-2\">\n                                    <div className=\"flex\">\n                                        <Button\n                                            onClick={shareTheApp}\n                                            color=\"primary\"\n                                            className=\"bg-primary\"\n                                            endIcon={<ShareIcon />}\n                                        >\n                                            Share\n                                        </Button>\n                                    </div>\n                                    <div className=\"text-right text-xs mb-2\">\n                                        <h2 className=\"\">Last Updated</h2>\n                                        <h2 id=\"lastUpdated\" className=\"capitalize\">\n                                            {lastUpdated}\n                                        </h2>\n                                    </div>\n                                </div>\n\n                                <div className=\"w-full fade-in mb-4\" style={animationDelay(1)}>\n                                    <DisplayCard ref={childRef} cards={displayCards} count={2000} />\n                                </div>\n\n                                {IS_SINGLE_COLUMN && getMapAndTable()}\n\n                                <div className=\"w-full fade-in mb-4 border\" style={animationDelay(2)}>\n                                    <TrendGraph chartJson={dailyChart} history={caseHistory.india} />\n                                </div>\n\n                                <div className=\"w-full fade-in\" style={animationDelay(3)}>\n                                    <MetaCard\n                                        history={caseHistory.india}\n                                        tests={metaCardPopulation}\n                                        report={{...mapInitData}}\n                                    />\n                                </div>\n\n                                <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(4)}>\n                                    <Chart seriesData={stateCases} name=\"state_cases\" callback={chartCallback} />\n                                </div>\n\n                                <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(5)}>\n                                    <Chart seriesData={growthRateChart} name=\"growth\" callback={chartCallback} />\n                                </div>\n\n                                <div\n                                    className=\"w-full fade-in md:w-40 mb-4 percent-chart border\"\n                                    style={animationDelay(6)}\n                                >\n                                    <Chart seriesData={percentChart} name=\"percent\" callback={chartCallback} />\n                                </div>\n\n                                <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(7)}>\n                                    <Chart seriesData={wordcloudChart} name=\"wordcloud\" callback={chartCallback} />\n                                </div>\n                                <div className=\"w-full md:w-40 mb-4 state-bar border fade-in\" style={animationDelay(9)}>\n                                    <Chart seriesData={stateStackedChart} name=\"stacked\" callback={chartCallback} />\n                                </div>\n                            </div>\n                            <div className=\"w-full md:w-40 md:mx-10\">\n                                {!IS_SINGLE_COLUMN && getMapAndTable()}\n\n                                <div\n                                    className=\"w-full md:w-40 mb-4 state-bar border fade-in\"\n                                    style={animationDelay(11)}\n                                >\n                                    <Chart\n                                        seriesData={recoveryTrendChart}\n                                        name=\"recovery_trend\"\n                                        callback={chartCallback}\n                                    />\n                                </div>\n\n                                <div className=\"w-full fade-in md:w-40 mb-4 state-bar border\" style={animationDelay(8)}>\n                                    <Chart\n                                        seriesData={deathTrendTotalChart}\n                                        name=\"recovery_trend\"\n                                        callback={chartCallback}\n                                    />\n                                </div>\n\n                                <div\n                                    className=\"w-full md:w-40 mb-4 state-bar border fade-in\"\n                                    style={animationDelay(10)}\n                                >\n                                    <Chart seriesData={deathTrendChart} name=\"death_trend\" callback={chartCallback} />\n                                </div>\n                            </div>\n                            <div className=\"w-full md:w-40 md:mx-10 my-8\">\n                                <h2 className=\"border-l-2 border-primary text-primary font-bold p-2 uppercase text-xl\">\n                                    Top Headlines\n                                </h2>\n                                <NewsCard articles={articles.headlines.articles} />\n                            </div>\n                            <div className=\"w-full md:w-40 md:mx-10 my-8\">\n                                <h2 className=\"border-l-2 border-primary text-primary font-bold p-2 uppercase text-xl\">\n                                    Top News\n                                </h2>\n                                <NewsCard articles={articles.news.articles} />\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Home;\n","export const STATE_CODES = {\n    AP: 'Andhra Pradesh',\n    AR: 'Arunachal Pradesh',\n    AS: 'Assam',\n    BR: 'Bihar',\n    CT: 'Chhattisgarh',\n    GA: 'Goa',\n    GJ: 'Gujarat',\n    HR: 'Haryana',\n    HP: 'Himachal Pradesh',\n    JH: 'Jharkhand',\n    KA: 'Karnataka',\n    KL: 'Kerala',\n    MP: 'Madhya Pradesh',\n    MH: 'Maharashtra',\n    MN: 'Manipur',\n    ML: 'Meghalaya',\n    MZ: 'Mizoram',\n    NL: 'Nagaland',\n    OR: 'Odisha',\n    PB: 'Punjab',\n    RJ: 'Rajasthan',\n    SK: 'Sikkim',\n    TN: 'Tamil Nadu',\n    TG: 'Telangana',\n    TR: 'Tripura',\n    UT: 'Uttarakhand',\n    UP: 'Uttar Pradesh',\n    WB: 'West Bengal',\n    AN: 'Andaman and Nicobar',\n    CH: 'Chandigarh',\n    DN: 'Dadra and Nagar Haveli',\n    DD: 'Daman and Diu',\n    DL: 'Delhi',\n    JK: 'Jammu and Kashmir',\n    LA: 'Ladakh',\n    LD: 'Lakshadweep',\n    PY: 'Puducherry',\n};\n","import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport {Helmet} from 'react-helmet';\nimport {STATE_CODES} from '../constants/state-code';\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction Helpline({}) {\n    const [fetched, setFetched] = useState(false);\n    const [helplines, setHelplines] = useState(false);\n\n    useEffect(() => {\n        if (fetched === false) {\n            getHelplines();\n        }\n    }, [fetched]);\n\n    const getHelplines = async () => {\n        try {\n            const [{data: helplines}] = await Promise.all([axios.get('data/helplines.json')]);\n            setHelplines(helplines);\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    /**\n     *\n     * @param value\n     * @param type\n     * @return {string|*}\n     */\n    const formatLinkType = (value, type) => {\n        if (type === 'phone') {\n            return `tel:${value}`;\n        } else if (type === 'whatsapp') {\n            return `whatsapp://send?phone=${value}`;\n        } else if (type === 'email') {\n            return `mailto:${type}`;\n        }\n        return value;\n    };\n\n    return (\n        <React.Fragment>\n            <Helmet>\n                <title>Helplines for Coronavirus Queries - track-covid19.in</title>\n                <meta name=\"title\" content=\"Helplines for Coronavirus Queries - track-covid19.in\" />\n            </Helmet>\n            <div className={'container px-4'} id=\"help-lines\">\n                {Object.keys(helplines).map((key, i) => {\n                    return (\n                        <div key={i}>\n                            <div className=\"fade-in border-l-2 border-primary text-primary font-bold p-2 uppercase my-2\">\n                                <span className=\"ml-1\">{key}</span>\n                            </div>\n                            <div className={'flex flex-wrap -mx-2'}>\n                                {helplines[key].map((helpline, j) => {\n                                    return (\n                                        <div\n                                            key={`${JSON.stringify(helpline)}`}\n                                            className={\n                                                'fade-in md:w-auto w-full shadow px-4 py-2 text-base mx-2 my-2 md:flex-basis-250'\n                                            }\n                                            style={{animationDelay: 30 * j + 'ms'}}\n                                        >\n                                            <div className=\"font-bold\">{helpline.name}</div>\n                                            <a\n                                                className=\"pr-2 underline text-blue-500\"\n                                                href={formatLinkType(helpline.number, helpline.type)}\n                                            >\n                                                {helpline.number}\n                                            </a>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Helpline;\n","import React, {useEffect, useRef, useState} from 'react';\nimport DisplayCard from './display-card';\nimport axios from 'axios';\nimport Table from './table';\nimport Map from './Map';\nimport {Link, useHistory, useParams} from 'react-router-dom';\nimport {STATE_CODES} from '../constants/state-code';\nimport {POPULATION, PUPULATION_SOURCE} from '../constants/population.js';\nimport {getFormattedTestingData} from '../utils/format-test';\nimport TrendGraph from './trend-chart';\nimport {IS_MOBILE_DEVICE, shareTheApp, timeDifference} from '../utils/common-utils';\nimport Chart from './Chart';\nimport {Helmet} from 'react-helmet';\nimport {Button} from '@material-ui/core';\nimport ShareIcon from '@material-ui/icons/Share';\nimport MetaCard from './meta-card';\n\nconst d3 = window.d3;\n\nfunction State({}) {\n    const [fetched, setFetched] = useState(false);\n    const [tableData, setTableData] = useState({rows: [], columns: []});\n    const [mapInitData, setMapInitData] = useState({});\n    const [testingData, setTestingData] = useState({});\n    const [spinner, setSpinner] = useState(true);\n    const childRef = useRef();\n\n    const {stateCode} = useParams();\n    const history = useHistory();\n\n    const stateName = STATE_CODES[stateCode];\n    const statesKeys = Object.keys(STATE_CODES);\n\n    // if (childRef.current) {\n    //     setInterval(function () {\n    //         childRef.current.updateDisplayCardCounts(Math.random());\n    //     }, 1000);\n    // }\n\n    const getCards = (total = {}, today = {}) => {\n        return [\n            {\n                name: 'Confirmed',\n                value: total.confirmed,\n                delta: today.confirmed,\n                colorClass: 'red',\n            },\n            {\n                name: 'Active',\n                value: total.active,\n                delta: today.active,\n                colorClass: 'orange',\n            },\n            {\n                name: 'Recovered',\n                value: total.recovered,\n                delta: today.recovered,\n                colorClass: 'green',\n            },\n            {\n                name: 'Dead',\n                value: total.dead,\n                delta: today.dead,\n                colorClass: 'gray',\n            },\n        ];\n    };\n\n    const [displayCards, setDisplayCards] = useState(getCards());\n    const [districtData, setDistrictData] = useState([]);\n    const [dailyChart, setDailyChart] = useState(null);\n    const [caseHistory, setCaseHistory] = useState(null);\n    const [chartStore, updateChartStore] = useState({});\n    const [percentChart, setPercentChart] = useState({});\n    const [updatedTime, setUpdatedTime] = useState();\n    const [zones, setZones] = useState();\n\n    useEffect(() => {\n        setFetched(false);\n        getData();\n    }, [stateCode]);\n\n    const getData = async () => {\n        try {\n            let [\n                {data: district_data},\n                {data: state_data},\n                {\n                    data: {state: history},\n                },\n                {data: zonesV2},\n                {data: dailyChart},\n                {data: percentChartJson},\n            ] = await Promise.all([\n                axios.get('https://api.track-covid19.in/district_v2.json'),\n                axios.get('https://api.track-covid19.in/reports_v2.json'),\n                axios.get('https://api.track-covid19.in/history.json'),\n                axios.get('https://api.track-covid19.in/zones.json'),\n                axios.get('/charts/daily.json'),\n                axios.get('/charts/percent-chart.json'),\n            ]);\n\n            // hide spinner\n            setSpinner(false);\n\n            let districtInfo = district_data[stateCode];\n            let stateInfo = state_data.states[stateCode];\n            let {testing_data} = stateInfo;\n            let state_population = POPULATION[stateCode];\n\n            var formatTime = d3.timeFormat('%B %d, %I:%M%p IST');\n            let parseTime = d3.timeParse('%d/%m/%Y %H:%M:%S');\n            let updatedTime = parseTime(stateInfo.updatedTime);\n            setUpdatedTime(`${timeDifference(new Date(), updatedTime)} - ${formatTime(new Date(updatedTime))}`);\n\n            let testingData = getFormattedTestingData(testing_data, state_population, districtInfo.state);\n            setTestingData(testingData);\n\n            // fix the negative deaths and\n            districtInfo.districts.forEach((district) => {\n                let {today} = district;\n                if (today) {\n                    today.confirmed = Math.max(0, today.confirmed);\n                    today.recovered = Math.max(0, today.recovered);\n                    today.dead = Math.max(0, today.dead);\n                    today.active = today.confirmed - today.recovered - today.dead;\n                }\n            });\n\n            // find out the unknowns\n            let districts = districtInfo.districts.filter((d) => d.district !== 'Unknown');\n            let totalKnownConfirmed = d3.sum(districts, (district) => district.confirmed),\n                totalKnownRecovered = d3.sum(districts, (district) => district.recovered),\n                totalKnownDeaths = d3.sum(districts, (district) => district.dead);\n            \n            let unknowns = {\n                confirmed: stateInfo.confirmed - totalKnownConfirmed,\n                recovered: stateInfo.recovered - totalKnownRecovered,\n                dead: stateInfo.dead - totalKnownDeaths\n            }\n            \n\n            setDisplayCards(getCards(stateInfo, stateInfo.today));\n            setDistrictData(districtInfo.districts);\n\n            let mapInitData = {\n                confirmed: districtInfo.confirmed,\n                active: districtInfo.active,\n                recovered: districtInfo.recovered,\n                dead: districtInfo.dead,\n                name: districtInfo.state,\n                today: districtInfo.today,\n            };\n            setMapInitData(mapInitData);\n\n            setTableData({\n                rows: districtInfo.districts,\n                columns: [\n                    {name: 'district', accessor: 'district'},\n                    {\n                        name: IS_MOBILE_DEVICE ? 'cnfmd' : 'confirmed',\n                        accessor: 'confirmed',\n                        colorClass: 'red',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'actv' : 'active',\n                        accessor: 'active',\n                        colorClass: 'orange',\n                    },\n                    {\n                        name: IS_MOBILE_DEVICE ? 'Rcvrd' : 'recovered',\n                        accessor: 'recovered',\n                        colorClass: 'green',\n                    },\n                    {\n                        name: 'dead',\n                        accessor: 'dead',\n                        colorClass: 'gray',\n                    },\n                ],\n            });\n\n            setDailyChart(dailyChart);\n            if (history[stateCode]) {\n                setCaseHistory(history[stateCode]);\n            }\n\n            {\n                percentChartJson.seriesdata.chartdata[0] = {\n                    type: 'pie',\n                    data: [\n                        ['Active', stateInfo.active],\n                        ['Recovered', stateInfo.recovered],\n                        ['Dead', stateInfo.dead],\n                    ],\n                };\n                if (stateInfo.confirmed > 0) {\n                    setPercentChart(percentChartJson);\n                }\n            }\n\n            let zoneV2 = zonesV2[stateCode].map((row) => [row.district, `${row.zone} Zone`]);\n\n            setZones(zoneV2);\n\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const changeStatePage = (event) => {\n        history.push('/state/' + event.target.value);\n    };\n\n    function chartCallback(chart, name) {\n        chartStore[name] = chart;\n        updateChartStore(chartStore);\n    }\n\n    return (\n        <React.Fragment>\n            <Helmet>\n                <title>Coronavirus Outbreak in {STATE_CODES[stateCode]} - track-covid19.in</title>\n                <meta\n                    name=\"title\"\n                    content={`Coronavirus Outbreak in ${STATE_CODES[stateCode]}: Latest Map and Case Count`}\n                />\n                <meta\n                    name=\"description\"\n                    content={`Live statistics of Coronavirus (COVID-19) in ${STATE_CODES[stateCode]} - India. Track the confirmed cases, recovered patients, and death toll of India due to the COVID-19 coronavirus.`}\n                />\n            </Helmet>\n            <div className=\"container\">\n                {spinner && (\n                    <div\n                        className=\"flex items-center justify-center fixed h-screen w-full z-10\"\n                        style={{left: 0, top: 0}}\n                    >\n                        <div className=\"lds-dual-ring\"></div>\n                    </div>\n                )}\n                {fetched && (\n                    <div className=\"opacity-0 my-6 fade-in\">\n                        <div className=\"flex flex-wrap justify-center\">\n                            <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                                <div className=\"w-full md:w-40 font-bold cursor-pointer flex pb-6 text-xs text-gray-600 items-center\">\n                                    <Link to={'/'}>Home</Link> <span className=\"px-1\">/</span>\n                                    <select\n                                        onChange={changeStatePage}\n                                        defaultValue={stateCode}\n                                        name=\"states\"\n                                        className=\"bg-gray-200 font-bold appearance-none py-1 px-2 state-select\"\n                                    >\n                                        {statesKeys.map((key) => {\n                                            return (\n                                                <option value={key} key={key}>\n                                                    {STATE_CODES[key]}\n                                                </option>\n                                            );\n                                        })}\n                                    </select>\n                                </div>\n\n                                <div className=\"flex justify-between text-primary font-bold items-center my-6\">\n                                    <div>\n                                        <h1 className=\"font-extra-bold text-primary text-3xl\">{stateName}</h1>\n                                        <div className=\"text-xs text-gray-700 font-bold\">\n                                            <h2 className=\"\">Last Updated</h2>\n                                            <h2 id=\"lastUpdated\" className=\"capitalize\">\n                                                {updatedTime}\n                                            </h2>\n                                        </div>\n                                    </div>\n                                    <div>\n                                        <Button\n                                            onClick={shareTheApp}\n                                            color=\"primary\"\n                                            className=\"bg-primary\"\n                                            endIcon={<ShareIcon />}\n                                        >\n                                            Share\n                                        </Button>\n                                    </div>\n                                </div>\n                                <div className=\"w-full fade-in\">\n                                    <DisplayCard ref={childRef} cards={displayCards} count={2000} />\n                                </div>\n                                <div className={`w-full my-6 ${fetched ? 'fade-in anim-delay-1' : ''}`}>\n                                    <Table rows={tableData.rows} columns={tableData.columns} />\n                                </div>\n                            </div>\n                            <div className=\"w-full md:w-40 md:mx-10 pb-4\">\n                                <div className=\"\">\n                                    <div className=\"flex justify-between fade-in anim-delay-2\">\n                                        <div className=\"text-blue-600 items-center justify-center p-2\">\n                                            <div className=\"text-xs py-1\">Tested</div>\n                                            <div className=\"text-xl font-bold\">{testingData.tested}</div>\n                                            {testingData.date}\n                                        </div>\n                                        <div className=\"text-blue-600 items-center justify-center text-right p-2\">\n                                            <div className=\"text-xs py-1\">\n                                                Population{' '}\n                                                <a\n                                                    rel=\"noopener\"\n                                                    target=\"_blank\"\n                                                    className=\"bg-blue-100\"\n                                                    href={PUPULATION_SOURCE}\n                                                >\n                                                    2019\n                                                </a>\n                                            </div>\n                                            <div className=\"text-sm font-bold\">{testingData.population}</div>\n                                            <div className=\"text-sm font-bold\">\n                                                {testingData.test_per_million} tests / million people\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"fade-in opacity-0  anim-delay-2 py-4\">\n                                        <Map\n                                            initCardData={mapInitData}\n                                            stateCode={stateCode}\n                                            seriesPoints={districtData}\n                                            joinBy={'district'}\n                                            cards={['confirmed', 'active', 'recovered', 'dead']}\n                                            zones={zones}\n                                        />\n                                    </div>\n                                    <div className=\"w-full fade-in\">\n                                        <MetaCard history={caseHistory} tests={testingData} report={mapInitData} />\n                                    </div>\n\n                                    <div className=\"w-full border my-6\">\n                                        {dailyChart && <TrendGraph chartJson={dailyChart} history={caseHistory} />}\n                                    </div>\n\n                                    <div className=\"w-full border my-6\" style={{height: '400px'}}>\n                                        <Chart seriesData={percentChart} name=\"percent\" callback={chartCallback} />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default State;\n","import {useEffect} from 'react';\nimport {useLocation} from 'react-router-dom';\n\nexport default function ScrollToTop() {\n    const {pathname} = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return null;\n}\n","import React from 'react';\nimport {BrowserRouter, Route, Redirect, Switch} from 'react-router-dom';\n\nimport Navbar from './components/navbar';\nimport Home from './components/home';\nimport Helpline from './components/helplines';\nimport State from './components/state';\nimport './styles/styles.css';\nimport ScrollToTop from './utils/scroll-top';\nimport {Helmet} from 'react-helmet';\nimport Analytics from 'react-router-ga';\n\nfunction App() {\n    const pages = [\n        {\n            pageLink: '/',\n            view: Home,\n            displayName: 'Home',\n            showInNavbar: true,\n        },\n        {\n            pageLink: '/helplines',\n            view: Helpline,\n            displayName: 'Helplines',\n            showInNavbar: true,\n        },\n        {\n            pageLink: '/state/:stateCode',\n            view: State,\n            displayName: 'State',\n            showInNavbar: false,\n        },\n    ];\n\n    const schemaMarkup = {\n        '@context': 'http://schema.org/',\n        '@type': 'NGO',\n        name: 'Coronavirus Outbreak in India: Latest Map and Case Count',\n        alternateName: 'COVID-19 Tracker',\n        url: 'https://track-covid-19.in',\n        image: 'https://www.track-covid19.in/thumbnail.png',\n    };\n\n    return (\n        <div className=\"App\">\n            <Helmet>\n                <script type=\"application/ld+json\">{JSON.stringify(schemaMarkup)}</script>\n            </Helmet>\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <ScrollToTop />\n                <Analytics id=\"UA-163302592-1\">\n                    <Route\n                        render={({location}) => (\n                            <div className=\"Routing\">\n                                <Navbar pages={pages} />\n                                <Switch location={location}>\n                                    {pages.map((page, index) => {\n                                        return (\n                                            <Route\n                                                exact\n                                                path={page.pageLink}\n                                                render={({match}) => (\n                                                    <page.view key={match.params.stateCode || index} />\n                                                )}\n                                                key={index}\n                                            />\n                                        );\n                                    })}\n                                    <Redirect to=\"/\" />\n                                </Switch>\n                            </div>\n                        )}\n                    />\n                </Analytics>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}