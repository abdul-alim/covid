{"version":3,"sources":["components/navbar.jsx","components/arrow.js","components/display-card.jsx","components/table.jsx","utils/sort.js","utils/common-utils.js","components/text.js","components/Map.js","components/home.jsx","components/helplines.jsx","constants/state-code.js","constants/population.js","components/state.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","pages","useState","className","src","alt","map","page","i","showInNavbar","exact","to","pageLink","key","activeClassName","path","animationDelay","animationDelayForNavbar","window","location","pathname","style","displayName","Arrow","arrow","up","marginTop","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","points","DisplayCard","forwardRef","ref","count","cc","cards","styles","setCards","useImperativeHandle","updateDisplayCardCounts","card","bg100","bg200","shadow","flexAuto","bg","colorClass","autoWidth","delta","value","name","Table","props","columns","rows","setValues","useEffect","slice","sortRows","event","thisElement","currentTarget","prop","dataset","asc","ascending","sorted","sort","a","b","NaN","descending","column","onClick","data-prop","accessor","title","row","index","j","columnName","todayCount","extraClass","today","district","defined","obj","undefined","getCards","total","infected","recovered","dead","filter","isNaN","MapText","init","state","child","React","createRef","data","this","setState","current","Component","Map","handleMapHover","update","stateCode","rawPoints","seriesPoints","joinBy","codeLower","toLowerCase","scopeCode","object_map","forEach","Promise","all","axios","get","toposjon","mapData","$ZC","mapCollections","objects","source","geometries","name_ascii","properties","confirmed","active","myDiv","classList","add","scope","seriesdata","chartdata","last","chart","plot","plotoptions","geoheatmap","events","mousemove","error","point","d3","allowDefault","maps","c","Home","fetched","setFetched","setData","tableData","setTableData","mapInitData","setMapInitData","childRef","useRef","displayCards","setDisplayCards","stateData","setStateData","getData","reports","console","log","trend","isMobileScreen","innerWidth","states","Helpline","helplines","setHelplines","getHelplines","id","Object","keys","helpline","JSON","stringify","href","number","type","STATE_CODES","AP","AR","AS","BR","CT","GA","GJ","HR","HP","JH","KA","KL","MP","MH","MN","ML","MZ","NL","OR","PB","RJ","SK","TN","TG","TR","UT","UP","WB","AN","CH","DN","DD","DL","JK","LA","LD","PY","POPULATION","BH","State","testingData","setTestingData","useParams","history","useHistory","stateName","statesKeys","districtData","setDistrictData","district_data","state_data","districtInfo","stateInfo","testing_data","parseTime","timeParse","formatTime","timeFormat","state_population","tested","toLocaleString","date","population","test_per_million","Math","round","districts","onChange","push","target","defaultValue","App","view","basename","process","render","match","params","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f0836fa8.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Link, NavLink} from 'react-router-dom';\n\nconst navLinkProps = (path, animationDelay) => ({\n    className: `${window.location.pathname === path ? 'focused' : ''}`,\n    style: {\n        animationDelay: `${animationDelay}s`,\n    },\n});\n\nfunction Navbar({pages}) {\n    const [expand, setExpand] = useState(false);\n    return (\n        <nav className=\"flex items-center flex-wrap bg-white text-primary py-2\">\n            <div className=\"container py-2 px-2 items-center font-bold text-lg\">\n                <div className=\"w-full flex items-center justify-between -my-2\">\n                    <div className=\"flex items-center cursor-pointer lg:flex\">\n                        <img\n                            src=\"/images/covid.svg\"\n                            alt=\"logo\"\n                            className=\"h-10 w-auto mr-3\"\n                        />\n                        <div className=\"text-xl font-bold text-black text-primary\">\n                            COVID-19 India\n                            <span className=\"text-red-600 uppercase live-txt blink\">\n                                Live\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"flex ml-auto mr-1\">\n                        {pages.map((page, i) => {\n                            if (page.showInNavbar === true) {\n                                return (\n                                    <NavLink\n                                        exact={true}\n                                        to={page.pageLink}\n                                        key={i}\n                                        className={\n                                            'mx-1 px-3 py-4 hidden lg:block nav-link'\n                                        }\n                                        activeClassName={\n                                            'relative nav-link-active'\n                                        }\n                                    >\n                                        <span\n                                            {...navLinkProps(\n                                                page.pageLink,\n                                                page.animationDelayForNavbar\n                                            )}\n                                        >\n                                            {page.displayName}\n                                        </span>\n                                    </NavLink>\n                                );\n                            }\n                            return null;\n                        })}\n                    </div>\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from 'react';\n\n/**\n *\n * @return {string}\n * @constructor\n */\nfunction Arrow({up}) {\n    let arrow = up ? '5 12 12 5 19 12' : '5 12 12 19 19 12';\n    return (\n        <svg\n            style={{marginTop: '-0.14rem'}}\n            className=\"inline-block\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"10\"\n            height=\"10\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"3\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\" />\n            <polyline points={arrow} />\n        </svg>\n    );\n}\n\nexport default Arrow;\n","import React, {\n    useEffect,\n    useState,\n    forwardRef,\n    useImperativeHandle,\n} from 'react';\nimport Arrow from './arrow';\n\nconst DisplayCard = forwardRef(({count, cards: cc, styles = {}}, ref) => {\n    let [cards, setCards] = useState(cc);\n\n    useImperativeHandle(ref, () => ({\n        updateDisplayCardCounts(cards) {\n            setCards(cards);\n        },\n    }));\n\n    return (\n        <div className=\"flex flex-row justify-center my-5 justify-between\">\n            {cards.map((card, i) => {\n                let bg100, bg200, shadow, flexAuto;\n                if (styles.bg !== false) {\n                    bg100 = `bg-${card.colorClass}-100`;\n                    bg200 = `bg-${card.colorClass}-200`;\n                }\n\n                if (styles.shadow !== false) {\n                    shadow = 'shadow';\n                }\n\n                if (styles.autoWidth !== false) {\n                    flexAuto = 'flex-auto';\n                }\n\n                return (\n                    <div\n                        key={i}\n                        className={`${\n                            i ? 'ml-2' : ''\n                        } w-24 flex ${flexAuto} flex-col rounded overflow-hidden ${shadow} text-center text-${\n                            card.colorClass\n                        }-600`}\n                    >\n                        <div\n                            className={`pt-2 flex flex-auto flex-col items-center justify-center ${bg100} font-bold`}\n                        >\n                            {card.delta && (\n                                <span className=\"text-xs\">\n                                    <Arrow up={card.delta >= 0} />\n                                    {card.delta}\n                                </span>\n                            )}\n                            <span className=\"text-xl lg:text-2xl py-1\">\n                                {card.value + ''}\n                            </span>\n                        </div>\n                        <div\n                            className={`py-2 w-full ${bg200} text-sm font-semibold`}\n                        >\n                            <span className=\"\">{card.name}</span>\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n});\n\nexport default DisplayCard;\n","import React, {useEffect, useState} from 'react';\nimport {ascending, descending} from '../utils/sort';\nimport Arrow from './arrow';\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction Table(props) {\n    const [{rows, columns}, setValues] = useState({\n        columns: props.columns,\n        rows: props.rows,\n    });\n\n    useEffect(() => {\n        setValues({\n            columns: props.columns.slice(0),\n            rows: props.rows.slice(0),\n        });\n    }, [props]);\n\n    const sortRows = function (event) {\n        let thisElement = event.currentTarget,\n            {prop} = thisElement.dataset;\n\n        let asc = (thisElement.ascending = !thisElement.ascending);\n        let sorted = rows.slice(0).sort(function (a, b) {\n            return asc\n                ? descending(a[prop], b[prop])\n                : ascending(a[prop], b[prop]);\n        });\n        setValues({\n            rows: sorted,\n            columns,\n        });\n    };\n\n    return (\n        <table className=\"w-full\">\n            <tbody className=\"text-xs leading-tight border-b-2 cursor-pointer\">\n                <tr>\n                    {columns.map((column) => (\n                        <th\n                            className=\"capitalize border px-2 py-2 sort-by\"\n                            key={column.name}\n                            onClick={sortRows}\n                            data-prop={column.accessor}\n                            title=\"Click to sort\"\n                        >\n                            {column.name}\n                        </th>\n                    ))}\n                </tr>\n            </tbody>\n            <tbody className=\"font-bold\">\n                {rows.map((row, index) => (\n                    <tr key={index}>\n                        {columns.map((column, j) => {\n                            let columnName = column.accessor,\n                                colorClass = column.colorClass,\n                                todayCount = 0,\n                                count = row[columnName],\n                                extraClass = '';\n\n                            if (row.today) {\n                                todayCount = row.today[columnName];\n                            }\n\n                            if (row.district === 'Unknown') {\n                                extraClass = `bg-${colorClass}-200 text-${colorClass}-600`;\n                            }\n\n                            return (\n                                <td\n                                    key={j}\n                                    className={`${\n                                        j === 0 ? 'bg-gray-200' : 'text-right'\n                                    }  text-2xs border px-2 py-2 ${extraClass}`}\n                                >\n                                    <span>\n                                        {j > 0 && todayCount ? (\n                                            <span\n                                                className={` mr-1 text-${colorClass}-600`}\n                                            >\n                                                <Arrow up={todayCount > 0} />\n                                                <span>{todayCount}</span>\n                                            </span>\n                                        ) : (\n                                            ''\n                                        )}\n                                    </span>\n                                    <span className=\"text-sm\">{count}</span>\n                                </td>\n                            );\n                        })}\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n}\n\nexport default Table;\n","/**\n *\n * @param a\n * @param b\n * @return {number}\n */\nfunction ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\n/**\n *\n * @param a\n * @param b\n * @return {number}\n */\nfunction descending(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n\nexport {ascending, descending};\n","/**\n *\n * @param xs\n * @param key\n * @return {*}\n */\nexport function groupBy(xs, key) {\n    return xs.reduce(function (rv, x) {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n}\n\nexport function defined(obj) {\n    return obj !== undefined;\n}\n","import React, {useEffect, useState} from 'react';\nimport DisplayCard from './display-card';\nimport {defined} from '../utils/common-utils';\n\nconst getCards = (total = {}, today = {}) => {\n    return [\n        {\n            name: 'Confirmed',\n            value: total.infected,\n            delta: today.infected,\n            colorClass: 'red',\n        },\n        {\n            name: 'Active',\n            value: total.infected - total.recovered - total.dead,\n            delta: today.infected - today.recovered - today.dead,\n            colorClass: 'orange',\n        },\n        {\n            name: 'Recovered',\n            value: total.recovered,\n            delta: today.recovered,\n            colorClass: 'green',\n        },\n        {\n            name: 'Dead',\n            value: total.dead,\n            delta: today.dead,\n            colorClass: 'gray',\n        },\n    ].filter((card) => defined(card.value) && !isNaN(card.value));\n};\n\nclass MapText extends React.Component {\n    constructor({init}) {\n        super();\n\n        this.state = init;\n        this.child = React.createRef();\n    }\n\n    update(data, today) {\n        this.setState(data);\n        let cards = getCards(data, today);\n        this.child.current.updateDisplayCardCounts(cards);\n    }\n\n    render() {\n        let cards = getCards(this.state);\n        let {name, infected} = this.state;\n        return (\n            <div>\n                <h2 className=\"font-extra-bold text-xl text-primary my-2\">\n                    {name}\n                </h2>\n                <DisplayCard\n                    styles={{bg: false, autoWidth: false}}\n                    cards={cards}\n                    count={2000}\n                    ref={this.child}\n                />\n            </div>\n        );\n    }\n}\nexport default MapText;\n","import React from 'react';\nimport axios from 'axios';\nimport MapText from './text';\n\nclass Map extends React.Component {\n    constructor(props) {\n        super(props);\n        this.child = React.createRef();\n    }\n\n    handleMapHover = (data, today) => {\n        this.child.current.update(data, today);\n    };\n\n    async componentDidMount() {\n        let {stateCode, seriesPoints: rawPoints, joinBy} = this.props,\n            codeLower = stateCode.toLowerCase(),\n            scopeCode = `countries-ind-${codeLower}-2`,\n            seriesPoints = [];\n\n        // create a object map and then asign to the series poitns\n        let object_map = {};\n        rawPoints.forEach((row) => {\n            object_map[row[joinBy]] = row;\n        });\n\n        const [{data: toposjon}, {data: mapData}] = await Promise.all([\n            axios.get(`/maps/${stateCode}.topojson`),\n            axios.get('/charts/map.json'),\n        ]);\n\n        window.$ZC.mapCollections[scopeCode] = toposjon;\n\n        // create data for all available district\n        seriesPoints = toposjon.objects.source.geometries.map(\n            ({properties: {name_ascii}}) => {\n                let confirmed = 0,\n                    active = 0,\n                    recovered = 0,\n                    dead = 0;\n\n                if (object_map[name_ascii]) {\n                    ({confirmed, active, recovered, dead} = object_map[\n                        name_ascii\n                    ]);\n                }\n                return [name_ascii, confirmed, active, recovered, dead];\n            }\n        );\n\n        if (this.myDiv) {\n            this.myDiv.classList.add('fade-in');\n            mapData.map.scope = scopeCode;\n            mapData.seriesdata.chartdata[0].data = [seriesPoints];\n            \n            let last = null;\n\n            mapData.chart.plot.plotoptions.geoheatmap.events = {\n                mousemove: (error, data) => {\n                    let [name, infected, active, recovered, dead] = data.point,\n                        today = {recovered: 0, infected: 0, active: 0, dead: 0};\n\n                    if (object_map[name]) {\n                        today = object_map[name].today;\n                    }\n                    \n                    if (name !== last) {\n                        this.handleMapHover(\n                            {\n                                name,\n                                infected,\n                                active,\n                                recovered,\n                                dead,\n                            },\n                            today\n                        );\n                        last = name;\n                    }\n                    window.d3.event.allowDefault = true;\n                },\n            };\n\n            window.$ZC.maps(this.myDiv, mapData);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <MapText ref={this.child} init={this.props.init} />\n                <div\n                    className=\"live-map my-6\"\n                    ref={(c) => (this.myDiv = c)}\n                ></div>\n            </div>\n        );\n    }\n}\n\nexport default Map;\n","import React, {useEffect, useRef, useState} from 'react';\nimport DisplayCard from './display-card';\nimport axios from 'axios';\nimport Table from './table';\nimport Map from './Map';\nimport {Link} from 'react-router-dom';\nimport {groupBy} from '../utils/common-utils';\n\nfunction Home({}) {\n    const [fetched, setFetched] = useState(false);\n    const [data, setData] = useState({});\n    const [tableData, setTableData] = useState({rows: [], columns: []});\n    const [mapInitData, setMapInitData] = useState({});\n\n    const childRef = useRef();\n\n    const getCards = (total = {}, today = {}) => {\n        return [\n            {\n                name: 'Confirmed',\n                value: total.infected,\n                delta: today.infected,\n                colorClass: 'red',\n            },\n            {\n                name: 'Active',\n                value: total.infected - total.recovered - total.dead,\n                delta: today.infected - today.recovered - today.dead,\n                colorClass: 'orange',\n            },\n            {\n                name: 'Recovered',\n                value: total.recovered,\n                delta: today.recovered,\n                colorClass: 'green',\n            },\n            {\n                name: 'Dead',\n                value: total.dead,\n                delta: today.dead,\n                colorClass: 'gray',\n            },\n        ];\n    };\n\n    const [displayCards, setDisplayCards] = useState(getCards());\n    const [stateData, setStateData] = useState([]);\n\n    useEffect(() => {\n        if (fetched === false) {\n            getData();\n        }\n    }, [fetched]);\n\n    const getData = async () => {\n        try {\n            let [{data: reports}] = await Promise.all([\n                axios.get('/data/trend_v2.json')\n            ]);\n\n            \n            console.log(reports);\n            \n            setData(reports);\n\n            setDisplayCards(getCards(reports.total, reports.trend.today));\n            // set active count\n            // reports.states = reports.states.filter((row) => row.infected > 0);\n            //\n            // // let seriesPoints = [];\n            // // reports.states.forEach((row) => {\n            // //     // data mapped\n            // //\n            // //     row.active = row.infected - row.recovered - row.dead;\n            // //     row.today.active =\n            // //         row.today.infected - row.today.recovered - row.today.dead;\n            // //\n            // //     seriesPoints.push([\n            // //         row.state,\n            // //         row.infected,\n            // //         row.active,\n            // //         row.recovered,\n            // //         row.dead,\n            // //     ]);\n            // // });\n\n            setStateData([]);\n            let mapInitData = {...reports.total, name: 'India'};\n            // map init data\n            reports.total.active =\n                reports.total.infected -\n                reports.total.recovered -\n                reports.total.dead;\n            setMapInitData(mapInitData);\n\n            let isMobileScreen = window.innerWidth < 769;\n\n            setTableData({\n                rows: reports.states,\n                columns: [\n                    {name: 'state/UT', accessor: 'state'},\n                    {\n                        name: isMobileScreen ? 'cnfmd' : 'confirmed',\n                        accessor: 'infected',\n                        colorClass: 'text-red-600',\n                    },\n                    {\n                        name: isMobileScreen ? 'actv' : 'active',\n                        accessor: 'active',\n                        colorClass: 'text-orange-600',\n                    },\n                    {\n                        name: isMobileScreen ? 'Rcvrd' : 'recovered',\n                        accessor: 'recovered',\n                        colorClass: 'text-green-600',\n                    },\n                    {\n                        name: 'dead',\n                        accessor: 'dead',\n                        colorClass: 'text-gray-600',\n                    },\n                ],\n            });\n\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    return (\n        <div className={'container'}>\n            <div\n                className={`container opacity-0 my-2 ${\n                    fetched ? 'fade-in' : ''\n                }`}\n            >\n                <h1 className=\"font-bold my-6 text-center md:text-3xl text-xl\">\n                    Live Covid-19 statistcs - India\n                </h1>\n                <div className=\"flex flex-wrap -mx-2 justify-center\">\n                    <div className=\"w-full md:w-40 md:px-6 px-1\">\n                        <div\n                            className={`${\n                                fetched ? 'fade-in anim-delay-2' : ''\n                            }`}\n                        >\n                            {fetched && (\n                                <Map\n                                    init={mapInitData}\n                                    seriesPoints={stateData}\n                                    stateCode={'IND'}\n                                />\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"w-full md:w-40 md:px-6 px-1 pb-4\">\n                        <div className=\"w-full fade-in\">\n                            {fetched && (\n                                <DisplayCard\n                                    ref={childRef}\n                                    cards={displayCards}\n                                    count={2000}\n                                />\n                            )}\n                        </div>\n                        <div\n                            className={`w-full my-6 ${\n                                fetched ? 'fade-in anim-delay-1' : ''\n                            }`}\n                        >\n                            {fetched && (\n                                <Table\n                                    rows={tableData.rows}\n                                    columns={tableData.columns}\n                                />\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Home;\n","import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\n\n/**\n *\n * @return {*}\n * @constructor\n */\nfunction Helpline({}) {\n    const [fetched, setFetched] = useState(false);\n    const [helplines, setHelplines] = useState(false);\n\n    useEffect(() => {\n        if (fetched === false) {\n            getHelplines();\n        }\n    }, [fetched]);\n\n    const getHelplines = async () => {\n        try {\n            const [{data: helplines}] = await Promise.all([\n                axios.get('data/helplines.json'),\n            ]);\n            setHelplines(helplines);\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    /**\n     *\n     * @param value\n     * @param type\n     * @return {string|*}\n     */\n    const formatLinkType = (value, type) => {\n        if (type === 'phone') {\n            return `tel:${value}`;\n        } else if (type === 'whatsapp') {\n            return `whatsapp://send?phone=${value}`;\n        } else if (type === 'email') {\n            return `mailto:${type}`;\n        }\n        return value;\n    };\n\n    return (\n        <div className={'container px-4'} id=\"help-lines\">\n            {Object.keys(helplines).map((key, i) => {\n                console.log(i * 10);\n                return (\n                    <div key={i}>\n                        <div className=\"fade-in border-l-2 border-primary text-primary font-bold p-2 uppercase my-2\">\n                            <span className=\"ml-1\">{key}</span>\n                        </div>\n                        <div\n                            className={'flex flex-wrap -mx-2'}\n                            \n                        >\n                            {helplines[key].map((helpline, j) => {\n                                return (\n                                    <div\n                                        key={`${JSON.stringify(helpline)}`}\n                                        className={\n                                            \n                                            'fade-in md:w-auto w-full shadow px-4 py-2 text-base mx-2 my-2 md:flex-basis-250'\n                                        }\n                                        style={{animationDelay: (30 * j) + 'ms'}}\n                                    >\n                                        <div className=\"font-bold\">\n                                            {helpline.name}\n                                        </div>\n                                        <a\n                                            className=\"pr-2 underline text-blue-500\"\n                                            href={formatLinkType(\n                                                helpline.number,\n                                                helpline.type\n                                            )}\n                                        >\n                                            {helpline.number}\n                                        </a>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default Helpline;\n","export const STATE_CODES = {\n    AP: 'Andhra Pradesh',\n    AR: 'Arunachal Pradesh',\n    AS: 'Assam',\n    BR: 'Bihar',\n    CT: 'Chhattisgarh',\n    GA: 'Goa',\n    GJ: 'Gujarat',\n    HR: 'Haryana',\n    HP: 'Himachal Pradesh',\n    JH: 'Jharkhand',\n    KA: 'Karnataka',\n    KL: 'Kerala',\n    MP: 'Madhya Pradesh',\n    MH: 'Maharashtra',\n    MN: 'Manipur',\n    ML: 'Meghalaya',\n    MZ: 'Mizoram',\n    NL: 'Nagaland',\n    OR: 'Odisha',\n    PB: 'Punjab',\n    RJ: 'Rajasthan',\n    SK: 'Sikkim',\n    TN: 'Tamil Nadu',\n    TG: 'Telangana',\n    TR: 'Tripura',\n    UT: 'Uttarakhand',\n    UP: 'Uttar Pradesh',\n    WB: 'West Bengal',\n    AN: 'Andaman and Nicobar Islands',\n    CH: 'Chandigarh',\n    DN: 'Dadra and Nagar Haveli',\n    DD: 'Daman and Diu',\n    DL: 'Delhi',\n    JK: 'Jammu and Kashmir',\n    LA: 'Ladakh',\n    LD: 'Lakshadweep',\n    PY: 'Puducherry',\n};\n","export const POPULATION = {\n    DL: 21763471,\n    HR: 28941133,\n    KL: 36475649,\n    HP: 7560770,\n    PB: 30355185,\n    GA: 1587012,\n    TG: 39184011,\n    UT: 11140566,\n    CH: 1142479,\n    LD: 72172,\n    DN: 384058,\n    GJ: 64801901,\n    CT: 28989789,\n    DD: 223165,\n    AN: 411278,\n    TN: 77177540,\n    MH: 121924973,\n    KA: 66834193,\n    OR: 45861035,\n    WB: 98662146,\n    PY: 1394026,\n    AP: 53390841,\n    JH: 37933898,\n    TR: 4112223,\n    MP: 83849671,\n    MZ: 1222134,\n    UP: 233378519,\n    RJ: 79584255,\n    SK: 680721,\n    BH: 122256981,\n    MN: 3048861,\n    AR: 1548776,\n    JK: 13468313,\n    LA: 279924,\n    NL: 2218634,\n    ML: 3320226,\n    AS: 35080827,\n};\n","import React, {useEffect, useRef, useState} from 'react';\nimport DisplayCard from './display-card';\nimport axios from 'axios';\nimport Table from './table';\nimport Map from './Map';\nimport {Link, useParams, useHistory} from 'react-router-dom';\nimport {STATE_CODES} from '../constants/state-code';\nimport {POPULATION} from '../constants/population.js';\n\nconst d3 = window.d3;\n\nfunction State({}) {\n    const [fetched, setFetched] = useState(false);\n    const [tableData, setTableData] = useState({rows: [], columns: []});\n    const [mapInitData, setMapInitData] = useState({});\n    const [testingData, setTestingData] = useState({});\n    const childRef = useRef();\n\n    const {stateCode} = useParams();\n    const history = useHistory();\n\n    const stateName = STATE_CODES[stateCode];\n    const statesKeys = Object.keys(STATE_CODES);\n\n    // if (childRef.current) {\n    //     setInterval(function () {\n    //         childRef.current.updateDisplayCardCounts(Math.random());\n    //     }, 1000);\n    // }\n\n    const getCards = (total = {}, today = {}) => {\n        return [\n            {\n                name: 'Confirmed',\n                value: total.confirmed,\n                delta: today.confirmed,\n                colorClass: 'red',\n            },\n            {\n                name: 'Active',\n                value: total.active,\n                delta: today.active,\n                colorClass: 'orange',\n            },\n            {\n                name: 'Recovered',\n                value: total.recovered,\n                delta: today.recovered,\n                colorClass: 'green',\n            },\n            {\n                name: 'Dead',\n                value: total.dead,\n                delta: today.dead,\n                colorClass: 'gray',\n            },\n        ];\n    };\n\n    const [displayCards, setDisplayCards] = useState(getCards());\n    const [districtData, setDistrictData] = useState([]);\n\n    useEffect(() => {\n        setFetched(false);\n        getData();\n    }, [stateCode]);\n\n    const getData = async () => {\n        try {\n            let [\n                {data: district_data},\n                {data: state_data},\n            ] = await Promise.all([\n                axios.get('/data/district_v2.json'),\n                axios.get('/data/trend_v2.json'),\n            ]);\n\n            let districtInfo = district_data[stateCode];\n            let stateInfo = state_data.states[stateCode];\n\n            let {testing_data} = stateInfo;\n\n            var parseTime = d3.timeParse('%d/%m/%Y');\n            var formatTime = d3.timeFormat('%B %d');\n\n            let state_population = POPULATION[stateCode];\n\n            let testingData = {\n                tested: testing_data.tested.toLocaleString(),\n                date: formatTime(parseTime(testing_data.date)),\n                population: state_population.toLocaleString(),\n                test_per_million: Math.round(\n                    (testing_data.tested / state_population) * 1000000\n                ).toLocaleString(),\n            };\n\n            setTestingData(testingData);\n\n            setDisplayCards(getCards(stateInfo, stateInfo.today));\n\n            setDistrictData(districtInfo.districts);\n\n            setMapInitData({});\n\n            setTableData({\n                rows: districtInfo.districts,\n                columns: [\n                    {name: 'district', accessor: 'district'},\n                    {\n                        name: 'confirmed',\n                        accessor: 'confirmed',\n                        colorClass: 'red',\n                    },\n                    {\n                        name: 'active',\n                        accessor: 'active',\n                        colorClass: 'orange',\n                    },\n                    {\n                        name: 'recovered',\n                        accessor: 'recovered',\n                        colorClass: 'green',\n                    },\n                    {\n                        name: 'deceased',\n                        accessor: 'dead',\n                        colorClass: 'gray',\n                    },\n                ],\n            });\n\n            setFetched(true);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const changeStatePage = (event) => {\n        history.push('/state/' + event.target.value);\n    };\n\n    return (\n        <div className={`container opacity-0 my-2 ${fetched ? 'fade-in' : ''}`}>\n            <div className=\"flex flex-wrap -mx-2 justify-center\">\n                <div className=\"w-full md:w-40 md:px-6\">\n                    {fetched && (\n                        <div className=\"w-full md:w-40 font-bold cursor-pointer flex pb-6 text-xs text-gray-600 items-center\">\n                            <Link to={'/'}>Home</Link>{' '}\n                            <span className=\"px-1\">/</span>\n                            <select\n                                onChange={changeStatePage}\n                                defaultValue={stateCode}\n                                name=\"states\"\n                                className=\"bg-gray-200 font-bold appearance-none py-1 px-2 state-select\"\n                            >\n                                {statesKeys.map((key) => {\n                                    return (\n                                        <option value={key} key={key}>\n                                            {STATE_CODES[key]}\n                                        </option>\n                                    );\n                                })}\n                            </select>\n                        </div>\n                    )}\n\n                    <div className=\"my-6\">\n                        <h1 className=\"font-extra-bold text-primary text-3xl\">\n                            {stateName}\n                        </h1>\n                        <div className=\"text-sm\">Last Updated on</div>\n                    </div>\n\n                    <div className=\"w-full fade-in\">\n                        {fetched && (\n                            <DisplayCard\n                                ref={childRef}\n                                cards={displayCards}\n                                count={2000}\n                            />\n                        )}\n                    </div>\n                    <div\n                        className={`w-full my-6 ${\n                            fetched ? 'fade-in anim-delay-1' : ''\n                        }`}\n                    >\n                        {fetched && (\n                            <Table\n                                rows={tableData.rows}\n                                columns={tableData.columns}\n                            />\n                        )}\n                    </div>\n                </div>\n                <div className=\"w-full md:w-40 md:px-6 mt-6 pt-2\">\n                    <div className=\"sticky\">\n                        <div className=\"flex justify-between fade-in anim-delay-2\">\n                            <div className=\"text-blue-600 items-center justify-center p-2\">\n                                <div className=\"text-xs py-1\">Tested</div>\n                                <div className=\"text-xl font-bold\">\n                                    {testingData.tested}\n                                </div>\n                                <div className=\"text-xs\">\n                                    As of {testingData.date} as per{' '}\n                                    <span className=\"bg-blue-100\">source</span>\n                                </div>\n                            </div>\n                            <div className=\"text-blue-600 items-center justify-center text-right p-2\">\n                                <div className=\"text-xs py-1\">Population</div>\n                                <div className=\"text-sm font-bold\">\n                                    {testingData.population}\n                                </div>\n                                <div className=\"text-sm font-bold\">\n                                    {testingData.test_per_million} tests /\n                                    million people\n                                </div>\n                            </div>\n                        </div>\n                        <div\n                            className={`${\n                                fetched\n                                    ? 'fade-in opacity-0  anim-delay-2 py-4'\n                                    : ''\n                            }`}\n                        >\n                            {fetched && (\n                                <Map\n                                    init={mapInitData}\n                                    stateCode={stateCode}\n                                    seriesPoints={districtData}\n                                    joinBy={'district'}\n                                />\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"flex flex-wrap -mx-2 justify-center\">\n                <div className=\"w-full md:w-40 md:mx-6  mt-6 pt-2 percent-chart border\"></div>\n                <div className=\"w-full md:w-40 md:mx-6  mt-6 pt-2 percent-chart border\"></div>\n            </div>\n\n            <div className=\"flex flex-wrap -mx-2 justify-center\">\n                <div className=\"w-full md:w-40 md:mx-6  mt-6 pt-2 percent-chart border\"></div>\n                <div className=\"w-full md:w-40 md:mx-6  mt-6 pt-2 percent-chart border\"></div>\n            </div>\n\n            <div className=\"flex flex-wrap -mx-2 justify-center\">\n                <div className=\"w-full md:w-40 md:mx-6  mt-6 pt-2 percent-chart border\"></div>\n                <div className=\"w-full md:w-40 md:mx-6  mt-6 pt-2 percent-chart border\"></div>\n            </div>\n        </div>\n    );\n}\n\nexport default State;\n","import React from 'react';\nimport {\n    BrowserRouter,\n    Route,\n    Redirect,\n    Switch,\n} from 'react-router-dom';\n\nimport Navbar from './components/navbar';\nimport Home from './components/home';\nimport Helpline from './components/helplines';\nimport State from './components/state';\nimport './styles/styles.css';\n\nfunction App() {\n    const pages = [\n        {\n            pageLink: '/',\n            view: Home,\n            displayName: 'Home',\n            animationDelayForNavbar: 0.2,\n            showInNavbar: true,\n        },\n        {\n            pageLink: '/helplines',\n            view: Helpline,\n            displayName: 'Helplines',\n            animationDelayForNavbar: 0.6,\n            showInNavbar: true,\n        },\n        {\n            pageLink: '/state/:stateCode',\n            view: State,\n            displayName: 'State',\n            animationDelayForNavbar: 0.8,\n            showInNavbar: false,\n        },\n    ];\n\n    return (\n        <div className=\"App\">\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <Route\n                    render={({location}) => (\n                        <div className=\"Almighty-Router\">\n                            <Navbar pages={pages} />\n                            <Switch location={location}>\n                                {pages.map((page, index) => {\n                                    return (\n                                        <Route\n                                            exact\n                                            path={page.pageLink}\n                                            render={({match}) => (\n                                                <page.view\n                                                    key={\n                                                        match.params\n                                                            .stateCode || index\n                                                    }\n                                                />\n                                            )}\n                                            key={index}\n                                        />\n                                    );\n                                })}\n                                <Redirect to=\"/\" />\n                            </Switch>\n                        </div>\n                    )}\n                />\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}